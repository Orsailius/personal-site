import{ap as i}from"./index.b1f4a11b.js";const u=t=>new Promise(e=>setTimeout(e,t)),p=(t,e)=>Math.floor(Math.random()*(e-t)+t),l=async(t,e,s)=>{if(!e){console.error("The specified parent element does not exists!");return}let n=t;do{if(n===e)return;s(n),n=n.parentElement||n.parentNode}while(n!==null&&n.nodeType===1)},r=t=>t.childNodes.length===1&&t.childNodes[0].nodeType===3,a=(t,e)=>{const s=document.createElement(e);return s.textContent=t,s},d=t=>t.dataset.static===void 0,c=(t,{parentElement:e})=>{if(r(e)){const s=e.textContent,n=a(e.textContent,"p");return e.textContent="",e.appendChild(n),[{currentNode:n,text:s}]}if(r(t)){const s=t.innerHTML.replaceAll("&amp;","&");return[{currentNode:t,text:s}]}else return[...t.children].filter(d).flatMap(o=>c(o,{parentElement:e}))},h=t=>{const e=[...t.querySelectorAll("[data-static]")];for(const s of e)l(s,t,n=>{n!==s&&n.classList.add("finished-typing")})},f=(t,e)=>{const s=i(),n={parentElement:t,dispatch:s,...e},o=c(t,n);return h(t),{options:n,elements:o}};export{f as a,l as b,h as m,p as r,u as s};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5pbWF0aW9uU2V0dXAuNGQ3Mzg4Y2QuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtdHlwZXdyaXRlci9wYWNrYWdlL2hlbHBlcnMvc2xlZXAuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLXR5cGV3cml0ZXIvcGFja2FnZS9oZWxwZXJzL3JuZy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtdHlwZXdyaXRlci9wYWNrYWdlL2hlbHBlcnMvcnVuT25FdmVyeVBhcmVudFVudGlsLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N2ZWx0ZS10eXBld3JpdGVyL3BhY2thZ2UvaGVscGVycy9oYXNTaW5nbGVUZXh0Tm9kZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtdHlwZXdyaXRlci9wYWNrYWdlL2hlbHBlcnMvY3JlYXRlRWxlbWVudC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdmVsdGUtdHlwZXdyaXRlci9wYWNrYWdlL2hlbHBlcnMvZ2V0RWxlbWVudHMuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLXR5cGV3cml0ZXIvcGFja2FnZS9oZWxwZXJzL21ha2VOZXN0ZWRTdGF0aWNFbGVtZW50c1Zpc2libGUuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3ZlbHRlLXR5cGV3cml0ZXIvcGFja2FnZS9oZWxwZXJzL2FuaW1hdGlvblNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKiBAdHlwZSB7aW1wb3J0KHR5cGVzJykuU2xlZXB9ICovXG5jb25zdCBzbGVlcCA9IG1zID0+IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpXG5cbmV4cG9ydCB7IHNsZWVwIH1cbiIsIi8qKiBAdHlwZSB7aW1wb3J0KHR5cGVzJykuUmFuZG9tTnVtYmVyR2VuZXJhdG9yfSAqL1xuY29uc3Qgcm5nID0gKG1pbiwgbWF4KSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbilcblxuZXhwb3J0IHsgcm5nIH1cbiIsImV4cG9ydCBjb25zdCBydW5PbkV2ZXJ5UGFyZW50VW50aWwgPSBhc3luYyAoZWxlbWVudCwgcGFyZW50LCBjYWxsYmFjaykgPT4ge1xuXHRpZiAoIXBhcmVudCkge1xuXHRcdGNvbnNvbGUuZXJyb3IoJ1RoZSBzcGVjaWZpZWQgcGFyZW50IGVsZW1lbnQgZG9lcyBub3QgZXhpc3RzIScpXG5cdFx0cmV0dXJuXG5cdH1cblxuXHRsZXQgY3VycmVudEVsZW1lbnQgPSBlbGVtZW50XG5cdGRvIHtcblx0XHRpZiAoY3VycmVudEVsZW1lbnQgPT09IHBhcmVudCkgcmV0dXJuXG5cblx0XHRjYWxsYmFjayhjdXJyZW50RWxlbWVudClcblxuXHRcdGN1cnJlbnRFbGVtZW50ID0gY3VycmVudEVsZW1lbnQucGFyZW50RWxlbWVudCB8fCBjdXJyZW50RWxlbWVudC5wYXJlbnROb2RlXG5cdH0gd2hpbGUgKGN1cnJlbnRFbGVtZW50ICE9PSBudWxsICYmIGN1cnJlbnRFbGVtZW50Lm5vZGVUeXBlID09PSAxKVxufVxuIiwiLyoqIEB0eXBlIHtpbXBvcnQodHlwZXMnKS5IYXNTaW5nbGVUZXh0Tm9kZX0gKi9cbmNvbnN0IGhhc1NpbmdsZVRleHROb2RlID0gZWwgPT4gZWwuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgJiYgZWwuY2hpbGROb2Rlc1swXS5ub2RlVHlwZSA9PT0gM1xuXG5leHBvcnQgeyBoYXNTaW5nbGVUZXh0Tm9kZSB9XG4iLCIvKiogQHR5cGUge2ltcG9ydCh0eXBlcycpLkNyZWF0ZUVsZW1lbnR9ICovXG5jb25zdCBjcmVhdGVFbGVtZW50ID0gKHRleHQsIGVsZW1lbnRUYWcpID0+IHtcblx0Y29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWxlbWVudFRhZylcblx0ZWxlbWVudC50ZXh0Q29udGVudCA9IHRleHRcblx0cmV0dXJuIGVsZW1lbnRcbn1cblxuZXhwb3J0IHsgY3JlYXRlRWxlbWVudCB9XG4iLCJpbXBvcnQgeyBoYXNTaW5nbGVUZXh0Tm9kZSB9IGZyb20gJy4vaGFzU2luZ2xlVGV4dE5vZGUnXG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi9jcmVhdGVFbGVtZW50J1xuXG5jb25zdCBmaWx0ZXJPdXRTdGF0aWNFbGVtZW50cyA9IGNoaWxkID0+IGNoaWxkLmRhdGFzZXQuc3RhdGljID09PSB1bmRlZmluZWRcblxuLyoqIEB0eXBlIHtpbXBvcnQodHlwZXMnKS5HZXRFbGVtZW50c30gKi9cbmNvbnN0IGdldEVsZW1lbnRzID0gKG5vZGUsIHsgcGFyZW50RWxlbWVudCB9KSA9PiB7XG5cdGlmIChoYXNTaW5nbGVUZXh0Tm9kZShwYXJlbnRFbGVtZW50KSkge1xuXHRcdGNvbnN0IHRleHQgPSBwYXJlbnRFbGVtZW50LnRleHRDb250ZW50XG5cdFx0Y29uc3QgY2hpbGROb2RlID0gY3JlYXRlRWxlbWVudChwYXJlbnRFbGVtZW50LnRleHRDb250ZW50LCAncCcpXG5cdFx0cGFyZW50RWxlbWVudC50ZXh0Q29udGVudCA9ICcnXG5cdFx0cGFyZW50RWxlbWVudC5hcHBlbmRDaGlsZChjaGlsZE5vZGUpXG5cdFx0cmV0dXJuIFt7IGN1cnJlbnROb2RlOiBjaGlsZE5vZGUsIHRleHQgfV1cblx0fVxuXG5cdGlmIChoYXNTaW5nbGVUZXh0Tm9kZShub2RlKSkge1xuXHRcdGNvbnN0IHRleHRXaXRoRmlsdGVyZWRBbXBlcnNhbmQgPSBub2RlLmlubmVySFRNTC5yZXBsYWNlQWxsKCcmYW1wOycsICcmJylcblx0XHRyZXR1cm4gW3sgY3VycmVudE5vZGU6IG5vZGUsIHRleHQ6IHRleHRXaXRoRmlsdGVyZWRBbXBlcnNhbmQgfV1cblx0fSBlbHNlIHtcblx0XHRjb25zdCBjaGlsZHJlbiA9IFsuLi5ub2RlLmNoaWxkcmVuXS5maWx0ZXIoZmlsdGVyT3V0U3RhdGljRWxlbWVudHMpXG5cdFx0Y29uc3QgYWxsQ2hpbGRyZW4gPSBjaGlsZHJlbi5mbGF0TWFwKGNoaWxkID0+IGdldEVsZW1lbnRzKGNoaWxkLCB7IHBhcmVudEVsZW1lbnQgfSkpXG5cdFx0cmV0dXJuIGFsbENoaWxkcmVuXG5cdH1cbn1cblxuZXhwb3J0IHsgZ2V0RWxlbWVudHMgfVxuIiwiaW1wb3J0IHsgcnVuT25FdmVyeVBhcmVudFVudGlsIH0gZnJvbSAnLi4vaGVscGVycy9ydW5PbkV2ZXJ5UGFyZW50VW50aWwnXG5cbmV4cG9ydCBjb25zdCBtYWtlTmVzdGVkU3RhdGljRWxlbWVudHNWaXNpYmxlID0gcGFyZW50RWxlbWVudCA9PiB7XG5cdGNvbnN0IHN0YXRpY0VsZW1lbnRzID0gWy4uLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc3RhdGljXScpXVxuXHRmb3IgKGNvbnN0IHN0YXRpY0VsZW1lbnQgb2Ygc3RhdGljRWxlbWVudHMpIHtcblx0XHRydW5PbkV2ZXJ5UGFyZW50VW50aWwoc3RhdGljRWxlbWVudCwgcGFyZW50RWxlbWVudCwgY3VycmVudFN0YXRpY0VsZW1lbnQgPT4ge1xuXHRcdFx0Y29uc3QgaXNQYXJlbnRFbGVtZW50ID0gY3VycmVudFN0YXRpY0VsZW1lbnQgIT09IHN0YXRpY0VsZW1lbnRcblx0XHRcdGlzUGFyZW50RWxlbWVudCAmJiBjdXJyZW50U3RhdGljRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdmaW5pc2hlZC10eXBpbmcnKVxuXHRcdH0pXG5cdH1cbn1cbiIsImltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gJ3N2ZWx0ZSdcblxuaW1wb3J0IHsgZ2V0RWxlbWVudHMgfSBmcm9tICcuL2dldEVsZW1lbnRzJ1xuaW1wb3J0IHsgbWFrZU5lc3RlZFN0YXRpY0VsZW1lbnRzVmlzaWJsZSB9IGZyb20gJy4vbWFrZU5lc3RlZFN0YXRpY0VsZW1lbnRzVmlzaWJsZSdcblxuZXhwb3J0IGNvbnN0IGFuaW1hdGlvblNldHVwID0gKG5vZGUsIHByb3BzKSA9PiB7XG5cdGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKClcblx0Y29uc3Qgb3B0aW9ucyA9IHsgcGFyZW50RWxlbWVudDogbm9kZSwgZGlzcGF0Y2gsIC4uLnByb3BzIH1cblx0Y29uc3QgZWxlbWVudHMgPSBnZXRFbGVtZW50cyhub2RlLCBvcHRpb25zKVxuXG5cdG1ha2VOZXN0ZWRTdGF0aWNFbGVtZW50c1Zpc2libGUobm9kZSlcblxuXHRyZXR1cm4geyBvcHRpb25zLCBlbGVtZW50cyB9XG59XG4iXSwibmFtZXMiOlsic2xlZXAiLCJtcyIsInJlc29sdmUiLCJybmciLCJtaW4iLCJtYXgiLCJydW5PbkV2ZXJ5UGFyZW50VW50aWwiLCJlbGVtZW50IiwicGFyZW50IiwiY2FsbGJhY2siLCJjdXJyZW50RWxlbWVudCIsImhhc1NpbmdsZVRleHROb2RlIiwiZWwiLCJjcmVhdGVFbGVtZW50IiwidGV4dCIsImVsZW1lbnRUYWciLCJmaWx0ZXJPdXRTdGF0aWNFbGVtZW50cyIsImNoaWxkIiwiZ2V0RWxlbWVudHMiLCJub2RlIiwicGFyZW50RWxlbWVudCIsImNoaWxkTm9kZSIsInRleHRXaXRoRmlsdGVyZWRBbXBlcnNhbmQiLCJtYWtlTmVzdGVkU3RhdGljRWxlbWVudHNWaXNpYmxlIiwic3RhdGljRWxlbWVudHMiLCJzdGF0aWNFbGVtZW50IiwiY3VycmVudFN0YXRpY0VsZW1lbnQiLCJhbmltYXRpb25TZXR1cCIsInByb3BzIiwiZGlzcGF0Y2giLCJjcmVhdGVFdmVudERpc3BhdGNoZXIiLCJvcHRpb25zIiwiZWxlbWVudHMiXSwibWFwcGluZ3MiOiJ5Q0FDSyxNQUFDQSxFQUFRQyxHQUFNLElBQUksUUFBUUMsR0FBVyxXQUFXQSxFQUFTRCxDQUFFLENBQUMsRUNBNURFLEVBQU0sQ0FBQ0MsRUFBS0MsSUFBUSxLQUFLLE1BQU0sS0FBSyxPQUFRLEdBQUlBLEVBQU1ELEdBQU9BLENBQUcsRUNEekRFLEVBQXdCLE1BQU9DLEVBQVNDLEVBQVFDLElBQWEsQ0FDekUsR0FBSSxDQUFDRCxFQUFRLENBQ1osUUFBUSxNQUFNLCtDQUErQyxFQUM3RCxNQUNBLENBRUQsSUFBSUUsRUFBaUJILEVBQ3JCLEVBQUcsQ0FDRixHQUFJRyxJQUFtQkYsRUFBUSxPQUUvQkMsRUFBU0MsQ0FBYyxFQUV2QkEsRUFBaUJBLEVBQWUsZUFBaUJBLEVBQWUsVUFDaEUsT0FBUUEsSUFBbUIsTUFBUUEsRUFBZSxXQUFhLEVBQ2pFLEVDYk1DLEVBQW9CQyxHQUFNQSxFQUFHLFdBQVcsU0FBVyxHQUFLQSxFQUFHLFdBQVcsQ0FBQyxFQUFFLFdBQWEsRUNBdEZDLEVBQWdCLENBQUNDLEVBQU1DLElBQWUsQ0FDM0MsTUFBTVIsRUFBVSxTQUFTLGNBQWNRLENBQVUsRUFDakQsT0FBQVIsRUFBUSxZQUFjTyxFQUNmUCxDQUNSLEVDRk1TLEVBQTBCQyxHQUFTQSxFQUFNLFFBQVEsU0FBVyxPQUc1REMsRUFBYyxDQUFDQyxFQUFNLENBQUUsY0FBQUMsS0FBb0IsQ0FDaEQsR0FBSVQsRUFBa0JTLENBQWEsRUFBRyxDQUNyQyxNQUFNTixFQUFPTSxFQUFjLFlBQ3JCQyxFQUFZUixFQUFjTyxFQUFjLFlBQWEsR0FBRyxFQUM5RCxPQUFBQSxFQUFjLFlBQWMsR0FDNUJBLEVBQWMsWUFBWUMsQ0FBUyxFQUM1QixDQUFDLENBQUUsWUFBYUEsRUFBVyxLQUFBUCxDQUFJLENBQUUsQ0FDeEMsQ0FFRCxHQUFJSCxFQUFrQlEsQ0FBSSxFQUFHLENBQzVCLE1BQU1HLEVBQTRCSCxFQUFLLFVBQVUsV0FBVyxRQUFTLEdBQUcsRUFDeEUsTUFBTyxDQUFDLENBQUUsWUFBYUEsRUFBTSxLQUFNRyxDQUF5QixDQUFFLENBQ2hFLEtBR0UsT0FGaUIsQ0FBQyxHQUFHSCxFQUFLLFFBQVEsRUFBRSxPQUFPSCxDQUF1QixFQUNyQyxRQUFRQyxHQUFTQyxFQUFZRCxFQUFPLENBQUUsY0FBQUcsQ0FBYSxDQUFFLENBQUMsQ0FHckYsRUNyQmFHLEVBQWtDSCxHQUFpQixDQUMvRCxNQUFNSSxFQUFpQixDQUFDLEdBQUdKLEVBQWMsaUJBQWlCLGVBQWUsQ0FBQyxFQUMxRSxVQUFXSyxLQUFpQkQsRUFDM0JsQixFQUFzQm1CLEVBQWVMLEVBQWVNLEdBQXdCLENBQ25EQSxJQUF5QkQsR0FDOUJDLEVBQXFCLFVBQVUsSUFBSSxpQkFBaUIsQ0FDMUUsQ0FBRyxDQUVILEVDTGFDLEVBQWlCLENBQUNSLEVBQU1TLElBQVUsQ0FDOUMsTUFBTUMsRUFBV0MsRUFBdUIsRUFDbENDLEVBQVUsQ0FBRSxjQUFlWixFQUFNLFNBQUFVLEVBQVUsR0FBR0QsQ0FBTyxFQUNyREksRUFBV2QsRUFBWUMsRUFBTVksQ0FBTyxFQUUxQyxPQUFBUixFQUFnQ0osQ0FBSSxFQUU3QixDQUFFLFFBQUFZLEVBQVMsU0FBQUMsQ0FBVSxDQUM3QiIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDEsMiwzLDQsNSw2LDddfQ==
