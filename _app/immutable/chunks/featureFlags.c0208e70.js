const U="finalize",H="consider";function at(t,e,n){t.dispatchEvent(new CustomEvent(U,{detail:{items:e,info:n}}))}function ft(t,e,n){t.dispatchEvent(new CustomEvent(H,{detail:{items:e,info:n}}))}const C="draggedEntered",p="draggedLeft",L="draggedOverIndex",Y="draggedLeftDocument",P={LEFT_FOR_ANOTHER:"leftForAnother",OUTSIDE_OF_ANY:"outsideOfAny"};function W(t,e,n){t.dispatchEvent(new CustomEvent(C,{detail:{indexObj:e,draggedEl:n}}))}function B(t,e,n){t.dispatchEvent(new CustomEvent(p,{detail:{draggedEl:e,type:P.LEFT_FOR_ANOTHER,theOtherDz:n}}))}function V(t,e){t.dispatchEvent(new CustomEvent(p,{detail:{draggedEl:e,type:P.OUTSIDE_OF_ANY}}))}function Z(t,e,n){t.dispatchEvent(new CustomEvent(L,{detail:{indexObj:e,draggedEl:n}}))}function j(t){window.dispatchEvent(new CustomEvent(Y,{detail:{draggedEl:t}}))}const lt={DRAG_STARTED:"dragStarted",DRAGGED_ENTERED:C,DRAGGED_ENTERED_ANOTHER:"dragEnteredAnother",DRAGGED_OVER_INDEX:L,DRAGGED_LEFT:p,DRAGGED_LEFT_ALL:"draggedLeftAll",DROPPED_INTO_ZONE:"droppedIntoZone",DROPPED_INTO_ANOTHER:"droppedIntoAnother",DROPPED_OUTSIDE_OF_ANY:"droppedOutsideOfAny",DRAG_STOPPED:"dragStopped"},ut={POINTER:"pointer",KEYBOARD:"keyboard"},Et="isDndShadowItem",X="data-is-dnd-shadow-item-internal",ht="data-is-dnd-shadow-item-hint",_t="id:dnd-shadow-placeholder-0000",Dt="dnd-action-dragged-el";let Ot="id",g=0;function mt(){g++}function gt(){if(g===0)throw new Error("Bug! trying to decrement when there are no dropzones");g--}const wt=typeof window>"u";function k(t){let e;const n=t.getBoundingClientRect(),i=getComputedStyle(t),c=i.transform;if(c){let s,o,r,f;if(c.startsWith("matrix3d("))e=c.slice(9,-1).split(/, /),s=+e[0],o=+e[5],r=+e[12],f=+e[13];else if(c.startsWith("matrix("))e=c.slice(7,-1).split(/, /),s=+e[0],o=+e[3],r=+e[4],f=+e[5];else return n;const d=i.transformOrigin,a=n.x-r-(1-s)*parseFloat(d),h=n.y-f-(1-o)*parseFloat(d.slice(d.indexOf(" ")+1)),l=s?n.width/s:t.offsetWidth,u=o?n.height/o:t.offsetHeight;return{x:a,y:h,width:l,height:u,top:h,right:a+l,bottom:h+u,left:a}}else return n}function M(t){const e=k(t);return{top:e.top+window.scrollY,bottom:e.bottom+window.scrollY,left:e.left+window.scrollX,right:e.right+window.scrollX}}function T(t){const e=t.getBoundingClientRect();return{top:e.top+window.scrollY,bottom:e.bottom+window.scrollY,left:e.left+window.scrollX,right:e.right+window.scrollX}}function $(t){return{x:(t.left+t.right)/2,y:(t.top+t.bottom)/2}}function q(t,e){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function N(t,e){return t.y<=e.bottom&&t.y>=e.top&&t.x>=e.left&&t.x<=e.right}function D(t){return $(T(t))}function I(t,e){const n=D(t),i=M(e);return N(n,i)}function z(t,e){const n=D(t),i=D(e);return q(n,i)}function K(t){const e=T(t);return e.right<0||e.left>document.documentElement.scrollWidth||e.bottom<0||e.top>document.documentElement.scrollHeight}function J(t,e){const n=T(e);return N(t,n)?{top:t.y-n.top,bottom:n.bottom-t.y,left:t.x-n.left,right:Math.min(n.right,document.documentElement.clientWidth)-t.x}:null}let E;function R(){E=new Map}R();function Q(t){E.delete(t)}function tt(t){const e=Array.from(t.children).findIndex(n=>n.getAttribute(X));if(e>=0)return E.has(t)||E.set(t,new Map),E.get(t).set(e,M(t.children[e])),e}function et(t,e){if(!I(t,e))return null;const n=e.children;if(n.length===0)return{index:0,isProximityBased:!0};const i=tt(e);for(let o=0;o<n.length;o++)if(I(t,n[o])){const r=E.has(e)&&E.get(e).get(o);return r&&!N(D(t),r)?{index:i,isProximityBased:!1}:{index:o,isProximityBased:!1}}let c=Number.MAX_VALUE,s;for(let o=0;o<n.length;o++){const r=z(t,n[o]);r<c&&(c=r,s=o)}return{index:s,isProximityBased:!0}}const _=25;function F(){let t;function e(){t={directionObj:void 0,stepPx:0}}e();function n(s){const{directionObj:o,stepPx:r}=t;o&&(s.scrollBy(o.x*r,o.y*r),window.requestAnimationFrame(()=>n(s)))}function i(s){return _-s}function c(s,o){if(!o)return!1;const r=J(s,o);if(r===null)return e(),!1;const f=!!t.directionObj;let[d,a]=[!1,!1];return o.scrollHeight>o.clientHeight&&(r.bottom<_?(d=!0,t.directionObj={x:0,y:1},t.stepPx=i(r.bottom)):r.top<_&&(d=!0,t.directionObj={x:0,y:-1},t.stepPx=i(r.top)),!f&&d)||o.scrollWidth>o.clientWidth&&(r.right<_?(a=!0,t.directionObj={x:1,y:0},t.stepPx=i(r.right)):r.left<_&&(a=!0,t.directionObj={x:-1,y:0},t.stepPx=i(r.left)),!f&&a)?(n(o),!0):(e(),!1)}return{scrollIfNeeded:c,resetScrolling:e}}function At(t){return JSON.stringify(t,null,2)}function y(t){if(!t)throw new Error("cannot get depth of a falsy node");return v(t,0)}function v(t,e=0){return t.parentElement?v(t.parentElement,e+1):e-1}function pt(t,e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(const n in t)if(!{}.hasOwnProperty.call(e,n)||e[n]!==t[n])return!1;return!0}function Tt(t,e){if(t.length!==e.length)return!1;for(let n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}const nt=200,S=10,{scrollIfNeeded:ot,resetScrolling:rt}=F();let w;function Nt(t,e,n=nt){let i,c,s=!1,o;const r=Array.from(e).sort((d,a)=>y(a)-y(d));function f(){const d=D(t),a=ot(d,i);if(!a&&o&&Math.abs(o.x-d.x)<S&&Math.abs(o.y-d.y)<S){w=window.setTimeout(f,n);return}if(K(t)){j(t);return}o=d;let h=!1;for(const l of r){a&&Q(i);const u=et(t,l);if(u===null)continue;const{index:x}=u;h=!0,l!==i?(i&&B(i,t,l),W(l,u,t),i=l):x!==c&&(Z(l,u,t),c=x);break}!h&&s&&i?(V(i,t),i=void 0,c=void 0,s=!1):s=!0,w=window.setTimeout(f,n)}f()}function Rt(){clearTimeout(w),rt(),R()}const it=300;let O;function m(t){const e=t.touches?t.touches[0]:t;O={x:e.clientX,y:e.clientY}}const{scrollIfNeeded:st,resetScrolling:ct}=F();let G;function b(){O&&st(O,document.documentElement)&&R(),G=window.setTimeout(b,it)}function xt(){window.addEventListener("mousemove",m),window.addEventListener("touchmove",m),b()}function It(){window.removeEventListener("mousemove",m),window.removeEventListener("touchmove",m),O=void 0,window.clearTimeout(G),ct()}const A=Object.freeze({USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT:"USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT"}),dt={[A.USE_COMPUTED_STYLE_INSTEAD_OF_BOUNDING_RECT]:!1};function yt(t){if(!A[t])throw new Error(`Can't get non existing feature flag ${t}! Supported flags: ${Object.keys(A)}`);return dt[t]}export{Dt as D,A as F,Ot as I,X as S,lt as T,Et as a,pt as b,Tt as c,gt as d,_t as e,$ as f,yt as g,ft as h,mt as i,ut as j,k,xt as l,C as m,p as n,L as o,Y as p,Nt as q,It as r,P as s,at as t,Rt as u,wt as v,ht as w,At as x};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
