const Ks="14.7.77",Rs=(s,t,e)=>({endTime:t,insertTime:e,type:"exponentialRampToValue",value:s}),Ps=(s,t,e)=>({endTime:t,insertTime:e,type:"linearRampToValue",value:s}),Qn=(s,t)=>({startTime:t,type:"setValue",value:s}),ti=(s,t,e)=>({duration:e,startTime:t,type:"setValueCurve",values:s}),ei=(s,t,{startTime:e,target:n,timeConstant:i})=>n+(t-n)*Math.exp((e-s)/i),Se=s=>s.type==="exponentialRampToValue",Tn=s=>s.type==="linearRampToValue",ee=s=>Se(s)||Tn(s),as=s=>s.type==="setValue",Gt=s=>s.type==="setValueCurve",wn=(s,t,e,n)=>{const i=s[t];return i===void 0?n:ee(i)||as(i)?i.value:Gt(i)?i.values[i.values.length-1]:ei(e,wn(s,t-1,i.startTime,n),i)},Vs=(s,t,e,n,i)=>e===void 0?[n.insertTime,i]:ee(e)?[e.endTime,e.value]:as(e)?[e.startTime,e.value]:Gt(e)?[e.startTime+e.duration,e.values[e.values.length-1]]:[e.startTime,wn(s,t-1,e.startTime,i)],Jn=s=>s.type==="cancelAndHold",Hn=s=>s.type==="cancelScheduledValues",te=s=>Jn(s)||Hn(s)?s.cancelTime:Se(s)||Tn(s)?s.endTime:s.startTime,Fs=(s,t,e,{endTime:n,value:i})=>e===i?i:0<e&&0<i||e<0&&i<0?e*(i/e)**((s-t)/(n-t)):0,Ls=(s,t,e,{endTime:n,value:i})=>e+(s-t)/(n-t)*(i-e),lr=(s,t)=>{const e=Math.floor(t),n=Math.ceil(t);return e===n?s[e]:(1-(t-e))*s[e]+(1-(n-t))*s[n]},hr=(s,{duration:t,startTime:e,values:n})=>{const i=(s-e)/t*(n.length-1);return lr(n,i)},pn=s=>s.type==="setTarget";class dr{constructor(t){this._automationEvents=[],this._currenTime=0,this._defaultValue=t}[Symbol.iterator](){return this._automationEvents[Symbol.iterator]()}add(t){const e=te(t);if(Jn(t)||Hn(t)){const n=this._automationEvents.findIndex(r=>Hn(t)&&Gt(r)?r.startTime+r.duration>=e:te(r)>=e),i=this._automationEvents[n];if(n!==-1&&(this._automationEvents=this._automationEvents.slice(0,n)),Jn(t)){const r=this._automationEvents[this._automationEvents.length-1];if(i!==void 0&&ee(i)){if(r!==void 0&&pn(r))throw new Error("The internal list is malformed.");const a=r===void 0?i.insertTime:Gt(r)?r.startTime+r.duration:te(r),o=r===void 0?this._defaultValue:Gt(r)?r.values[r.values.length-1]:r.value,c=Se(i)?Fs(e,a,o,i):Ls(e,a,o,i),u=Se(i)?Rs(c,e,this._currenTime):Ps(c,e,this._currenTime);this._automationEvents.push(u)}if(r!==void 0&&pn(r)&&this._automationEvents.push(Qn(this.getValue(e),e)),r!==void 0&&Gt(r)&&r.startTime+r.duration>e){const a=e-r.startTime,o=(r.values.length-1)/r.duration,c=Math.max(2,1+Math.ceil(a*o)),u=a/(c-1)*o,l=r.values.slice(0,c);if(u<1)for(let h=1;h<c;h+=1){const d=u*h%1;l[h]=r.values[h-1]*(1-d)+r.values[h]*d}this._automationEvents[this._automationEvents.length-1]=ti(l,r.startTime,a)}}}else{const n=this._automationEvents.findIndex(a=>te(a)>e),i=n===-1?this._automationEvents[this._automationEvents.length-1]:this._automationEvents[n-1];if(i!==void 0&&Gt(i)&&te(i)+i.duration>e)return!1;const r=Se(t)?Rs(t.value,t.endTime,this._currenTime):Tn(t)?Ps(t.value,e,this._currenTime):t;if(n===-1)this._automationEvents.push(r);else{if(Gt(t)&&e+t.duration>te(this._automationEvents[n]))return!1;this._automationEvents.splice(n,0,r)}}return!0}flush(t){const e=this._automationEvents.findIndex(n=>te(n)>t);if(e>1){const n=this._automationEvents.slice(e-1),i=n[0];pn(i)&&n.unshift(Qn(wn(this._automationEvents,e-2,i.startTime,this._defaultValue),i.startTime)),this._automationEvents=n}}getValue(t){if(this._automationEvents.length===0)return this._defaultValue;const e=this._automationEvents.findIndex(a=>te(a)>t),n=this._automationEvents[e],i=(e===-1?this._automationEvents.length:e)-1,r=this._automationEvents[i];if(r!==void 0&&pn(r)&&(n===void 0||!ee(n)||n.insertTime>t))return ei(t,wn(this._automationEvents,i-1,r.startTime,this._defaultValue),r);if(r!==void 0&&as(r)&&(n===void 0||!ee(n)))return r.value;if(r!==void 0&&Gt(r)&&(n===void 0||!ee(n)||r.startTime+r.duration>t))return t<r.startTime+r.duration?hr(t,r):r.values[r.values.length-1];if(r!==void 0&&ee(r)&&(n===void 0||!ee(n)))return r.value;if(n!==void 0&&Se(n)){const[a,o]=Vs(this._automationEvents,i,r,n,this._defaultValue);return Fs(t,a,o,n)}if(n!==void 0&&Tn(n)){const[a,o]=Vs(this._automationEvents,i,r,n,this._defaultValue);return Ls(t,a,o,n)}return this._defaultValue}}const pr=s=>({cancelTime:s,type:"cancelAndHold"}),fr=s=>({cancelTime:s,type:"cancelScheduledValues"}),mr=(s,t)=>({endTime:t,type:"exponentialRampToValue",value:s}),_r=(s,t)=>({endTime:t,type:"linearRampToValue",value:s}),gr=(s,t,e)=>({startTime:t,target:s,timeConstant:e,type:"setTarget"}),yr=()=>new DOMException("","AbortError"),vr=s=>(t,e,[n,i,r],a)=>{s(t[i],[e,n,r],o=>o[0]===e&&o[1]===n,a)},Tr=s=>(t,e,n)=>{const i=[];for(let r=0;r<n.numberOfInputs;r+=1)i.push(new Set);s.set(t,{activeInputs:i,outputs:new Set,passiveInputs:new WeakMap,renderer:e})},wr=s=>(t,e)=>{s.set(t,{activeInputs:new Set,passiveInputs:new WeakMap,renderer:e})},ke=new WeakSet,ni=new WeakMap,cs=new WeakMap,si=new WeakMap,us=new WeakMap,Ln=new WeakMap,ii=new WeakMap,Kn=new WeakMap,ts=new WeakMap,es=new WeakMap,ri={construct(){return ri}},br=s=>{try{const t=new Proxy(s,ri);new t}catch{return!1}return!0},qs=/^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/,Ws=(s,t)=>{const e=[];let n=s.replace(/^[\s]+/,""),i=n.match(qs);for(;i!==null;){const r=i[1].slice(1,-1),a=i[0].replace(/([\s]+)?;?$/,"").replace(r,new URL(r,t).toString());e.push(a),n=n.slice(i[0].length).replace(/^[\s]+/,""),i=n.match(qs)}return[e.join(";"),n]},Bs=s=>{if(s!==void 0&&!Array.isArray(s))throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.")},js=s=>{if(!br(s))throw new TypeError("The given value for processorCtor should be a constructor.");if(s.prototype===null||typeof s.prototype!="object")throw new TypeError("The given value for processorCtor should have a prototype.")},Cr=(s,t,e,n,i,r,a,o,c,u,l,h,d)=>{let f=0;return(p,m,_={credentials:"omit"})=>{const y=l.get(p);if(y!==void 0&&y.has(m))return Promise.resolve();const b=u.get(p);if(b!==void 0){const g=b.get(m);if(g!==void 0)return g}const C=r(p),x=C.audioWorklet===void 0?i(m).then(([g,T])=>{const[w,v]=Ws(g,T),O=`${w};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${v}
})})(window,'_AWGS')`;return e(O)}).then(()=>{const g=d._AWGS.pop();if(g===void 0)throw new SyntaxError;n(C.currentTime,C.sampleRate,()=>g(class{},void 0,(T,w)=>{if(T.trim()==="")throw t();const v=ts.get(C);if(v!==void 0){if(v.has(T))throw t();js(w),Bs(w.parameterDescriptors),v.set(T,w)}else js(w),Bs(w.parameterDescriptors),ts.set(C,new Map([[T,w]]))},C.sampleRate,void 0,void 0))}):Promise.all([i(m),Promise.resolve(s(h,h))]).then(([[g,T],w])=>{const v=f+1;f=v;const[O,k]=Ws(g,T),E=`${O};((AudioWorkletProcessor,registerProcessor)=>{${k}
})(${w?"AudioWorkletProcessor":"class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}"},(n,p)=>registerProcessor(n,class extends p{${w?"":"__c = (a) => a.forEach(e=>this.__b.add(e.buffer));"}process(i,o,p){${w?"":"i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));"}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${v}',class extends AudioWorkletProcessor{process(){return !1}})`,F=new Blob([E],{type:"application/javascript; charset=utf-8"}),R=URL.createObjectURL(F);return C.audioWorklet.addModule(R,_).then(()=>{if(o(C))return C;const P=a(C);return P.audioWorklet.addModule(R,_).then(()=>P)}).then(P=>{if(c===null)throw new SyntaxError;try{new c(P,`__sac${v}`)}catch{throw new SyntaxError}}).finally(()=>URL.revokeObjectURL(R))});return b===void 0?u.set(p,new Map([[m,x]])):b.set(m,x),x.then(()=>{const g=l.get(p);g===void 0?l.set(p,new Set([m])):g.add(m)}).finally(()=>{const g=u.get(p);g!==void 0&&g.delete(m)}),x}},Pt=(s,t)=>{const e=s.get(t);if(e===void 0)throw new Error("A value with the given key could not be found.");return e},qn=(s,t)=>{const e=Array.from(s).filter(t);if(e.length>1)throw Error("More than one element was found.");if(e.length===0)throw Error("No element was found.");const[n]=e;return s.delete(n),n},oi=(s,t,e,n)=>{const i=Pt(s,t),r=qn(i,a=>a[0]===e&&a[1]===n);return i.size===0&&s.delete(t),r},nn=s=>Pt(ii,s),Ne=s=>{if(ke.has(s))throw new Error("The AudioNode is already stored.");ke.add(s),nn(s).forEach(t=>t(!0))},ai=s=>"port"in s,sn=s=>{if(!ke.has(s))throw new Error("The AudioNode is not stored.");ke.delete(s),nn(s).forEach(t=>t(!1))},ns=(s,t)=>{!ai(s)&&t.every(e=>e.size===0)&&sn(s)},Sr=(s,t,e,n,i,r,a,o,c,u,l,h,d)=>{const f=new WeakMap;return(p,m,_,y,b)=>{const{activeInputs:C,passiveInputs:x}=r(m),{outputs:g}=r(p),T=o(p),w=v=>{const O=c(m),k=c(p);if(v){const A=oi(x,p,_,y);s(C,p,A,!1),!b&&!h(p)&&e(k,O,_,y),d(m)&&Ne(m)}else{const A=n(C,p,_,y);t(x,y,A,!1),!b&&!h(p)&&i(k,O,_,y);const S=a(m);if(S===0)l(m)&&ns(m,C);else{const D=f.get(m);D!==void 0&&clearTimeout(D),f.set(m,setTimeout(()=>{l(m)&&ns(m,C)},S*1e3))}}};return u(g,[m,_,y],v=>v[0]===m&&v[1]===_&&v[2]===y,!0)?(T.add(w),l(p)?s(C,p,[_,y,w],!0):t(x,y,[p,_,w],!0),!0):!1}},xr=s=>(t,e,[n,i,r],a)=>{const o=t.get(n);o===void 0?t.set(n,new Set([[i,e,r]])):s(o,[i,e,r],c=>c[0]===i&&c[1]===e,a)},Ar=s=>(t,e)=>{const n=s(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});e.connect(n).connect(t.destination);const i=()=>{e.removeEventListener("ended",i),e.disconnect(n),n.disconnect()};e.addEventListener("ended",i)},kr=s=>(t,e)=>{s(t).add(e)},Nr={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",fftSize:2048,maxDecibels:-30,minDecibels:-100,smoothingTimeConstant:.8},Or=(s,t,e,n,i,r)=>class extends s{constructor(o,c){const u=i(o),l={...Nr,...c},h=n(u,l),d=r(u)?t():null;super(o,!1,h,d),this._nativeAnalyserNode=h}get fftSize(){return this._nativeAnalyserNode.fftSize}set fftSize(o){this._nativeAnalyserNode.fftSize=o}get frequencyBinCount(){return this._nativeAnalyserNode.frequencyBinCount}get maxDecibels(){return this._nativeAnalyserNode.maxDecibels}set maxDecibels(o){const c=this._nativeAnalyserNode.maxDecibels;if(this._nativeAnalyserNode.maxDecibels=o,!(o>this._nativeAnalyserNode.minDecibels))throw this._nativeAnalyserNode.maxDecibels=c,e()}get minDecibels(){return this._nativeAnalyserNode.minDecibels}set minDecibels(o){const c=this._nativeAnalyserNode.minDecibels;if(this._nativeAnalyserNode.minDecibels=o,!(this._nativeAnalyserNode.maxDecibels>o))throw this._nativeAnalyserNode.minDecibels=c,e()}get smoothingTimeConstant(){return this._nativeAnalyserNode.smoothingTimeConstant}set smoothingTimeConstant(o){this._nativeAnalyserNode.smoothingTimeConstant=o}getByteFrequencyData(o){this._nativeAnalyserNode.getByteFrequencyData(o)}getByteTimeDomainData(o){this._nativeAnalyserNode.getByteTimeDomainData(o)}getFloatFrequencyData(o){this._nativeAnalyserNode.getFloatFrequencyData(o)}getFloatTimeDomainData(o){this._nativeAnalyserNode.getFloatTimeDomainData(o)}},gt=(s,t)=>s.context===t,Mr=(s,t,e)=>()=>{const n=new WeakMap,i=async(r,a)=>{let o=t(r);if(!gt(o,a)){const u={channelCount:o.channelCount,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,fftSize:o.fftSize,maxDecibels:o.maxDecibels,minDecibels:o.minDecibels,smoothingTimeConstant:o.smoothingTimeConstant};o=s(a,u)}return n.set(a,o),await e(r,a,o),o};return{render(r,a){const o=n.get(a);return o!==void 0?Promise.resolve(o):i(r,a)}}},bn=s=>{try{s.copyToChannel(new Float32Array(1),0,-1)}catch{return!1}return!0},Bt=()=>new DOMException("","IndexSizeError"),ls=s=>{s.getChannelData=(t=>e=>{try{return t.call(s,e)}catch(n){throw n.code===12?Bt():n}})(s.getChannelData)},Ir={numberOfChannels:1},Er=(s,t,e,n,i,r,a,o)=>{let c=null;return class ci{constructor(l){if(i===null)throw new Error("Missing the native OfflineAudioContext constructor.");const{length:h,numberOfChannels:d,sampleRate:f}={...Ir,...l};c===null&&(c=new i(1,1,44100));const p=n!==null&&t(r,r)?new n({length:h,numberOfChannels:d,sampleRate:f}):c.createBuffer(d,h,f);if(p.numberOfChannels===0)throw e();return typeof p.copyFromChannel!="function"?(a(p),ls(p)):t(bn,()=>bn(p))||o(p),s.add(p),p}static[Symbol.hasInstance](l){return l!==null&&typeof l=="object"&&Object.getPrototypeOf(l)===ci.prototype||s.has(l)}}},bt=-34028234663852886e22,vt=-bt,Zt=s=>ke.has(s),Dr={buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1},Rr=(s,t,e,n,i,r,a,o)=>class extends s{constructor(u,l){const h=r(u),d={...Dr,...l},f=i(h,d),p=a(h),m=p?t():null;super(u,!1,f,m),this._audioBufferSourceNodeRenderer=m,this._isBufferNullified=!1,this._isBufferSet=d.buffer!==null,this._nativeAudioBufferSourceNode=f,this._onended=null,this._playbackRate=e(this,p,f.playbackRate,vt,bt)}get buffer(){return this._isBufferNullified?null:this._nativeAudioBufferSourceNode.buffer}set buffer(u){if(this._nativeAudioBufferSourceNode.buffer=u,u!==null){if(this._isBufferSet)throw n();this._isBufferSet=!0}}get loop(){return this._nativeAudioBufferSourceNode.loop}set loop(u){this._nativeAudioBufferSourceNode.loop=u}get loopEnd(){return this._nativeAudioBufferSourceNode.loopEnd}set loopEnd(u){this._nativeAudioBufferSourceNode.loopEnd=u}get loopStart(){return this._nativeAudioBufferSourceNode.loopStart}set loopStart(u){this._nativeAudioBufferSourceNode.loopStart=u}get onended(){return this._onended}set onended(u){const l=typeof u=="function"?o(this,u):null;this._nativeAudioBufferSourceNode.onended=l;const h=this._nativeAudioBufferSourceNode.onended;this._onended=h!==null&&h===l?u:h}get playbackRate(){return this._playbackRate}start(u=0,l=0,h){if(this._nativeAudioBufferSourceNode.start(u,l,h),this._audioBufferSourceNodeRenderer!==null&&(this._audioBufferSourceNodeRenderer.start=h===void 0?[u,l]:[u,l,h]),this.context.state!=="closed"){Ne(this);const d=()=>{this._nativeAudioBufferSourceNode.removeEventListener("ended",d),Zt(this)&&sn(this)};this._nativeAudioBufferSourceNode.addEventListener("ended",d)}}stop(u=0){this._nativeAudioBufferSourceNode.stop(u),this._audioBufferSourceNodeRenderer!==null&&(this._audioBufferSourceNodeRenderer.stop=u)}},Pr=(s,t,e,n,i)=>()=>{const r=new WeakMap;let a=null,o=null;const c=async(u,l)=>{let h=e(u);const d=gt(h,l);if(!d){const f={buffer:h.buffer,channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,loop:h.loop,loopEnd:h.loopEnd,loopStart:h.loopStart,playbackRate:h.playbackRate.value};h=t(l,f),a!==null&&h.start(...a),o!==null&&h.stop(o)}return r.set(l,h),d?await s(l,u.playbackRate,h.playbackRate):await n(l,u.playbackRate,h.playbackRate),await i(u,l,h),h};return{set start(u){a=u},set stop(u){o=u},render(u,l){const h=r.get(l);return h!==void 0?Promise.resolve(h):c(u,l)}}},Vr=s=>"playbackRate"in s,Fr=s=>"frequency"in s&&"gain"in s,Lr=s=>"offset"in s,qr=s=>!("frequency"in s)&&"gain"in s,Wr=s=>"detune"in s&&"frequency"in s,Br=s=>"pan"in s,Tt=s=>Pt(ni,s),rn=s=>Pt(si,s),ss=(s,t)=>{const{activeInputs:e}=Tt(s);e.forEach(i=>i.forEach(([r])=>{t.includes(s)||ss(r,[...t,s])}));const n=Vr(s)?[s.playbackRate]:ai(s)?Array.from(s.parameters.values()):Fr(s)?[s.Q,s.detune,s.frequency,s.gain]:Lr(s)?[s.offset]:qr(s)?[s.gain]:Wr(s)?[s.detune,s.frequency]:Br(s)?[s.pan]:[];for(const i of n){const r=rn(i);r!==void 0&&r.activeInputs.forEach(([a])=>ss(a,t))}Zt(s)&&sn(s)},ui=s=>{ss(s.destination,[])},jr=s=>s===void 0||typeof s=="number"||typeof s=="string"&&(s==="balanced"||s==="interactive"||s==="playback"),Ur=(s,t,e,n,i,r,a,o,c)=>class extends s{constructor(l={}){if(c===null)throw new Error("Missing the native AudioContext constructor.");let h;try{h=new c(l)}catch(p){throw p.code===12&&p.message==="sampleRate is not in range"?e():p}if(h===null)throw n();if(!jr(l.latencyHint))throw new TypeError(`The provided value '${l.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(l.sampleRate!==void 0&&h.sampleRate!==l.sampleRate)throw e();super(h,2);const{latencyHint:d}=l,{sampleRate:f}=h;if(this._baseLatency=typeof h.baseLatency=="number"?h.baseLatency:d==="balanced"?512/f:d==="interactive"||d===void 0?256/f:d==="playback"?1024/f:Math.max(2,Math.min(128,Math.round(d*f/128)))*128/f,this._nativeAudioContext=h,c.name==="webkitAudioContext"?(this._nativeGainNode=h.createGain(),this._nativeOscillatorNode=h.createOscillator(),this._nativeGainNode.gain.value=1e-37,this._nativeOscillatorNode.connect(this._nativeGainNode).connect(h.destination),this._nativeOscillatorNode.start()):(this._nativeGainNode=null,this._nativeOscillatorNode=null),this._state=null,h.state==="running"){this._state="suspended";const p=()=>{this._state==="suspended"&&(this._state=null),h.removeEventListener("statechange",p)};h.addEventListener("statechange",p)}}get baseLatency(){return this._baseLatency}get state(){return this._state!==null?this._state:this._nativeAudioContext.state}close(){return this.state==="closed"?this._nativeAudioContext.close().then(()=>{throw t()}):(this._state==="suspended"&&(this._state=null),this._nativeAudioContext.close().then(()=>{this._nativeGainNode!==null&&this._nativeOscillatorNode!==null&&(this._nativeOscillatorNode.stop(),this._nativeGainNode.disconnect(),this._nativeOscillatorNode.disconnect()),ui(this)}))}createMediaElementSource(l){return new i(this,{mediaElement:l})}createMediaStreamDestination(){return new r(this)}createMediaStreamSource(l){return new a(this,{mediaStream:l})}createMediaStreamTrackSource(l){return new o(this,{mediaStreamTrack:l})}resume(){return this._state==="suspended"?new Promise((l,h)=>{const d=()=>{this._nativeAudioContext.removeEventListener("statechange",d),this._nativeAudioContext.state==="running"?l():this.resume().then(l,h)};this._nativeAudioContext.addEventListener("statechange",d)}):this._nativeAudioContext.resume().catch(l=>{throw l===void 0||l.code===15?t():l})}suspend(){return this._nativeAudioContext.suspend().catch(l=>{throw l===void 0?t():l})}},zr=(s,t,e,n,i,r,a,o)=>class extends s{constructor(u,l){const h=r(u),d=a(h),f=i(h,l,d),p=d?t(o):null;super(u,!1,f,p),this._isNodeOfNativeOfflineAudioContext=d,this._nativeAudioDestinationNode=f}get channelCount(){return this._nativeAudioDestinationNode.channelCount}set channelCount(u){if(this._isNodeOfNativeOfflineAudioContext)throw n();if(u>this._nativeAudioDestinationNode.maxChannelCount)throw e();this._nativeAudioDestinationNode.channelCount=u}get channelCountMode(){return this._nativeAudioDestinationNode.channelCountMode}set channelCountMode(u){if(this._isNodeOfNativeOfflineAudioContext)throw n();this._nativeAudioDestinationNode.channelCountMode=u}get maxChannelCount(){return this._nativeAudioDestinationNode.maxChannelCount}},Gr=s=>{const t=new WeakMap,e=async(n,i)=>{const r=i.destination;return t.set(i,r),await s(n,i,r),r};return{render(n,i){const r=t.get(i);return r!==void 0?Promise.resolve(r):e(n,i)}}},$r=(s,t,e,n,i,r,a,o)=>(c,u)=>{const l=u.listener,h=()=>{const g=new Float32Array(1),T=t(u,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:9}),w=a(u);let v=!1,O=[0,0,-1,0,1,0],k=[0,0,0];const A=()=>{if(v)return;v=!0;const F=n(u,256,9,0);F.onaudioprocess=({inputBuffer:R})=>{const P=[r(R,g,0),r(R,g,1),r(R,g,2),r(R,g,3),r(R,g,4),r(R,g,5)];P.some((L,j)=>L!==O[j])&&(l.setOrientation(...P),O=P);const z=[r(R,g,6),r(R,g,7),r(R,g,8)];z.some((L,j)=>L!==k[j])&&(l.setPosition(...z),k=z)},T.connect(F)},S=F=>R=>{R!==O[F]&&(O[F]=R,l.setOrientation(...O))},D=F=>R=>{R!==k[F]&&(k[F]=R,l.setPosition(...k))},E=(F,R,P)=>{const z=e(u,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:R});z.connect(T,0,F),z.start(),Object.defineProperty(z.offset,"defaultValue",{get(){return R}});const L=s({context:c},w,z.offset,vt,bt);return o(L,"value",j=>()=>j.call(L),j=>W=>{try{j.call(L,W)}catch(X){if(X.code!==9)throw X}A(),w&&P(W)}),L.cancelAndHoldAtTime=(j=>w?()=>{throw i()}:(...W)=>{const X=j.apply(L,W);return A(),X})(L.cancelAndHoldAtTime),L.cancelScheduledValues=(j=>w?()=>{throw i()}:(...W)=>{const X=j.apply(L,W);return A(),X})(L.cancelScheduledValues),L.exponentialRampToValueAtTime=(j=>w?()=>{throw i()}:(...W)=>{const X=j.apply(L,W);return A(),X})(L.exponentialRampToValueAtTime),L.linearRampToValueAtTime=(j=>w?()=>{throw i()}:(...W)=>{const X=j.apply(L,W);return A(),X})(L.linearRampToValueAtTime),L.setTargetAtTime=(j=>w?()=>{throw i()}:(...W)=>{const X=j.apply(L,W);return A(),X})(L.setTargetAtTime),L.setValueAtTime=(j=>w?()=>{throw i()}:(...W)=>{const X=j.apply(L,W);return A(),X})(L.setValueAtTime),L.setValueCurveAtTime=(j=>w?()=>{throw i()}:(...W)=>{const X=j.apply(L,W);return A(),X})(L.setValueCurveAtTime),L};return{forwardX:E(0,0,S(0)),forwardY:E(1,0,S(1)),forwardZ:E(2,-1,S(2)),positionX:E(6,0,D(0)),positionY:E(7,0,D(1)),positionZ:E(8,0,D(2)),upX:E(3,0,S(3)),upY:E(4,1,S(4)),upZ:E(5,0,S(5))}},{forwardX:d,forwardY:f,forwardZ:p,positionX:m,positionY:_,positionZ:y,upX:b,upY:C,upZ:x}=l.forwardX===void 0?h():l;return{get forwardX(){return d},get forwardY(){return f},get forwardZ(){return p},get positionX(){return m},get positionY(){return _},get positionZ(){return y},get upX(){return b},get upY(){return C},get upZ(){return x}}},Cn=s=>"context"in s,on=s=>Cn(s[0]),ye=(s,t,e,n)=>{for(const i of s)if(e(i)){if(n)return!1;throw Error("The set contains at least one similar element.")}return s.add(t),!0},Us=(s,t,[e,n],i)=>{ye(s,[t,e,n],r=>r[0]===t&&r[1]===e,i)},zs=(s,[t,e,n],i)=>{const r=s.get(t);r===void 0?s.set(t,new Set([[e,n]])):ye(r,[e,n],a=>a[0]===e,i)},Ie=s=>"inputs"in s,Sn=(s,t,e,n)=>{if(Ie(t)){const i=t.inputs[n];return s.connect(i,e,0),[i,e,0]}return s.connect(t,e,n),[t,e,n]},li=(s,t,e)=>{for(const n of s)if(n[0]===t&&n[1]===e)return s.delete(n),n;return null},Zr=(s,t,e)=>qn(s,n=>n[0]===t&&n[1]===e),hi=(s,t)=>{if(!nn(s).delete(t))throw new Error("Missing the expected event listener.")},di=(s,t,e)=>{const n=Pt(s,t),i=qn(n,r=>r[0]===e);return n.size===0&&s.delete(t),i},xn=(s,t,e,n)=>{Ie(t)?s.disconnect(t.inputs[n],e,0):s.disconnect(t,e,n)},K=s=>Pt(cs,s),We=s=>Pt(us,s),he=s=>Kn.has(s),gn=s=>!ke.has(s),Gs=(s,t)=>new Promise(e=>{if(t!==null)e(!0);else{const n=s.createScriptProcessor(256,1,1),i=s.createGain(),r=s.createBuffer(1,2,44100),a=r.getChannelData(0);a[0]=1,a[1]=1;const o=s.createBufferSource();o.buffer=r,o.loop=!0,o.connect(n).connect(s.destination),o.connect(i),o.disconnect(i),n.onaudioprocess=c=>{const u=c.inputBuffer.getChannelData(0);Array.prototype.some.call(u,l=>l===1)?e(!0):e(!1),o.stop(),n.onaudioprocess=null,o.disconnect(n),n.disconnect(s.destination)},o.start()}}),Yn=(s,t)=>{const e=new Map;for(const n of s)for(const i of n){const r=e.get(i);e.set(i,r===void 0?1:r+1)}e.forEach((n,i)=>t(i,n))},An=s=>"context"in s,Xr=s=>{const t=new Map;s.connect=(e=>(n,i=0,r=0)=>{const a=An(n)?e(n,i,r):e(n,i),o=t.get(n);return o===void 0?t.set(n,[{input:r,output:i}]):o.every(c=>c.input!==r||c.output!==i)&&o.push({input:r,output:i}),a})(s.connect.bind(s)),s.disconnect=(e=>(n,i,r)=>{if(e.apply(s),n===void 0)t.clear();else if(typeof n=="number")for(const[a,o]of t){const c=o.filter(u=>u.output!==n);c.length===0?t.delete(a):t.set(a,c)}else if(t.has(n))if(i===void 0)t.delete(n);else{const a=t.get(n);if(a!==void 0){const o=a.filter(c=>c.output!==i&&(c.input!==r||r===void 0));o.length===0?t.delete(n):t.set(n,o)}}for(const[a,o]of t)o.forEach(c=>{An(a)?s.connect(a,c.output,c.input):s.connect(a,c.output)})})(s.disconnect)},Yr=(s,t,e,n)=>{const{activeInputs:i,passiveInputs:r}=rn(t),{outputs:a}=Tt(s),o=nn(s),c=u=>{const l=K(s),h=We(t);if(u){const d=di(r,s,e);Us(i,s,d,!1),!n&&!he(s)&&l.connect(h,e)}else{const d=Zr(i,s,e);zs(r,d,!1),!n&&!he(s)&&l.disconnect(h,e)}};return ye(a,[t,e],u=>u[0]===t&&u[1]===e,!0)?(o.add(c),Zt(s)?Us(i,s,[e,c],!0):zs(r,[s,e,c],!0),!0):!1},Qr=(s,t,e,n)=>{const{activeInputs:i,passiveInputs:r}=Tt(t),a=li(i[n],s,e);return a===null?[oi(r,s,e,n)[2],!1]:[a[2],!0]},Jr=(s,t,e)=>{const{activeInputs:n,passiveInputs:i}=rn(t),r=li(n,s,e);return r===null?[di(i,s,e)[1],!1]:[r[2],!0]},hs=(s,t,e,n,i)=>{const[r,a]=Qr(s,e,n,i);if(r!==null&&(hi(s,r),a&&!t&&!he(s)&&xn(K(s),K(e),n,i)),Zt(e)){const{activeInputs:o}=Tt(e);ns(e,o)}},ds=(s,t,e,n)=>{const[i,r]=Jr(s,e,n);i!==null&&(hi(s,i),r&&!t&&!he(s)&&K(s).disconnect(We(e),n))},Hr=(s,t)=>{const e=Tt(s),n=[];for(const i of e.outputs)on(i)?hs(s,t,...i):ds(s,t,...i),n.push(i[0]);return e.outputs.clear(),n},Kr=(s,t,e)=>{const n=Tt(s),i=[];for(const r of n.outputs)r[1]===e&&(on(r)?hs(s,t,...r):ds(s,t,...r),i.push(r[0]),n.outputs.delete(r));return i},to=(s,t,e,n,i)=>{const r=Tt(s);return Array.from(r.outputs).filter(a=>a[0]===e&&(n===void 0||a[1]===n)&&(i===void 0||a[2]===i)).map(a=>(on(a)?hs(s,t,...a):ds(s,t,...a),r.outputs.delete(a),a[0]))},eo=(s,t,e,n,i,r,a,o,c,u,l,h,d,f,p,m)=>class extends u{constructor(y,b,C,x){super(C),this._context=y,this._nativeAudioNode=C;const g=l(y);h(g)&&e(Gs,()=>Gs(g,m))!==!0&&Xr(C),cs.set(this,C),ii.set(this,new Set),y.state!=="closed"&&b&&Ne(this),s(this,x,C)}get channelCount(){return this._nativeAudioNode.channelCount}set channelCount(y){this._nativeAudioNode.channelCount=y}get channelCountMode(){return this._nativeAudioNode.channelCountMode}set channelCountMode(y){this._nativeAudioNode.channelCountMode=y}get channelInterpretation(){return this._nativeAudioNode.channelInterpretation}set channelInterpretation(y){this._nativeAudioNode.channelInterpretation=y}get context(){return this._context}get numberOfInputs(){return this._nativeAudioNode.numberOfInputs}get numberOfOutputs(){return this._nativeAudioNode.numberOfOutputs}connect(y,b=0,C=0){if(b<0||b>=this._nativeAudioNode.numberOfOutputs)throw i();const x=l(this._context),g=p(x);if(d(y)||f(y))throw r();if(Cn(y)){const v=K(y);try{const k=Sn(this._nativeAudioNode,v,b,C),A=gn(this);(g||A)&&this._nativeAudioNode.disconnect(...k),this.context.state!=="closed"&&!A&&gn(y)&&Ne(y)}catch(k){throw k.code===12?r():k}if(t(this,y,b,C,g)){const k=c([this],y);Yn(k,n(g))}return y}const T=We(y);if(T.name==="playbackRate"&&T.maxValue===1024)throw a();try{this._nativeAudioNode.connect(T,b),(g||gn(this))&&this._nativeAudioNode.disconnect(T,b)}catch(v){throw v.code===12?r():v}if(Yr(this,y,b,g)){const v=c([this],y);Yn(v,n(g))}}disconnect(y,b,C){let x;const g=l(this._context),T=p(g);if(y===void 0)x=Hr(this,T);else if(typeof y=="number"){if(y<0||y>=this.numberOfOutputs)throw i();x=Kr(this,T,y)}else{if(b!==void 0&&(b<0||b>=this.numberOfOutputs)||Cn(y)&&C!==void 0&&(C<0||C>=y.numberOfInputs))throw i();if(x=to(this,T,y,b,C),x.length===0)throw r()}for(const w of x){const v=c([this],w);Yn(v,o)}}},no=(s,t,e,n,i,r,a,o,c,u,l,h,d)=>(f,p,m,_=null,y=null)=>{const b=m.value,C=new dr(b),x=p?n(C):null,g={get defaultValue(){return b},get maxValue(){return _===null?m.maxValue:_},get minValue(){return y===null?m.minValue:y},get value(){return m.value},set value(T){m.value=T,g.setValueAtTime(T,f.context.currentTime)},cancelAndHoldAtTime(T){if(typeof m.cancelAndHoldAtTime=="function")x===null&&C.flush(f.context.currentTime),C.add(i(T)),m.cancelAndHoldAtTime(T);else{const w=Array.from(C).pop();x===null&&C.flush(f.context.currentTime),C.add(i(T));const v=Array.from(C).pop();m.cancelScheduledValues(T),w!==v&&v!==void 0&&(v.type==="exponentialRampToValue"?m.exponentialRampToValueAtTime(v.value,v.endTime):v.type==="linearRampToValue"?m.linearRampToValueAtTime(v.value,v.endTime):v.type==="setValue"?m.setValueAtTime(v.value,v.startTime):v.type==="setValueCurve"&&m.setValueCurveAtTime(v.values,v.startTime,v.duration))}return g},cancelScheduledValues(T){return x===null&&C.flush(f.context.currentTime),C.add(r(T)),m.cancelScheduledValues(T),g},exponentialRampToValueAtTime(T,w){if(T===0)throw new RangeError;if(!Number.isFinite(w)||w<0)throw new RangeError;const v=f.context.currentTime;return x===null&&C.flush(v),Array.from(C).length===0&&(C.add(u(b,v)),m.setValueAtTime(b,v)),C.add(a(T,w)),m.exponentialRampToValueAtTime(T,w),g},linearRampToValueAtTime(T,w){const v=f.context.currentTime;return x===null&&C.flush(v),Array.from(C).length===0&&(C.add(u(b,v)),m.setValueAtTime(b,v)),C.add(o(T,w)),m.linearRampToValueAtTime(T,w),g},setTargetAtTime(T,w,v){return x===null&&C.flush(f.context.currentTime),C.add(c(T,w,v)),m.setTargetAtTime(T,w,v),g},setValueAtTime(T,w){return x===null&&C.flush(f.context.currentTime),C.add(u(T,w)),m.setValueAtTime(T,w),g},setValueCurveAtTime(T,w,v){const O=T instanceof Float32Array?T:new Float32Array(T);if(h!==null&&h.name==="webkitAudioContext"){const k=w+v,A=f.context.sampleRate,S=Math.ceil(w*A),D=Math.floor(k*A),E=D-S,F=new Float32Array(E);for(let P=0;P<E;P+=1){const z=(O.length-1)/v*((S+P)/A-w),L=Math.floor(z),j=Math.ceil(z);F[P]=L===j?O[L]:(1-(z-L))*O[L]+(1-(j-z))*O[j]}x===null&&C.flush(f.context.currentTime),C.add(l(F,w,v)),m.setValueCurveAtTime(F,w,v);const R=D/A;R<k&&d(g,F[F.length-1],R),d(g,O[O.length-1],k)}else x===null&&C.flush(f.context.currentTime),C.add(l(O,w,v)),m.setValueCurveAtTime(O,w,v);return g}};return e.set(g,m),t.set(g,f),s(g,x),g},so=s=>({replay(t){for(const e of s)if(e.type==="exponentialRampToValue"){const{endTime:n,value:i}=e;t.exponentialRampToValueAtTime(i,n)}else if(e.type==="linearRampToValue"){const{endTime:n,value:i}=e;t.linearRampToValueAtTime(i,n)}else if(e.type==="setTarget"){const{startTime:n,target:i,timeConstant:r}=e;t.setTargetAtTime(i,n,r)}else if(e.type==="setValue"){const{startTime:n,value:i}=e;t.setValueAtTime(i,n)}else if(e.type==="setValueCurve"){const{duration:n,startTime:i,values:r}=e;t.setValueCurveAtTime(r,i,n)}else throw new Error("Can't apply an unknown automation.")}});class pi{constructor(t){this._map=new Map(t)}get size(){return this._map.size}entries(){return this._map.entries()}forEach(t,e=null){return this._map.forEach((n,i)=>t.call(e,n,i,this))}get(t){return this._map.get(t)}has(t){return this._map.has(t)}keys(){return this._map.keys()}values(){return this._map.values()}}const io={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,parameterData:{},processorOptions:{}},ro=(s,t,e,n,i,r,a,o,c,u,l,h,d,f)=>class extends t{constructor(m,_,y){var b;const C=o(m),x=c(C),g=l({...io,...y});d(g);const T=ts.get(C),w=T==null?void 0:T.get(_),v=x||C.state!=="closed"?C:(b=a(C))!==null&&b!==void 0?b:C,O=i(v,x?null:m.baseLatency,u,_,w,g),k=x?n(_,g,w):null;super(m,!0,O,k);const A=[];O.parameters.forEach((D,E)=>{const F=e(this,x,D);A.push([E,F])}),this._nativeAudioWorkletNode=O,this._onprocessorerror=null,this._parameters=new pi(A),x&&s(C,this);const{activeInputs:S}=r(this);h(O,S)}get onprocessorerror(){return this._onprocessorerror}set onprocessorerror(m){const _=typeof m=="function"?f(this,m):null;this._nativeAudioWorkletNode.onprocessorerror=_;const y=this._nativeAudioWorkletNode.onprocessorerror;this._onprocessorerror=y!==null&&y===_?m:y}get parameters(){return this._parameters===null?this._nativeAudioWorkletNode.parameters:this._parameters}get port(){return this._nativeAudioWorkletNode.port}};function kn(s,t,e,n,i){if(typeof s.copyFromChannel=="function")t[e].byteLength===0&&(t[e]=new Float32Array(128)),s.copyFromChannel(t[e],n,i);else{const r=s.getChannelData(n);if(t[e].byteLength===0)t[e]=r.slice(i,i+128);else{const a=new Float32Array(r.buffer,i*Float32Array.BYTES_PER_ELEMENT,128);t[e].set(a)}}}const fi=(s,t,e,n,i)=>{typeof s.copyToChannel=="function"?t[e].byteLength!==0&&s.copyToChannel(t[e],n,i):t[e].byteLength!==0&&s.getChannelData(n).set(t[e],i)},Nn=(s,t)=>{const e=[];for(let n=0;n<s;n+=1){const i=[],r=typeof t=="number"?t:t[n];for(let a=0;a<r;a+=1)i.push(new Float32Array(128));e.push(i)}return e},oo=(s,t)=>{const e=Pt(es,s),n=K(t);return Pt(e,n)},ao=async(s,t,e,n,i,r,a)=>{const o=t===null?Math.ceil(s.context.length/128)*128:t.length,c=n.channelCount*n.numberOfInputs,u=i.reduce((_,y)=>_+y,0),l=u===0?null:e.createBuffer(u,o,e.sampleRate);if(r===void 0)throw new Error("Missing the processor constructor.");const h=Tt(s),d=await oo(e,s),f=Nn(n.numberOfInputs,n.channelCount),p=Nn(n.numberOfOutputs,i),m=Array.from(s.parameters.keys()).reduce((_,y)=>({..._,[y]:new Float32Array(128)}),{});for(let _=0;_<o;_+=128){if(n.numberOfInputs>0&&t!==null)for(let y=0;y<n.numberOfInputs;y+=1)for(let b=0;b<n.channelCount;b+=1)kn(t,f[y],b,b,_);r.parameterDescriptors!==void 0&&t!==null&&r.parameterDescriptors.forEach(({name:y},b)=>{kn(t,m,y,c+b,_)});for(let y=0;y<n.numberOfInputs;y+=1)for(let b=0;b<i[y];b+=1)p[y][b].byteLength===0&&(p[y][b]=new Float32Array(128));try{const y=f.map((C,x)=>h.activeInputs[x].size===0?[]:C),b=a(_/e.sampleRate,e.sampleRate,()=>d.process(y,p,m));if(l!==null)for(let C=0,x=0;C<n.numberOfOutputs;C+=1){for(let g=0;g<i[C];g+=1)fi(l,p[C],g,x+g,_);x+=i[C]}if(!b)break}catch(y){s.dispatchEvent(new ErrorEvent("processorerror",{colno:y.colno,filename:y.filename,lineno:y.lineno,message:y.message}));break}}return l},co=(s,t,e,n,i,r,a,o,c,u,l,h,d,f,p,m)=>(_,y,b)=>{const C=new WeakMap;let x=null;const g=async(T,w)=>{let v=l(T),O=null;const k=gt(v,w),A=Array.isArray(y.outputChannelCount)?y.outputChannelCount:Array.from(y.outputChannelCount);if(h===null){const S=A.reduce((R,P)=>R+P,0),D=i(w,{channelCount:Math.max(1,S),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,S)}),E=[];for(let R=0;R<T.numberOfOutputs;R+=1)E.push(n(w,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:A[R]}));const F=a(w,{channelCount:y.channelCount,channelCountMode:y.channelCountMode,channelInterpretation:y.channelInterpretation,gain:1});F.connect=t.bind(null,E),F.disconnect=c.bind(null,E),O=[D,E,F]}else k||(v=new h(w,_));if(C.set(w,O===null?v:O[2]),O!==null){if(x===null){if(b===void 0)throw new Error("Missing the processor constructor.");if(d===null)throw new Error("Missing the native OfflineAudioContext constructor.");const P=T.channelCount*T.numberOfInputs,z=b.parameterDescriptors===void 0?0:b.parameterDescriptors.length,L=P+z;x=ao(T,L===0?null:await(async()=>{const W=new d(L,Math.ceil(T.context.length/128)*128,w.sampleRate),X=[],xt=[];for(let tt=0;tt<y.numberOfInputs;tt+=1)X.push(a(W,{channelCount:y.channelCount,channelCountMode:y.channelCountMode,channelInterpretation:y.channelInterpretation,gain:1})),xt.push(i(W,{channelCount:y.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:y.channelCount}));const At=await Promise.all(Array.from(T.parameters.values()).map(async tt=>{const yt=r(W,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:tt.value});return await f(W,tt,yt.offset),yt})),G=n(W,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,P+z)});for(let tt=0;tt<y.numberOfInputs;tt+=1){X[tt].connect(xt[tt]);for(let yt=0;yt<y.channelCount;yt+=1)xt[tt].connect(G,yt,tt*y.channelCount+yt)}for(const[tt,yt]of At.entries())yt.connect(G,0,P+tt),yt.start(0);return G.connect(W.destination),await Promise.all(X.map(tt=>p(T,W,tt))),m(W)})(),w,y,A,b,u)}const S=await x,D=e(w,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),[E,F,R]=O;S!==null&&(D.buffer=S,D.start(0)),D.connect(E);for(let P=0,z=0;P<T.numberOfOutputs;P+=1){const L=F[P];for(let j=0;j<A[P];j+=1)E.connect(L,z+j,j);z+=A[P]}return R}if(k)for(const[S,D]of T.parameters.entries())await s(w,D,v.parameters.get(S));else for(const[S,D]of T.parameters.entries())await f(w,D,v.parameters.get(S));return await p(T,w,v),v};return{render(T,w){o(w,T);const v=C.get(w);return v!==void 0?Promise.resolve(v):g(T,w)}}},uo=(s,t,e,n,i,r,a,o,c,u,l,h,d,f,p,m,_,y,b,C)=>class extends p{constructor(g,T){super(g,T),this._nativeContext=g,this._audioWorklet=s===void 0?void 0:{addModule:(w,v)=>s(this,w,v)}}get audioWorklet(){return this._audioWorklet}createAnalyser(){return new t(this)}createBiquadFilter(){return new i(this)}createBuffer(g,T,w){return new e({length:T,numberOfChannels:g,sampleRate:w})}createBufferSource(){return new n(this)}createChannelMerger(g=6){return new r(this,{numberOfInputs:g})}createChannelSplitter(g=6){return new a(this,{numberOfOutputs:g})}createConstantSource(){return new o(this)}createConvolver(){return new c(this)}createDelay(g=1){return new l(this,{maxDelayTime:g})}createDynamicsCompressor(){return new h(this)}createGain(){return new d(this)}createIIRFilter(g,T){return new f(this,{feedback:T,feedforward:g})}createOscillator(){return new m(this)}createPanner(){return new _(this)}createPeriodicWave(g,T,w={disableNormalization:!1}){return new y(this,{...w,imag:T,real:g})}createStereoPanner(){return new b(this)}createWaveShaper(){return new C(this)}decodeAudioData(g,T,w){return u(this._nativeContext,g).then(v=>(typeof T=="function"&&T(v),v),v=>{throw typeof w=="function"&&w(v),v})}},lo={Q:1,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:350,gain:0,type:"lowpass"},ho=(s,t,e,n,i,r,a,o)=>class extends s{constructor(u,l){const h=r(u),d={...lo,...l},f=i(h,d),p=a(h),m=p?e():null;super(u,!1,f,m),this._Q=t(this,p,f.Q,vt,bt),this._detune=t(this,p,f.detune,1200*Math.log2(vt),-1200*Math.log2(vt)),this._frequency=t(this,p,f.frequency,u.sampleRate/2,0),this._gain=t(this,p,f.gain,40*Math.log10(vt),bt),this._nativeBiquadFilterNode=f,o(this,1)}get detune(){return this._detune}get frequency(){return this._frequency}get gain(){return this._gain}get Q(){return this._Q}get type(){return this._nativeBiquadFilterNode.type}set type(u){this._nativeBiquadFilterNode.type=u}getFrequencyResponse(u,l,h){try{this._nativeBiquadFilterNode.getFrequencyResponse(u,l,h)}catch(d){throw d.code===11?n():d}if(u.length!==l.length||l.length!==h.length)throw n()}},po=(s,t,e,n,i)=>()=>{const r=new WeakMap,a=async(o,c)=>{let u=e(o);const l=gt(u,c);if(!l){const h={Q:u.Q.value,channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,detune:u.detune.value,frequency:u.frequency.value,gain:u.gain.value,type:u.type};u=t(c,h)}return r.set(c,u),l?(await s(c,o.Q,u.Q),await s(c,o.detune,u.detune),await s(c,o.frequency,u.frequency),await s(c,o.gain,u.gain)):(await n(c,o.Q,u.Q),await n(c,o.detune,u.detune),await n(c,o.frequency,u.frequency),await n(c,o.gain,u.gain)),await i(o,c,u),u};return{render(o,c){const u=r.get(c);return u!==void 0?Promise.resolve(u):a(o,c)}}},fo=(s,t)=>(e,n)=>{const i=t.get(e);if(i!==void 0)return i;const r=s.get(e);if(r!==void 0)return r;try{const a=n();return a instanceof Promise?(s.set(e,a),a.catch(()=>!1).then(o=>(s.delete(e),t.set(e,o),o))):(t.set(e,a),a)}catch{return t.set(e,!1),!1}},mo={channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6},_o=(s,t,e,n,i)=>class extends s{constructor(a,o){const c=n(a),u={...mo,...o},l=e(c,u),h=i(c)?t():null;super(a,!1,l,h)}},go=(s,t,e)=>()=>{const n=new WeakMap,i=async(r,a)=>{let o=t(r);if(!gt(o,a)){const u={channelCount:o.channelCount,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,numberOfInputs:o.numberOfInputs};o=s(a,u)}return n.set(a,o),await e(r,a,o),o};return{render(r,a){const o=n.get(a);return o!==void 0?Promise.resolve(o):i(r,a)}}},yo={channelCount:6,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:6},vo=(s,t,e,n,i,r)=>class extends s{constructor(o,c){const u=n(o),l=r({...yo,...c}),h=e(u,l),d=i(u)?t():null;super(o,!1,h,d)}},To=(s,t,e)=>()=>{const n=new WeakMap,i=async(r,a)=>{let o=t(r);if(!gt(o,a)){const u={channelCount:o.channelCount,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,numberOfOutputs:o.numberOfOutputs};o=s(a,u)}return n.set(a,o),await e(r,a,o),o};return{render(r,a){const o=n.get(a);return o!==void 0?Promise.resolve(o):i(r,a)}}},wo=s=>(t,e,n)=>s(e,t,n),bo=s=>(t,e,n=0,i=0)=>{const r=t[n];if(r===void 0)throw s();return An(e)?r.connect(e,0,i):r.connect(e,0)},Co=s=>(t,e)=>{const n=s(t,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),i=t.createBuffer(1,2,44100);return n.buffer=i,n.loop=!0,n.connect(e),n.start(),()=>{n.stop(),n.disconnect(e)}},So={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",offset:1},xo=(s,t,e,n,i,r,a)=>class extends s{constructor(c,u){const l=i(c),h={...So,...u},d=n(l,h),f=r(l),p=f?e():null;super(c,!1,d,p),this._constantSourceNodeRenderer=p,this._nativeConstantSourceNode=d,this._offset=t(this,f,d.offset,vt,bt),this._onended=null}get offset(){return this._offset}get onended(){return this._onended}set onended(c){const u=typeof c=="function"?a(this,c):null;this._nativeConstantSourceNode.onended=u;const l=this._nativeConstantSourceNode.onended;this._onended=l!==null&&l===u?c:l}start(c=0){if(this._nativeConstantSourceNode.start(c),this._constantSourceNodeRenderer!==null&&(this._constantSourceNodeRenderer.start=c),this.context.state!=="closed"){Ne(this);const u=()=>{this._nativeConstantSourceNode.removeEventListener("ended",u),Zt(this)&&sn(this)};this._nativeConstantSourceNode.addEventListener("ended",u)}}stop(c=0){this._nativeConstantSourceNode.stop(c),this._constantSourceNodeRenderer!==null&&(this._constantSourceNodeRenderer.stop=c)}},Ao=(s,t,e,n,i)=>()=>{const r=new WeakMap;let a=null,o=null;const c=async(u,l)=>{let h=e(u);const d=gt(h,l);if(!d){const f={channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,offset:h.offset.value};h=t(l,f),a!==null&&h.start(a),o!==null&&h.stop(o)}return r.set(l,h),d?await s(l,u.offset,h.offset):await n(l,u.offset,h.offset),await i(u,l,h),h};return{set start(u){a=u},set stop(u){o=u},render(u,l){const h=r.get(l);return h!==void 0?Promise.resolve(h):c(u,l)}}},ko=s=>t=>(s[0]=t,s[0]),No={buffer:null,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",disableNormalization:!1},Oo=(s,t,e,n,i,r)=>class extends s{constructor(o,c){const u=n(o),l={...No,...c},h=e(u,l),f=i(u)?t():null;super(o,!1,h,f),this._isBufferNullified=!1,this._nativeConvolverNode=h,l.buffer!==null&&r(this,l.buffer.duration)}get buffer(){return this._isBufferNullified?null:this._nativeConvolverNode.buffer}set buffer(o){if(this._nativeConvolverNode.buffer=o,o===null&&this._nativeConvolverNode.buffer!==null){const c=this._nativeConvolverNode.context;this._nativeConvolverNode.buffer=c.createBuffer(1,1,c.sampleRate),this._isBufferNullified=!0,r(this,0)}else this._isBufferNullified=!1,r(this,this._nativeConvolverNode.buffer===null?0:this._nativeConvolverNode.buffer.duration)}get normalize(){return this._nativeConvolverNode.normalize}set normalize(o){this._nativeConvolverNode.normalize=o}},Mo=(s,t,e)=>()=>{const n=new WeakMap,i=async(r,a)=>{let o=t(r);if(!gt(o,a)){const u={buffer:o.buffer,channelCount:o.channelCount,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,disableNormalization:!o.normalize};o=s(a,u)}return n.set(a,o),Ie(o)?await e(r,a,o.inputs[0]):await e(r,a,o),o};return{render(r,a){const o=n.get(a);return o!==void 0?Promise.resolve(o):i(r,a)}}},Io=(s,t)=>(e,n,i)=>{if(t===null)throw new Error("Missing the native OfflineAudioContext constructor.");try{return new t(e,n,i)}catch(r){throw r.name==="SyntaxError"?s():r}},Eo=()=>new DOMException("","DataCloneError"),$s=s=>{const{port1:t,port2:e}=new MessageChannel;return new Promise(n=>{const i=()=>{e.onmessage=null,t.close(),e.close(),n()};e.onmessage=()=>i();try{t.postMessage(s,[s])}catch{}finally{i()}})},Do=(s,t,e,n,i,r,a,o,c,u,l)=>(h,d)=>{const f=a(h)?h:r(h);if(i.has(d)){const p=e();return Promise.reject(p)}try{i.add(d)}catch{}return t(c,()=>c(f))?f.decodeAudioData(d).then(p=>($s(d).catch(()=>{}),t(o,()=>o(p))||l(p),s.add(p),p)):new Promise((p,m)=>{const _=async()=>{try{await $s(d)}catch{}},y=b=>{m(b),_()};try{f.decodeAudioData(d,b=>{typeof b.copyFromChannel!="function"&&(u(b),ls(b)),s.add(b),_().then(()=>p(b))},b=>{y(b===null?n():b)})}catch(b){y(b)}})},Ro=(s,t,e,n,i,r,a,o)=>(c,u)=>{const l=t.get(c);if(l===void 0)throw new Error("Missing the expected cycle count.");const h=r(c.context),d=o(h);if(l===u){if(t.delete(c),!d&&a(c)){const f=n(c),{outputs:p}=e(c);for(const m of p)if(on(m)){const _=n(m[0]);s(f,_,m[1],m[2])}else{const _=i(m[0]);f.connect(_,m[1])}}}else t.set(c,l-u)},Po={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",delayTime:0,maxDelayTime:1},Vo=(s,t,e,n,i,r,a)=>class extends s{constructor(c,u){const l=i(c),h={...Po,...u},d=n(l,h),f=r(l),p=f?e(h.maxDelayTime):null;super(c,!1,d,p),this._delayTime=t(this,f,d.delayTime),a(this,h.maxDelayTime)}get delayTime(){return this._delayTime}},Fo=(s,t,e,n,i)=>r=>{const a=new WeakMap,o=async(c,u)=>{let l=e(c);const h=gt(l,u);if(!h){const d={channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,delayTime:l.delayTime.value,maxDelayTime:r};l=t(u,d)}return a.set(u,l),h?await s(u,c.delayTime,l.delayTime):await n(u,c.delayTime,l.delayTime),await i(c,u,l),l};return{render(c,u){const l=a.get(u);return l!==void 0?Promise.resolve(l):o(c,u)}}},Lo=s=>(t,e,n,i)=>s(t[i],r=>r[0]===e&&r[1]===n),qo=s=>(t,e)=>{s(t).delete(e)},Wo=s=>"delayTime"in s,Bo=(s,t,e)=>function n(i,r){const a=Cn(r)?r:e(s,r);if(Wo(a))return[];if(i[0]===a)return[i];if(i.includes(a))return[];const{outputs:o}=t(a);return Array.from(o).map(c=>n([...i,a],c[0])).reduce((c,u)=>c.concat(u),[])},fn=(s,t,e)=>{const n=t[e];if(n===void 0)throw s();return n},jo=s=>(t,e=void 0,n=void 0,i=0)=>e===void 0?t.forEach(r=>r.disconnect()):typeof e=="number"?fn(s,t,e).disconnect():An(e)?n===void 0?t.forEach(r=>r.disconnect(e)):i===void 0?fn(s,t,n).disconnect(e,0):fn(s,t,n).disconnect(e,0,i):n===void 0?t.forEach(r=>r.disconnect(e)):fn(s,t,n).disconnect(e,0),Uo={attack:.003,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",knee:30,ratio:12,release:.25,threshold:-24},zo=(s,t,e,n,i,r,a,o)=>class extends s{constructor(u,l){const h=r(u),d={...Uo,...l},f=n(h,d),p=a(h),m=p?e():null;super(u,!1,f,m),this._attack=t(this,p,f.attack),this._knee=t(this,p,f.knee),this._nativeDynamicsCompressorNode=f,this._ratio=t(this,p,f.ratio),this._release=t(this,p,f.release),this._threshold=t(this,p,f.threshold),o(this,.006)}get attack(){return this._attack}get channelCount(){return this._nativeDynamicsCompressorNode.channelCount}set channelCount(u){const l=this._nativeDynamicsCompressorNode.channelCount;if(this._nativeDynamicsCompressorNode.channelCount=u,u>2)throw this._nativeDynamicsCompressorNode.channelCount=l,i()}get channelCountMode(){return this._nativeDynamicsCompressorNode.channelCountMode}set channelCountMode(u){const l=this._nativeDynamicsCompressorNode.channelCountMode;if(this._nativeDynamicsCompressorNode.channelCountMode=u,u==="max")throw this._nativeDynamicsCompressorNode.channelCountMode=l,i()}get knee(){return this._knee}get ratio(){return this._ratio}get reduction(){return typeof this._nativeDynamicsCompressorNode.reduction.value=="number"?this._nativeDynamicsCompressorNode.reduction.value:this._nativeDynamicsCompressorNode.reduction}get release(){return this._release}get threshold(){return this._threshold}},Go=(s,t,e,n,i)=>()=>{const r=new WeakMap,a=async(o,c)=>{let u=e(o);const l=gt(u,c);if(!l){const h={attack:u.attack.value,channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,knee:u.knee.value,ratio:u.ratio.value,release:u.release.value,threshold:u.threshold.value};u=t(c,h)}return r.set(c,u),l?(await s(c,o.attack,u.attack),await s(c,o.knee,u.knee),await s(c,o.ratio,u.ratio),await s(c,o.release,u.release),await s(c,o.threshold,u.threshold)):(await n(c,o.attack,u.attack),await n(c,o.knee,u.knee),await n(c,o.ratio,u.ratio),await n(c,o.release,u.release),await n(c,o.threshold,u.threshold)),await i(o,c,u),u};return{render(o,c){const u=r.get(c);return u!==void 0?Promise.resolve(u):a(o,c)}}},$o=()=>new DOMException("","EncodingError"),Zo=s=>t=>new Promise((e,n)=>{if(s===null){n(new SyntaxError);return}const i=s.document.head;if(i===null)n(new SyntaxError);else{const r=s.document.createElement("script"),a=new Blob([t],{type:"application/javascript"}),o=URL.createObjectURL(a),c=s.onerror,u=()=>{s.onerror=c,URL.revokeObjectURL(o)};s.onerror=(l,h,d,f,p)=>{if(h===o||h===s.location.href&&d===1&&f===1)return u(),n(p),!1;if(c!==null)return c(l,h,d,f,p)},r.onerror=()=>{u(),n(new SyntaxError)},r.onload=()=>{u(),e()},r.src=o,r.type="module",i.appendChild(r)}}),Xo=s=>class{constructor(e){this._nativeEventTarget=e,this._listeners=new WeakMap}addEventListener(e,n,i){if(n!==null){let r=this._listeners.get(n);r===void 0&&(r=s(this,n),typeof n=="function"&&this._listeners.set(n,r)),this._nativeEventTarget.addEventListener(e,r,i)}}dispatchEvent(e){return this._nativeEventTarget.dispatchEvent(e)}removeEventListener(e,n,i){const r=n===null?void 0:this._listeners.get(n);this._nativeEventTarget.removeEventListener(e,r===void 0?null:r,i)}},Yo=s=>(t,e,n)=>{Object.defineProperties(s,{currentFrame:{configurable:!0,get(){return Math.round(t*e)}},currentTime:{configurable:!0,get(){return t}}});try{return n()}finally{s!==null&&(delete s.currentFrame,delete s.currentTime)}},Qo=s=>async t=>{try{const e=await fetch(t);if(e.ok)return[await e.text(),e.url]}catch{}throw s()},Jo={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",gain:1},Ho=(s,t,e,n,i,r)=>class extends s{constructor(o,c){const u=i(o),l={...Jo,...c},h=n(u,l),d=r(u),f=d?e():null;super(o,!1,h,f),this._gain=t(this,d,h.gain,vt,bt)}get gain(){return this._gain}},Ko=(s,t,e,n,i)=>()=>{const r=new WeakMap,a=async(o,c)=>{let u=e(o);const l=gt(u,c);if(!l){const h={channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,gain:u.gain.value};u=t(c,h)}return r.set(c,u),l?await s(c,o.gain,u.gain):await n(c,o.gain,u.gain),await i(o,c,u),u};return{render(o,c){const u=r.get(c);return u!==void 0?Promise.resolve(u):a(o,c)}}},ta=(s,t)=>e=>t(s,e),ea=s=>t=>{const e=s(t);if(e.renderer===null)throw new Error("Missing the renderer of the given AudioNode in the audio graph.");return e.renderer},na=s=>t=>{var e;return(e=s.get(t))!==null&&e!==void 0?e:0},sa=s=>t=>{const e=s(t);if(e.renderer===null)throw new Error("Missing the renderer of the given AudioParam in the audio graph.");return e.renderer},ia=s=>t=>s.get(t),ft=()=>new DOMException("","InvalidStateError"),ra=s=>t=>{const e=s.get(t);if(e===void 0)throw ft();return e},oa=(s,t)=>e=>{let n=s.get(e);if(n!==void 0)return n;if(t===null)throw new Error("Missing the native OfflineAudioContext constructor.");return n=new t(1,1,44100),s.set(e,n),n},aa=s=>t=>{const e=s.get(t);if(e===void 0)throw new Error("The context has no set of AudioWorkletNodes.");return e},Wn=()=>new DOMException("","InvalidAccessError"),ca=s=>{s.getFrequencyResponse=(t=>(e,n,i)=>{if(e.length!==n.length||n.length!==i.length)throw Wn();return t.call(s,e,n,i)})(s.getFrequencyResponse)},ua={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers"},la=(s,t,e,n,i,r)=>class extends s{constructor(o,c){const u=n(o),l=i(u),h={...ua,...c},d=t(u,l?null:o.baseLatency,h),f=l?e(h.feedback,h.feedforward):null;super(o,!1,d,f),ca(d),this._nativeIIRFilterNode=d,r(this,1)}getFrequencyResponse(o,c,u){return this._nativeIIRFilterNode.getFrequencyResponse(o,c,u)}},mi=(s,t,e,n,i,r,a,o,c,u,l)=>{const h=u.length;let d=o;for(let f=0;f<h;f+=1){let p=e[0]*u[f];for(let m=1;m<i;m+=1){const _=d-m&c-1;p+=e[m]*r[_],p-=s[m]*a[_]}for(let m=i;m<n;m+=1)p+=e[m]*r[d-m&c-1];for(let m=i;m<t;m+=1)p-=s[m]*a[d-m&c-1];r[d]=u[f],a[d]=p,d=d+1&c-1,l[f]=p}return d},ha=(s,t,e,n)=>{const i=e instanceof Float64Array?e:new Float64Array(e),r=n instanceof Float64Array?n:new Float64Array(n),a=i.length,o=r.length,c=Math.min(a,o);if(i[0]!==1){for(let p=0;p<a;p+=1)r[p]/=i[0];for(let p=1;p<o;p+=1)i[p]/=i[0]}const u=32,l=new Float32Array(u),h=new Float32Array(u),d=t.createBuffer(s.numberOfChannels,s.length,s.sampleRate),f=s.numberOfChannels;for(let p=0;p<f;p+=1){const m=s.getChannelData(p),_=d.getChannelData(p);l.fill(0),h.fill(0),mi(i,a,r,o,c,l,h,0,u,m,_)}return d},da=(s,t,e,n,i)=>(r,a)=>{const o=new WeakMap;let c=null;const u=async(l,h)=>{let d=null,f=t(l);const p=gt(f,h);if(h.createIIRFilter===void 0?d=s(h,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}):p||(f=h.createIIRFilter(a,r)),o.set(h,d===null?f:d),d!==null){if(c===null){if(e===null)throw new Error("Missing the native OfflineAudioContext constructor.");const _=new e(l.context.destination.channelCount,l.context.length,h.sampleRate);c=(async()=>{await n(l,_,_.destination);const y=await i(_);return ha(y,h,r,a)})()}const m=await c;return d.buffer=m,d.start(0),d}return await n(l,h,f),f};return{render(l,h){const d=o.get(h);return d!==void 0?Promise.resolve(d):u(l,h)}}},pa=(s,t,e,n,i,r)=>a=>(o,c)=>{const u=s.get(o);if(u===void 0){if(!a&&r(o)){const l=n(o),{outputs:h}=e(o);for(const d of h)if(on(d)){const f=n(d[0]);t(l,f,d[1],d[2])}else{const f=i(d[0]);l.disconnect(f,d[1])}}s.set(o,c)}else s.set(o,u+c)},fa=(s,t)=>e=>{const n=s.get(e);return t(n)||t(e)},ma=(s,t)=>e=>s.has(e)||t(e),_a=(s,t)=>e=>s.has(e)||t(e),ga=(s,t)=>e=>{const n=s.get(e);return t(n)||t(e)},ya=s=>t=>s!==null&&t instanceof s,va=s=>t=>s!==null&&typeof s.AudioNode=="function"&&t instanceof s.AudioNode,Ta=s=>t=>s!==null&&typeof s.AudioParam=="function"&&t instanceof s.AudioParam,wa=(s,t)=>e=>s(e)||t(e),ba=s=>t=>s!==null&&t instanceof s,Ca=s=>s!==null&&s.isSecureContext,Sa=(s,t,e,n)=>class extends s{constructor(r,a){const o=e(r),c=t(o,a);if(n(o))throw TypeError();super(r,!0,c,null),this._nativeMediaElementAudioSourceNode=c}get mediaElement(){return this._nativeMediaElementAudioSourceNode.mediaElement}},xa={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers"},Aa=(s,t,e,n)=>class extends s{constructor(r,a){const o=e(r);if(n(o))throw new TypeError;const c={...xa,...a},u=t(o,c);super(r,!1,u,null),this._nativeMediaStreamAudioDestinationNode=u}get stream(){return this._nativeMediaStreamAudioDestinationNode.stream}},ka=(s,t,e,n)=>class extends s{constructor(r,a){const o=e(r),c=t(o,a);if(n(o))throw new TypeError;super(r,!0,c,null),this._nativeMediaStreamAudioSourceNode=c}get mediaStream(){return this._nativeMediaStreamAudioSourceNode.mediaStream}},Na=(s,t,e)=>class extends s{constructor(i,r){const a=e(i),o=t(a,r);super(i,!0,o,null)}},Oa=(s,t,e,n,i,r)=>class extends e{constructor(o,c){super(o),this._nativeContext=o,Ln.set(this,o),n(o)&&i.set(o,new Set),this._destination=new s(this,c),this._listener=t(this,o),this._onstatechange=null}get currentTime(){return this._nativeContext.currentTime}get destination(){return this._destination}get listener(){return this._listener}get onstatechange(){return this._onstatechange}set onstatechange(o){const c=typeof o=="function"?r(this,o):null;this._nativeContext.onstatechange=c;const u=this._nativeContext.onstatechange;this._onstatechange=u!==null&&u===c?o:u}get sampleRate(){return this._nativeContext.sampleRate}get state(){return this._nativeContext.state}},Be=s=>{const t=new Uint32Array([1179011410,40,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,4,0]);try{const e=s.decodeAudioData(t.buffer,()=>{});return e===void 0?!1:(e.catch(()=>{}),!0)}catch{}return!1},Ma=(s,t)=>(e,n,i)=>{const r=new Set;return e.connect=(a=>(o,c=0,u=0)=>{const l=r.size===0;if(t(o))return a.call(e,o,c,u),s(r,[o,c,u],h=>h[0]===o&&h[1]===c&&h[2]===u,!0),l&&n(),o;a.call(e,o,c),s(r,[o,c],h=>h[0]===o&&h[1]===c,!0),l&&n()})(e.connect),e.disconnect=(a=>(o,c,u)=>{const l=r.size>0;if(o===void 0)a.apply(e),r.clear();else if(typeof o=="number"){a.call(e,o);for(const d of r)d[1]===o&&r.delete(d)}else{t(o)?a.call(e,o,c,u):a.call(e,o,c);for(const d of r)d[0]===o&&(c===void 0||d[1]===c)&&(u===void 0||d[2]===u)&&r.delete(d)}const h=r.size===0;l&&h&&i()})(e.disconnect),e},nt=(s,t,e)=>{const n=t[e];n!==void 0&&n!==s[e]&&(s[e]=n)},dt=(s,t)=>{nt(s,t,"channelCount"),nt(s,t,"channelCountMode"),nt(s,t,"channelInterpretation")},Zs=s=>typeof s.getFloatTimeDomainData=="function",Ia=s=>{s.getFloatTimeDomainData=t=>{const e=new Uint8Array(t.length);s.getByteTimeDomainData(e);const n=Math.max(e.length,s.fftSize);for(let i=0;i<n;i+=1)t[i]=(e[i]-128)*.0078125;return t}},Ea=(s,t)=>(e,n)=>{const i=e.createAnalyser();if(dt(i,n),!(n.maxDecibels>n.minDecibels))throw t();return nt(i,n,"fftSize"),nt(i,n,"maxDecibels"),nt(i,n,"minDecibels"),nt(i,n,"smoothingTimeConstant"),s(Zs,()=>Zs(i))||Ia(i),i},Da=s=>s===null?null:s.hasOwnProperty("AudioBuffer")?s.AudioBuffer:null,rt=(s,t,e)=>{const n=t[e];n!==void 0&&n!==s[e].value&&(s[e].value=n)},Ra=s=>{s.start=(t=>{let e=!1;return(n=0,i=0,r)=>{if(e)throw ft();t.call(s,n,i,r),e=!0}})(s.start)},ps=s=>{s.start=(t=>(e=0,n=0,i)=>{if(typeof i=="number"&&i<0||n<0||e<0)throw new RangeError("The parameters can't be negative.");t.call(s,e,n,i)})(s.start)},fs=s=>{s.stop=(t=>(e=0)=>{if(e<0)throw new RangeError("The parameter can't be negative.");t.call(s,e)})(s.stop)},Pa=(s,t,e,n,i,r,a,o,c,u,l)=>(h,d)=>{const f=h.createBufferSource();return dt(f,d),rt(f,d,"playbackRate"),nt(f,d,"buffer"),nt(f,d,"loop"),nt(f,d,"loopEnd"),nt(f,d,"loopStart"),t(e,()=>e(h))||Ra(f),t(n,()=>n(h))||c(f),t(i,()=>i(h))||u(f,h),t(r,()=>r(h))||ps(f),t(a,()=>a(h))||l(f,h),t(o,()=>o(h))||fs(f),s(h,f),f},Va=s=>s===null?null:s.hasOwnProperty("AudioContext")?s.AudioContext:s.hasOwnProperty("webkitAudioContext")?s.webkitAudioContext:null,Fa=(s,t)=>(e,n,i)=>{const r=e.destination;if(r.channelCount!==n)try{r.channelCount=n}catch{}i&&r.channelCountMode!=="explicit"&&(r.channelCountMode="explicit"),r.maxChannelCount===0&&Object.defineProperty(r,"maxChannelCount",{value:n});const a=s(e,{channelCount:n,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,gain:1});return t(a,"channelCount",o=>()=>o.call(a),o=>c=>{o.call(a,c);try{r.channelCount=c}catch(u){if(c>r.maxChannelCount)throw u}}),t(a,"channelCountMode",o=>()=>o.call(a),o=>c=>{o.call(a,c),r.channelCountMode=c}),t(a,"channelInterpretation",o=>()=>o.call(a),o=>c=>{o.call(a,c),r.channelInterpretation=c}),Object.defineProperty(a,"maxChannelCount",{get:()=>r.maxChannelCount}),a.connect(r),a},La=s=>s===null?null:s.hasOwnProperty("AudioWorkletNode")?s.AudioWorkletNode:null,qa=s=>{const{port1:t}=new MessageChannel;try{t.postMessage(s)}finally{t.close()}},Wa=(s,t,e,n,i)=>(r,a,o,c,u,l)=>{if(o!==null)try{const h=new o(r,c,l),d=new Map;let f=null;if(Object.defineProperties(h,{channelCount:{get:()=>l.channelCount,set:()=>{throw s()}},channelCountMode:{get:()=>"explicit",set:()=>{throw s()}},onprocessorerror:{get:()=>f,set:p=>{typeof f=="function"&&h.removeEventListener("processorerror",f),f=typeof p=="function"?p:null,typeof f=="function"&&h.addEventListener("processorerror",f)}}}),h.addEventListener=(p=>(...m)=>{if(m[0]==="processorerror"){const _=typeof m[1]=="function"?m[1]:typeof m[1]=="object"&&m[1]!==null&&typeof m[1].handleEvent=="function"?m[1].handleEvent:null;if(_!==null){const y=d.get(m[1]);y!==void 0?m[1]=y:(m[1]=b=>{b.type==="error"?(Object.defineProperties(b,{type:{value:"processorerror"}}),_(b)):_(new ErrorEvent(m[0],{...b}))},d.set(_,m[1]))}}return p.call(h,"error",m[1],m[2]),p.call(h,...m)})(h.addEventListener),h.removeEventListener=(p=>(...m)=>{if(m[0]==="processorerror"){const _=d.get(m[1]);_!==void 0&&(d.delete(m[1]),m[1]=_)}return p.call(h,"error",m[1],m[2]),p.call(h,m[0],m[1],m[2])})(h.removeEventListener),l.numberOfOutputs!==0){const p=e(r,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return h.connect(p).connect(r.destination),i(h,()=>p.disconnect(),()=>p.connect(r.destination))}return h}catch(h){throw h.code===11?n():h}if(u===void 0)throw n();return qa(l),t(r,a,u,l)},_i=(s,t)=>s===null?512:Math.max(512,Math.min(16384,Math.pow(2,Math.round(Math.log2(s*t))))),Ba=s=>new Promise((t,e)=>{const{port1:n,port2:i}=new MessageChannel;n.onmessage=({data:r})=>{n.close(),i.close(),t(r)},n.onmessageerror=({data:r})=>{n.close(),i.close(),e(r)},i.postMessage(s)}),ja=async(s,t)=>{const e=await Ba(t);return new s(e)},Ua=(s,t,e,n)=>{let i=es.get(s);i===void 0&&(i=new WeakMap,es.set(s,i));const r=ja(e,n);return i.set(t,r),r},za=(s,t,e,n,i,r,a,o,c,u,l,h,d)=>(f,p,m,_)=>{if(_.numberOfInputs===0&&_.numberOfOutputs===0)throw c();const y=Array.isArray(_.outputChannelCount)?_.outputChannelCount:Array.from(_.outputChannelCount);if(y.some(I=>I<1))throw c();if(y.length!==_.numberOfOutputs)throw t();if(_.channelCountMode!=="explicit")throw c();const b=_.channelCount*_.numberOfInputs,C=y.reduce((I,q)=>I+q,0),x=m.parameterDescriptors===void 0?0:m.parameterDescriptors.length;if(b+x>6||C>6)throw c();const g=new MessageChannel,T=[],w=[];for(let I=0;I<_.numberOfInputs;I+=1)T.push(a(f,{channelCount:_.channelCount,channelCountMode:_.channelCountMode,channelInterpretation:_.channelInterpretation,gain:1})),w.push(i(f,{channelCount:_.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:_.channelCount}));const v=[];if(m.parameterDescriptors!==void 0)for(const{defaultValue:I,maxValue:q,minValue:ht,name:st}of m.parameterDescriptors){const Z=r(f,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:_.parameterData[st]!==void 0?_.parameterData[st]:I===void 0?0:I});Object.defineProperties(Z.offset,{defaultValue:{get:()=>I===void 0?0:I},maxValue:{get:()=>q===void 0?vt:q},minValue:{get:()=>ht===void 0?bt:ht}}),v.push(Z)}const O=n(f,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,b+x)}),k=_i(p,f.sampleRate),A=o(f,k,b+x,Math.max(1,C)),S=i(f,{channelCount:Math.max(1,C),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,C)}),D=[];for(let I=0;I<_.numberOfOutputs;I+=1)D.push(n(f,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:y[I]}));for(let I=0;I<_.numberOfInputs;I+=1){T[I].connect(w[I]);for(let q=0;q<_.channelCount;q+=1)w[I].connect(O,q,I*_.channelCount+q)}const E=new pi(m.parameterDescriptors===void 0?[]:m.parameterDescriptors.map(({name:I},q)=>{const ht=v[q];return ht.connect(O,0,b+q),ht.start(0),[I,ht.offset]}));O.connect(A);let F=_.channelInterpretation,R=null;const P=_.numberOfOutputs===0?[A]:D,z={get bufferSize(){return k},get channelCount(){return _.channelCount},set channelCount(I){throw e()},get channelCountMode(){return _.channelCountMode},set channelCountMode(I){throw e()},get channelInterpretation(){return F},set channelInterpretation(I){for(const q of T)q.channelInterpretation=I;F=I},get context(){return A.context},get inputs(){return T},get numberOfInputs(){return _.numberOfInputs},get numberOfOutputs(){return _.numberOfOutputs},get onprocessorerror(){return R},set onprocessorerror(I){typeof R=="function"&&z.removeEventListener("processorerror",R),R=typeof I=="function"?I:null,typeof R=="function"&&z.addEventListener("processorerror",R)},get parameters(){return E},get port(){return g.port2},addEventListener(...I){return A.addEventListener(I[0],I[1],I[2])},connect:s.bind(null,P),disconnect:u.bind(null,P),dispatchEvent(...I){return A.dispatchEvent(I[0])},removeEventListener(...I){return A.removeEventListener(I[0],I[1],I[2])}},L=new Map;g.port1.addEventListener=(I=>(...q)=>{if(q[0]==="message"){const ht=typeof q[1]=="function"?q[1]:typeof q[1]=="object"&&q[1]!==null&&typeof q[1].handleEvent=="function"?q[1].handleEvent:null;if(ht!==null){const st=L.get(q[1]);st!==void 0?q[1]=st:(q[1]=Z=>{l(f.currentTime,f.sampleRate,()=>ht(Z))},L.set(ht,q[1]))}}return I.call(g.port1,q[0],q[1],q[2])})(g.port1.addEventListener),g.port1.removeEventListener=(I=>(...q)=>{if(q[0]==="message"){const ht=L.get(q[1]);ht!==void 0&&(L.delete(q[1]),q[1]=ht)}return I.call(g.port1,q[0],q[1],q[2])})(g.port1.removeEventListener);let j=null;Object.defineProperty(g.port1,"onmessage",{get:()=>j,set:I=>{typeof j=="function"&&g.port1.removeEventListener("message",j),j=typeof I=="function"?I:null,typeof j=="function"&&(g.port1.addEventListener("message",j),g.port1.start())}}),m.prototype.port=g.port1;let W=null;Ua(f,z,m,_).then(I=>W=I);const xt=Nn(_.numberOfInputs,_.channelCount),At=Nn(_.numberOfOutputs,y),G=m.parameterDescriptors===void 0?[]:m.parameterDescriptors.reduce((I,{name:q})=>({...I,[q]:new Float32Array(128)}),{});let tt=!0;const yt=()=>{_.numberOfOutputs>0&&A.disconnect(S);for(let I=0,q=0;I<_.numberOfOutputs;I+=1){const ht=D[I];for(let st=0;st<y[I];st+=1)S.disconnect(ht,q+st,st);q+=y[I]}},V=new Map;A.onaudioprocess=({inputBuffer:I,outputBuffer:q})=>{if(W!==null){const ht=h(z);for(let st=0;st<k;st+=128){for(let Z=0;Z<_.numberOfInputs;Z+=1)for(let it=0;it<_.channelCount;it+=1)kn(I,xt[Z],it,it,st);m.parameterDescriptors!==void 0&&m.parameterDescriptors.forEach(({name:Z},it)=>{kn(I,G,Z,b+it,st)});for(let Z=0;Z<_.numberOfInputs;Z+=1)for(let it=0;it<y[Z];it+=1)At[Z][it].byteLength===0&&(At[Z][it]=new Float32Array(128));try{const Z=xt.map((Nt,Kt)=>{if(ht[Kt].size>0)return V.set(Kt,k/128),Nt;const Xn=V.get(Kt);return Xn===void 0?[]:(Nt.every(cr=>cr.every(ur=>ur===0))&&(Xn===1?V.delete(Kt):V.set(Kt,Xn-1)),Nt)});tt=l(f.currentTime+st/f.sampleRate,f.sampleRate,()=>W.process(Z,At,G));for(let Nt=0,Kt=0;Nt<_.numberOfOutputs;Nt+=1){for(let Fe=0;Fe<y[Nt];Fe+=1)fi(q,At[Nt],Fe,Kt+Fe,st);Kt+=y[Nt]}}catch(Z){tt=!1,z.dispatchEvent(new ErrorEvent("processorerror",{colno:Z.colno,filename:Z.filename,lineno:Z.lineno,message:Z.message}))}if(!tt){for(let Z=0;Z<_.numberOfInputs;Z+=1){T[Z].disconnect(w[Z]);for(let it=0;it<_.channelCount;it+=1)w[st].disconnect(O,it,Z*_.channelCount+it)}if(m.parameterDescriptors!==void 0){const Z=m.parameterDescriptors.length;for(let it=0;it<Z;it+=1){const Nt=v[it];Nt.disconnect(O,0,b+it),Nt.stop()}}O.disconnect(A),A.onaudioprocess=null,ae?yt():be();break}}}};let ae=!1;const ce=a(f,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0}),we=()=>A.connect(ce).connect(f.destination),be=()=>{A.disconnect(ce),ce.disconnect()},or=()=>{if(tt){be(),_.numberOfOutputs>0&&A.connect(S);for(let I=0,q=0;I<_.numberOfOutputs;I+=1){const ht=D[I];for(let st=0;st<y[I];st+=1)S.connect(ht,q+st,st);q+=y[I]}}ae=!0},ar=()=>{tt&&(we(),yt()),ae=!1};return we(),d(z,or,ar)},gi=(s,t)=>{const e=s.createBiquadFilter();return dt(e,t),rt(e,t,"Q"),rt(e,t,"detune"),rt(e,t,"frequency"),rt(e,t,"gain"),nt(e,t,"type"),e},Ga=(s,t)=>(e,n)=>{const i=e.createChannelMerger(n.numberOfInputs);return s!==null&&s.name==="webkitAudioContext"&&t(e,i),dt(i,n),i},$a=s=>{const t=s.numberOfOutputs;Object.defineProperty(s,"channelCount",{get:()=>t,set:e=>{if(e!==t)throw ft()}}),Object.defineProperty(s,"channelCountMode",{get:()=>"explicit",set:e=>{if(e!=="explicit")throw ft()}}),Object.defineProperty(s,"channelInterpretation",{get:()=>"discrete",set:e=>{if(e!=="discrete")throw ft()}})},an=(s,t)=>{const e=s.createChannelSplitter(t.numberOfOutputs);return dt(e,t),$a(e),e},Za=(s,t,e,n,i)=>(r,a)=>{if(r.createConstantSource===void 0)return e(r,a);const o=r.createConstantSource();return dt(o,a),rt(o,a,"offset"),t(n,()=>n(r))||ps(o),t(i,()=>i(r))||fs(o),s(r,o),o},Ee=(s,t)=>(s.connect=t.connect.bind(t),s.disconnect=t.disconnect.bind(t),s),Xa=(s,t,e,n)=>(i,{offset:r,...a})=>{const o=i.createBuffer(1,2,44100),c=t(i,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),u=e(i,{...a,gain:r}),l=o.getChannelData(0);l[0]=1,l[1]=1,c.buffer=o,c.loop=!0;const h={get bufferSize(){},get channelCount(){return u.channelCount},set channelCount(p){u.channelCount=p},get channelCountMode(){return u.channelCountMode},set channelCountMode(p){u.channelCountMode=p},get channelInterpretation(){return u.channelInterpretation},set channelInterpretation(p){u.channelInterpretation=p},get context(){return u.context},get inputs(){return[]},get numberOfInputs(){return c.numberOfInputs},get numberOfOutputs(){return u.numberOfOutputs},get offset(){return u.gain},get onended(){return c.onended},set onended(p){c.onended=p},addEventListener(...p){return c.addEventListener(p[0],p[1],p[2])},dispatchEvent(...p){return c.dispatchEvent(p[0])},removeEventListener(...p){return c.removeEventListener(p[0],p[1],p[2])},start(p=0){c.start.call(c,p)},stop(p=0){c.stop.call(c,p)}},d=()=>c.connect(u),f=()=>c.disconnect(u);return s(i,c),n(Ee(h,u),d,f)},Ya=(s,t)=>(e,n)=>{const i=e.createConvolver();if(dt(i,n),n.disableNormalization===i.normalize&&(i.normalize=!n.disableNormalization),nt(i,n,"buffer"),n.channelCount>2||(t(i,"channelCount",r=>()=>r.call(i),r=>a=>{if(a>2)throw s();return r.call(i,a)}),n.channelCountMode==="max"))throw s();return t(i,"channelCountMode",r=>()=>r.call(i),r=>a=>{if(a==="max")throw s();return r.call(i,a)}),i},yi=(s,t)=>{const e=s.createDelay(t.maxDelayTime);return dt(e,t),rt(e,t,"delayTime"),e},Qa=s=>(t,e)=>{const n=t.createDynamicsCompressor();if(dt(n,e),e.channelCount>2||e.channelCountMode==="max")throw s();return rt(n,e,"attack"),rt(n,e,"knee"),rt(n,e,"ratio"),rt(n,e,"release"),rt(n,e,"threshold"),n},St=(s,t)=>{const e=s.createGain();return dt(e,t),rt(e,t,"gain"),e},Ja=s=>(t,e,n)=>{if(t.createIIRFilter===void 0)return s(t,e,n);const i=t.createIIRFilter(n.feedforward,n.feedback);return dt(i,n),i};function Ha(s,t){const e=t[0]*t[0]+t[1]*t[1];return[(s[0]*t[0]+s[1]*t[1])/e,(s[1]*t[0]-s[0]*t[1])/e]}function Ka(s,t){return[s[0]*t[0]-s[1]*t[1],s[0]*t[1]+s[1]*t[0]]}function Xs(s,t){let e=[0,0];for(let n=s.length-1;n>=0;n-=1)e=Ka(e,t),e[0]+=s[n];return e}const tc=(s,t,e,n)=>(i,r,{channelCount:a,channelCountMode:o,channelInterpretation:c,feedback:u,feedforward:l})=>{const h=_i(r,i.sampleRate),d=u instanceof Float64Array?u:new Float64Array(u),f=l instanceof Float64Array?l:new Float64Array(l),p=d.length,m=f.length,_=Math.min(p,m);if(p===0||p>20)throw n();if(d[0]===0)throw t();if(m===0||m>20)throw n();if(f[0]===0)throw t();if(d[0]!==1){for(let v=0;v<m;v+=1)f[v]/=d[0];for(let v=1;v<p;v+=1)d[v]/=d[0]}const y=e(i,h,a,a);y.channelCount=a,y.channelCountMode=o,y.channelInterpretation=c;const b=32,C=[],x=[],g=[];for(let v=0;v<a;v+=1){C.push(0);const O=new Float32Array(b),k=new Float32Array(b);O.fill(0),k.fill(0),x.push(O),g.push(k)}y.onaudioprocess=v=>{const O=v.inputBuffer,k=v.outputBuffer,A=O.numberOfChannels;for(let S=0;S<A;S+=1){const D=O.getChannelData(S),E=k.getChannelData(S);C[S]=mi(d,p,f,m,_,x[S],g[S],C[S],b,D,E)}};const T=i.sampleRate/2;return Ee({get bufferSize(){return h},get channelCount(){return y.channelCount},set channelCount(v){y.channelCount=v},get channelCountMode(){return y.channelCountMode},set channelCountMode(v){y.channelCountMode=v},get channelInterpretation(){return y.channelInterpretation},set channelInterpretation(v){y.channelInterpretation=v},get context(){return y.context},get inputs(){return[y]},get numberOfInputs(){return y.numberOfInputs},get numberOfOutputs(){return y.numberOfOutputs},addEventListener(...v){return y.addEventListener(v[0],v[1],v[2])},dispatchEvent(...v){return y.dispatchEvent(v[0])},getFrequencyResponse(v,O,k){if(v.length!==O.length||O.length!==k.length)throw s();const A=v.length;for(let S=0;S<A;S+=1){const D=-Math.PI*(v[S]/T),E=[Math.cos(D),Math.sin(D)],F=Xs(f,E),R=Xs(d,E),P=Ha(F,R);O[S]=Math.sqrt(P[0]*P[0]+P[1]*P[1]),k[S]=Math.atan2(P[1],P[0])}},removeEventListener(...v){return y.removeEventListener(v[0],v[1],v[2])}},y)},ec=(s,t)=>s.createMediaElementSource(t.mediaElement),nc=(s,t)=>{const e=s.createMediaStreamDestination();return dt(e,t),e.numberOfOutputs===1&&Object.defineProperty(e,"numberOfOutputs",{get:()=>0}),e},sc=(s,{mediaStream:t})=>{const e=t.getAudioTracks();e.sort((r,a)=>r.id<a.id?-1:r.id>a.id?1:0);const n=e.slice(0,1),i=s.createMediaStreamSource(new MediaStream(n));return Object.defineProperty(i,"mediaStream",{value:t}),i},ic=(s,t)=>(e,{mediaStreamTrack:n})=>{if(typeof e.createMediaStreamTrackSource=="function")return e.createMediaStreamTrackSource(n);const i=new MediaStream([n]),r=e.createMediaStreamSource(i);if(n.kind!=="audio")throw s();if(t(e))throw new TypeError;return r},rc=s=>s===null?null:s.hasOwnProperty("OfflineAudioContext")?s.OfflineAudioContext:s.hasOwnProperty("webkitOfflineAudioContext")?s.webkitOfflineAudioContext:null,oc=(s,t,e,n,i,r)=>(a,o)=>{const c=a.createOscillator();return dt(c,o),rt(c,o,"detune"),rt(c,o,"frequency"),o.periodicWave!==void 0?c.setPeriodicWave(o.periodicWave):nt(c,o,"type"),t(e,()=>e(a))||ps(c),t(n,()=>n(a))||r(c,a),t(i,()=>i(a))||fs(c),s(a,c),c},ac=s=>(t,e)=>{const n=t.createPanner();return n.orientationX===void 0?s(t,e):(dt(n,e),rt(n,e,"orientationX"),rt(n,e,"orientationY"),rt(n,e,"orientationZ"),rt(n,e,"positionX"),rt(n,e,"positionY"),rt(n,e,"positionZ"),nt(n,e,"coneInnerAngle"),nt(n,e,"coneOuterAngle"),nt(n,e,"coneOuterGain"),nt(n,e,"distanceModel"),nt(n,e,"maxDistance"),nt(n,e,"panningModel"),nt(n,e,"refDistance"),nt(n,e,"rolloffFactor"),n)},cc=(s,t,e,n,i,r,a,o,c,u)=>(l,{coneInnerAngle:h,coneOuterAngle:d,coneOuterGain:f,distanceModel:p,maxDistance:m,orientationX:_,orientationY:y,orientationZ:b,panningModel:C,positionX:x,positionY:g,positionZ:T,refDistance:w,rolloffFactor:v,...O})=>{const k=l.createPanner();if(O.channelCount>2||O.channelCountMode==="max")throw a();dt(k,O);const A={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},S=e(l,{...A,channelInterpretation:"speakers",numberOfInputs:6}),D=n(l,{...O,gain:1}),E=n(l,{...A,gain:1}),F=n(l,{...A,gain:0}),R=n(l,{...A,gain:0}),P=n(l,{...A,gain:0}),z=n(l,{...A,gain:0}),L=n(l,{...A,gain:0}),j=i(l,256,6,1),W=r(l,{...A,curve:new Float32Array([1,1]),oversample:"none"});let X=[_,y,b],xt=[x,g,T];const At=new Float32Array(1);j.onaudioprocess=({inputBuffer:V})=>{const ae=[c(V,At,0),c(V,At,1),c(V,At,2)];ae.some((we,be)=>we!==X[be])&&(k.setOrientation(...ae),X=ae);const ce=[c(V,At,3),c(V,At,4),c(V,At,5)];ce.some((we,be)=>we!==xt[be])&&(k.setPosition(...ce),xt=ce)},Object.defineProperty(F.gain,"defaultValue",{get:()=>0}),Object.defineProperty(R.gain,"defaultValue",{get:()=>0}),Object.defineProperty(P.gain,"defaultValue",{get:()=>0}),Object.defineProperty(z.gain,"defaultValue",{get:()=>0}),Object.defineProperty(L.gain,"defaultValue",{get:()=>0});const G={get bufferSize(){},get channelCount(){return k.channelCount},set channelCount(V){if(V>2)throw a();D.channelCount=V,k.channelCount=V},get channelCountMode(){return k.channelCountMode},set channelCountMode(V){if(V==="max")throw a();D.channelCountMode=V,k.channelCountMode=V},get channelInterpretation(){return k.channelInterpretation},set channelInterpretation(V){D.channelInterpretation=V,k.channelInterpretation=V},get coneInnerAngle(){return k.coneInnerAngle},set coneInnerAngle(V){k.coneInnerAngle=V},get coneOuterAngle(){return k.coneOuterAngle},set coneOuterAngle(V){k.coneOuterAngle=V},get coneOuterGain(){return k.coneOuterGain},set coneOuterGain(V){if(V<0||V>1)throw t();k.coneOuterGain=V},get context(){return k.context},get distanceModel(){return k.distanceModel},set distanceModel(V){k.distanceModel=V},get inputs(){return[D]},get maxDistance(){return k.maxDistance},set maxDistance(V){if(V<0)throw new RangeError;k.maxDistance=V},get numberOfInputs(){return k.numberOfInputs},get numberOfOutputs(){return k.numberOfOutputs},get orientationX(){return E.gain},get orientationY(){return F.gain},get orientationZ(){return R.gain},get panningModel(){return k.panningModel},set panningModel(V){k.panningModel=V},get positionX(){return P.gain},get positionY(){return z.gain},get positionZ(){return L.gain},get refDistance(){return k.refDistance},set refDistance(V){if(V<0)throw new RangeError;k.refDistance=V},get rolloffFactor(){return k.rolloffFactor},set rolloffFactor(V){if(V<0)throw new RangeError;k.rolloffFactor=V},addEventListener(...V){return D.addEventListener(V[0],V[1],V[2])},dispatchEvent(...V){return D.dispatchEvent(V[0])},removeEventListener(...V){return D.removeEventListener(V[0],V[1],V[2])}};h!==G.coneInnerAngle&&(G.coneInnerAngle=h),d!==G.coneOuterAngle&&(G.coneOuterAngle=d),f!==G.coneOuterGain&&(G.coneOuterGain=f),p!==G.distanceModel&&(G.distanceModel=p),m!==G.maxDistance&&(G.maxDistance=m),_!==G.orientationX.value&&(G.orientationX.value=_),y!==G.orientationY.value&&(G.orientationY.value=y),b!==G.orientationZ.value&&(G.orientationZ.value=b),C!==G.panningModel&&(G.panningModel=C),x!==G.positionX.value&&(G.positionX.value=x),g!==G.positionY.value&&(G.positionY.value=g),T!==G.positionZ.value&&(G.positionZ.value=T),w!==G.refDistance&&(G.refDistance=w),v!==G.rolloffFactor&&(G.rolloffFactor=v),(X[0]!==1||X[1]!==0||X[2]!==0)&&k.setOrientation(...X),(xt[0]!==0||xt[1]!==0||xt[2]!==0)&&k.setPosition(...xt);const tt=()=>{D.connect(k),s(D,W,0,0),W.connect(E).connect(S,0,0),W.connect(F).connect(S,0,1),W.connect(R).connect(S,0,2),W.connect(P).connect(S,0,3),W.connect(z).connect(S,0,4),W.connect(L).connect(S,0,5),S.connect(j).connect(l.destination)},yt=()=>{D.disconnect(k),o(D,W,0,0),W.disconnect(E),E.disconnect(S),W.disconnect(F),F.disconnect(S),W.disconnect(R),R.disconnect(S),W.disconnect(P),P.disconnect(S),W.disconnect(z),z.disconnect(S),W.disconnect(L),L.disconnect(S),S.disconnect(j),j.disconnect(l.destination)};return u(Ee(G,k),tt,yt)},uc=s=>(t,{disableNormalization:e,imag:n,real:i})=>{const r=n instanceof Float32Array?n:new Float32Array(n),a=i instanceof Float32Array?i:new Float32Array(i),o=t.createPeriodicWave(a,r,{disableNormalization:e});if(Array.from(n).length<2)throw s();return o},cn=(s,t,e,n)=>s.createScriptProcessor(t,e,n),lc=(s,t)=>(e,n)=>{const i=n.channelCountMode;if(i==="clamped-max")throw t();if(e.createStereoPanner===void 0)return s(e,n);const r=e.createStereoPanner();return dt(r,n),rt(r,n,"pan"),Object.defineProperty(r,"channelCountMode",{get:()=>i,set:a=>{if(a!==i)throw t()}}),r},hc=(s,t,e,n,i,r)=>{const o=new Float32Array([1,1]),c=Math.PI/2,u={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},l={...u,oversample:"none"},h=(p,m,_,y)=>{const b=new Float32Array(16385),C=new Float32Array(16385);for(let O=0;O<16385;O+=1){const k=O/16384*c;b[O]=Math.cos(k),C[O]=Math.sin(k)}const x=e(p,{...u,gain:0}),g=n(p,{...l,curve:b}),T=n(p,{...l,curve:o}),w=e(p,{...u,gain:0}),v=n(p,{...l,curve:C});return{connectGraph(){m.connect(x),m.connect(T.inputs===void 0?T:T.inputs[0]),m.connect(w),T.connect(_),_.connect(g.inputs===void 0?g:g.inputs[0]),_.connect(v.inputs===void 0?v:v.inputs[0]),g.connect(x.gain),v.connect(w.gain),x.connect(y,0,0),w.connect(y,0,1)},disconnectGraph(){m.disconnect(x),m.disconnect(T.inputs===void 0?T:T.inputs[0]),m.disconnect(w),T.disconnect(_),_.disconnect(g.inputs===void 0?g:g.inputs[0]),_.disconnect(v.inputs===void 0?v:v.inputs[0]),g.disconnect(x.gain),v.disconnect(w.gain),x.disconnect(y,0,0),w.disconnect(y,0,1)}}},d=(p,m,_,y)=>{const b=new Float32Array(16385),C=new Float32Array(16385),x=new Float32Array(16385),g=new Float32Array(16385),T=Math.floor(16385/2);for(let P=0;P<16385;P+=1)if(P>T){const z=(P-T)/(16384-T)*c;b[P]=Math.cos(z),C[P]=Math.sin(z),x[P]=0,g[P]=1}else{const z=P/(16384-T)*c;b[P]=1,C[P]=0,x[P]=Math.cos(z),g[P]=Math.sin(z)}const w=t(p,{channelCount:2,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:2}),v=e(p,{...u,gain:0}),O=n(p,{...l,curve:b}),k=e(p,{...u,gain:0}),A=n(p,{...l,curve:C}),S=n(p,{...l,curve:o}),D=e(p,{...u,gain:0}),E=n(p,{...l,curve:x}),F=e(p,{...u,gain:0}),R=n(p,{...l,curve:g});return{connectGraph(){m.connect(w),m.connect(S.inputs===void 0?S:S.inputs[0]),w.connect(v,0),w.connect(k,0),w.connect(D,1),w.connect(F,1),S.connect(_),_.connect(O.inputs===void 0?O:O.inputs[0]),_.connect(A.inputs===void 0?A:A.inputs[0]),_.connect(E.inputs===void 0?E:E.inputs[0]),_.connect(R.inputs===void 0?R:R.inputs[0]),O.connect(v.gain),A.connect(k.gain),E.connect(D.gain),R.connect(F.gain),v.connect(y,0,0),D.connect(y,0,0),k.connect(y,0,1),F.connect(y,0,1)},disconnectGraph(){m.disconnect(w),m.disconnect(S.inputs===void 0?S:S.inputs[0]),w.disconnect(v,0),w.disconnect(k,0),w.disconnect(D,1),w.disconnect(F,1),S.disconnect(_),_.disconnect(O.inputs===void 0?O:O.inputs[0]),_.disconnect(A.inputs===void 0?A:A.inputs[0]),_.disconnect(E.inputs===void 0?E:E.inputs[0]),_.disconnect(R.inputs===void 0?R:R.inputs[0]),O.disconnect(v.gain),A.disconnect(k.gain),E.disconnect(D.gain),R.disconnect(F.gain),v.disconnect(y,0,0),D.disconnect(y,0,0),k.disconnect(y,0,1),F.disconnect(y,0,1)}}},f=(p,m,_,y,b)=>{if(m===1)return h(p,_,y,b);if(m===2)return d(p,_,y,b);throw i()};return(p,{channelCount:m,channelCountMode:_,pan:y,...b})=>{if(_==="max")throw i();const C=s(p,{...b,channelCount:1,channelCountMode:_,numberOfInputs:2}),x=e(p,{...b,channelCount:m,channelCountMode:_,gain:1}),g=e(p,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:y});let{connectGraph:T,disconnectGraph:w}=f(p,m,x,g,C);Object.defineProperty(g.gain,"defaultValue",{get:()=>0}),Object.defineProperty(g.gain,"maxValue",{get:()=>1}),Object.defineProperty(g.gain,"minValue",{get:()=>-1});const v={get bufferSize(){},get channelCount(){return x.channelCount},set channelCount(S){x.channelCount!==S&&(O&&w(),{connectGraph:T,disconnectGraph:w}=f(p,S,x,g,C),O&&T()),x.channelCount=S},get channelCountMode(){return x.channelCountMode},set channelCountMode(S){if(S==="clamped-max"||S==="max")throw i();x.channelCountMode=S},get channelInterpretation(){return x.channelInterpretation},set channelInterpretation(S){x.channelInterpretation=S},get context(){return x.context},get inputs(){return[x]},get numberOfInputs(){return x.numberOfInputs},get numberOfOutputs(){return x.numberOfOutputs},get pan(){return g.gain},addEventListener(...S){return x.addEventListener(S[0],S[1],S[2])},dispatchEvent(...S){return x.dispatchEvent(S[0])},removeEventListener(...S){return x.removeEventListener(S[0],S[1],S[2])}};let O=!1;const k=()=>{T(),O=!0},A=()=>{w(),O=!1};return r(Ee(v,C),k,A)}},dc=(s,t,e,n,i,r,a)=>(o,c)=>{const u=o.createWaveShaper();if(r!==null&&r.name==="webkitAudioContext"&&o.createGain().gain.automationRate===void 0)return e(o,c);dt(u,c);const l=c.curve===null||c.curve instanceof Float32Array?c.curve:new Float32Array(c.curve);if(l!==null&&l.length<2)throw t();nt(u,{curve:l},"curve"),nt(u,c,"oversample");let h=null,d=!1;return a(u,"curve",m=>()=>m.call(u),m=>_=>(m.call(u,_),d&&(n(_)&&h===null?h=s(o,u):!n(_)&&h!==null&&(h(),h=null)),_)),i(u,()=>{d=!0,n(u.curve)&&(h=s(o,u))},()=>{d=!1,h!==null&&(h(),h=null)})},pc=(s,t,e,n,i)=>(r,{curve:a,oversample:o,...c})=>{const u=r.createWaveShaper(),l=r.createWaveShaper();dt(u,c),dt(l,c);const h=e(r,{...c,gain:1}),d=e(r,{...c,gain:-1}),f=e(r,{...c,gain:1}),p=e(r,{...c,gain:-1});let m=null,_=!1,y=null;const b={get bufferSize(){},get channelCount(){return u.channelCount},set channelCount(g){h.channelCount=g,d.channelCount=g,u.channelCount=g,f.channelCount=g,l.channelCount=g,p.channelCount=g},get channelCountMode(){return u.channelCountMode},set channelCountMode(g){h.channelCountMode=g,d.channelCountMode=g,u.channelCountMode=g,f.channelCountMode=g,l.channelCountMode=g,p.channelCountMode=g},get channelInterpretation(){return u.channelInterpretation},set channelInterpretation(g){h.channelInterpretation=g,d.channelInterpretation=g,u.channelInterpretation=g,f.channelInterpretation=g,l.channelInterpretation=g,p.channelInterpretation=g},get context(){return u.context},get curve(){return y},set curve(g){if(g!==null&&g.length<2)throw t();if(g===null)u.curve=g,l.curve=g;else{const T=g.length,w=new Float32Array(T+2-T%2),v=new Float32Array(T+2-T%2);w[0]=g[0],v[0]=-g[T-1];const O=Math.ceil((T+1)/2),k=(T+1)/2-1;for(let A=1;A<O;A+=1){const S=A/O*k,D=Math.floor(S),E=Math.ceil(S);w[A]=D===E?g[D]:(1-(S-D))*g[D]+(1-(E-S))*g[E],v[A]=D===E?-g[T-1-D]:-((1-(S-D))*g[T-1-D])-(1-(E-S))*g[T-1-E]}w[O]=T%2===1?g[O-1]:(g[O-2]+g[O-1])/2,u.curve=w,l.curve=v}y=g,_&&(n(y)&&m===null?m=s(r,h):m!==null&&(m(),m=null))},get inputs(){return[h]},get numberOfInputs(){return u.numberOfInputs},get numberOfOutputs(){return u.numberOfOutputs},get oversample(){return u.oversample},set oversample(g){u.oversample=g,l.oversample=g},addEventListener(...g){return h.addEventListener(g[0],g[1],g[2])},dispatchEvent(...g){return h.dispatchEvent(g[0])},removeEventListener(...g){return h.removeEventListener(g[0],g[1],g[2])}};a!==null&&(b.curve=a instanceof Float32Array?a:new Float32Array(a)),o!==b.oversample&&(b.oversample=o);const C=()=>{h.connect(u).connect(f),h.connect(d).connect(l).connect(p).connect(f),_=!0,n(y)&&(m=s(r,h))},x=()=>{h.disconnect(u),u.disconnect(f),h.disconnect(d),d.disconnect(l),l.disconnect(p),p.disconnect(f),_=!1,m!==null&&(m(),m=null)};return i(Ee(b,f),C,x)},wt=()=>new DOMException("","NotSupportedError"),fc={numberOfChannels:1},mc=(s,t,e,n,i)=>class extends s{constructor(a,o,c){let u;if(typeof a=="number"&&o!==void 0&&c!==void 0)u={length:o,numberOfChannels:a,sampleRate:c};else if(typeof a=="object")u=a;else throw new Error("The given parameters are not valid.");const{length:l,numberOfChannels:h,sampleRate:d}={...fc,...u},f=n(h,l,d);t(Be,()=>Be(f))||f.addEventListener("statechange",(()=>{let p=0;const m=_=>{this._state==="running"&&(p>0?(f.removeEventListener("statechange",m),_.stopImmediatePropagation(),this._waitForThePromiseToSettle(_)):p+=1)};return m})()),super(f,h),this._length=l,this._nativeOfflineAudioContext=f,this._state=null}get length(){return this._nativeOfflineAudioContext.length===void 0?this._length:this._nativeOfflineAudioContext.length}get state(){return this._state===null?this._nativeOfflineAudioContext.state:this._state}startRendering(){return this._state==="running"?Promise.reject(e()):(this._state="running",i(this.destination,this._nativeOfflineAudioContext).finally(()=>{this._state=null,ui(this)}))}_waitForThePromiseToSettle(a){this._state===null?this._nativeOfflineAudioContext.dispatchEvent(a):setTimeout(()=>this._waitForThePromiseToSettle(a))}},_c={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:440,periodicWave:void 0,type:"sine"},gc=(s,t,e,n,i,r,a)=>class extends s{constructor(c,u){const l=i(c),h={..._c,...u},d=e(l,h),f=r(l),p=f?n():null,m=c.sampleRate/2;super(c,!1,d,p),this._detune=t(this,f,d.detune,153600,-153600),this._frequency=t(this,f,d.frequency,m,-m),this._nativeOscillatorNode=d,this._onended=null,this._oscillatorNodeRenderer=p,this._oscillatorNodeRenderer!==null&&h.periodicWave!==void 0&&(this._oscillatorNodeRenderer.periodicWave=h.periodicWave)}get detune(){return this._detune}get frequency(){return this._frequency}get onended(){return this._onended}set onended(c){const u=typeof c=="function"?a(this,c):null;this._nativeOscillatorNode.onended=u;const l=this._nativeOscillatorNode.onended;this._onended=l!==null&&l===u?c:l}get type(){return this._nativeOscillatorNode.type}set type(c){this._nativeOscillatorNode.type=c,this._oscillatorNodeRenderer!==null&&(this._oscillatorNodeRenderer.periodicWave=null)}setPeriodicWave(c){this._nativeOscillatorNode.setPeriodicWave(c),this._oscillatorNodeRenderer!==null&&(this._oscillatorNodeRenderer.periodicWave=c)}start(c=0){if(this._nativeOscillatorNode.start(c),this._oscillatorNodeRenderer!==null&&(this._oscillatorNodeRenderer.start=c),this.context.state!=="closed"){Ne(this);const u=()=>{this._nativeOscillatorNode.removeEventListener("ended",u),Zt(this)&&sn(this)};this._nativeOscillatorNode.addEventListener("ended",u)}}stop(c=0){this._nativeOscillatorNode.stop(c),this._oscillatorNodeRenderer!==null&&(this._oscillatorNodeRenderer.stop=c)}},yc=(s,t,e,n,i)=>()=>{const r=new WeakMap;let a=null,o=null,c=null;const u=async(l,h)=>{let d=e(l);const f=gt(d,h);if(!f){const p={channelCount:d.channelCount,channelCountMode:d.channelCountMode,channelInterpretation:d.channelInterpretation,detune:d.detune.value,frequency:d.frequency.value,periodicWave:a===null?void 0:a,type:d.type};d=t(h,p),o!==null&&d.start(o),c!==null&&d.stop(c)}return r.set(h,d),f?(await s(h,l.detune,d.detune),await s(h,l.frequency,d.frequency)):(await n(h,l.detune,d.detune),await n(h,l.frequency,d.frequency)),await i(l,h,d),d};return{set periodicWave(l){a=l},set start(l){o=l},set stop(l){c=l},render(l,h){const d=r.get(h);return d!==void 0?Promise.resolve(d):u(l,h)}}},vc={channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:1,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1},Tc=(s,t,e,n,i,r,a)=>class extends s{constructor(c,u){const l=i(c),h={...vc,...u},d=e(l,h),f=r(l),p=f?n():null;super(c,!1,d,p),this._nativePannerNode=d,this._orientationX=t(this,f,d.orientationX,vt,bt),this._orientationY=t(this,f,d.orientationY,vt,bt),this._orientationZ=t(this,f,d.orientationZ,vt,bt),this._positionX=t(this,f,d.positionX,vt,bt),this._positionY=t(this,f,d.positionY,vt,bt),this._positionZ=t(this,f,d.positionZ,vt,bt),a(this,1)}get coneInnerAngle(){return this._nativePannerNode.coneInnerAngle}set coneInnerAngle(c){this._nativePannerNode.coneInnerAngle=c}get coneOuterAngle(){return this._nativePannerNode.coneOuterAngle}set coneOuterAngle(c){this._nativePannerNode.coneOuterAngle=c}get coneOuterGain(){return this._nativePannerNode.coneOuterGain}set coneOuterGain(c){this._nativePannerNode.coneOuterGain=c}get distanceModel(){return this._nativePannerNode.distanceModel}set distanceModel(c){this._nativePannerNode.distanceModel=c}get maxDistance(){return this._nativePannerNode.maxDistance}set maxDistance(c){this._nativePannerNode.maxDistance=c}get orientationX(){return this._orientationX}get orientationY(){return this._orientationY}get orientationZ(){return this._orientationZ}get panningModel(){return this._nativePannerNode.panningModel}set panningModel(c){this._nativePannerNode.panningModel=c}get positionX(){return this._positionX}get positionY(){return this._positionY}get positionZ(){return this._positionZ}get refDistance(){return this._nativePannerNode.refDistance}set refDistance(c){this._nativePannerNode.refDistance=c}get rolloffFactor(){return this._nativePannerNode.rolloffFactor}set rolloffFactor(c){this._nativePannerNode.rolloffFactor=c}},wc=(s,t,e,n,i,r,a,o,c,u)=>()=>{const l=new WeakMap;let h=null;const d=async(f,p)=>{let m=null,_=r(f);const y={channelCount:_.channelCount,channelCountMode:_.channelCountMode,channelInterpretation:_.channelInterpretation},b={...y,coneInnerAngle:_.coneInnerAngle,coneOuterAngle:_.coneOuterAngle,coneOuterGain:_.coneOuterGain,distanceModel:_.distanceModel,maxDistance:_.maxDistance,panningModel:_.panningModel,refDistance:_.refDistance,rolloffFactor:_.rolloffFactor},C=gt(_,p);if("bufferSize"in _)m=n(p,{...y,gain:1});else if(!C){const x={...b,orientationX:_.orientationX.value,orientationY:_.orientationY.value,orientationZ:_.orientationZ.value,positionX:_.positionX.value,positionY:_.positionY.value,positionZ:_.positionZ.value};_=i(p,x)}if(l.set(p,m===null?_:m),m!==null){if(h===null){if(a===null)throw new Error("Missing the native OfflineAudioContext constructor.");const A=new a(6,f.context.length,p.sampleRate),S=t(A,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6});S.connect(A.destination),h=(async()=>{const D=await Promise.all([f.orientationX,f.orientationY,f.orientationZ,f.positionX,f.positionY,f.positionZ].map(async(E,F)=>{const R=e(A,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:F===0?1:0});return await o(A,E,R.offset),R}));for(let E=0;E<6;E+=1)D[E].connect(S,0,E),D[E].start(0);return u(A)})()}const x=await h,g=n(p,{...y,gain:1});await c(f,p,g);const T=[];for(let A=0;A<x.numberOfChannels;A+=1)T.push(x.getChannelData(A));let w=[T[0][0],T[1][0],T[2][0]],v=[T[3][0],T[4][0],T[5][0]],O=n(p,{...y,gain:1}),k=i(p,{...b,orientationX:w[0],orientationY:w[1],orientationZ:w[2],positionX:v[0],positionY:v[1],positionZ:v[2]});g.connect(O).connect(k.inputs[0]),k.connect(m);for(let A=128;A<x.length;A+=128){const S=[T[0][A],T[1][A],T[2][A]],D=[T[3][A],T[4][A],T[5][A]];if(S.some((E,F)=>E!==w[F])||D.some((E,F)=>E!==v[F])){w=S,v=D;const E=A/p.sampleRate;O.gain.setValueAtTime(0,E),O=n(p,{...y,gain:0}),k=i(p,{...b,orientationX:w[0],orientationY:w[1],orientationZ:w[2],positionX:v[0],positionY:v[1],positionZ:v[2]}),O.gain.setValueAtTime(1,E),g.connect(O).connect(k.inputs[0]),k.connect(m)}}return m}return C?(await s(p,f.orientationX,_.orientationX),await s(p,f.orientationY,_.orientationY),await s(p,f.orientationZ,_.orientationZ),await s(p,f.positionX,_.positionX),await s(p,f.positionY,_.positionY),await s(p,f.positionZ,_.positionZ)):(await o(p,f.orientationX,_.orientationX),await o(p,f.orientationY,_.orientationY),await o(p,f.orientationZ,_.orientationZ),await o(p,f.positionX,_.positionX),await o(p,f.positionY,_.positionY),await o(p,f.positionZ,_.positionZ)),Ie(_)?await c(f,p,_.inputs[0]):await c(f,p,_),_};return{render(f,p){const m=l.get(p);return m!==void 0?Promise.resolve(m):d(f,p)}}},bc={disableNormalization:!1},Cc=(s,t,e,n)=>class vi{constructor(r,a){const o=t(r),c=n({...bc,...a}),u=s(o,c);return e.add(u),u}static[Symbol.hasInstance](r){return r!==null&&typeof r=="object"&&Object.getPrototypeOf(r)===vi.prototype||e.has(r)}},Sc=(s,t)=>(e,n,i)=>(s(n).replay(i),t(n,e,i)),xc=(s,t,e)=>async(n,i,r)=>{const a=s(n);await Promise.all(a.activeInputs.map((o,c)=>Array.from(o).map(async([u,l])=>{const d=await t(u).render(u,i),f=n.context.destination;!e(u)&&(n!==f||!e(n))&&d.connect(r,l,c)})).reduce((o,c)=>[...o,...c],[]))},Ac=(s,t,e)=>async(n,i,r)=>{const a=t(n);await Promise.all(Array.from(a.activeInputs).map(async([o,c])=>{const l=await s(o).render(o,i);e(o)||l.connect(r,c)}))},kc=(s,t,e,n)=>i=>s(Be,()=>Be(i))?Promise.resolve(s(n,n)).then(r=>{if(!r){const a=e(i,512,0,1);i.oncomplete=()=>{a.onaudioprocess=null,a.disconnect()},a.onaudioprocess=()=>i.currentTime,a.connect(i.destination)}return i.startRendering()}):new Promise(r=>{const a=t(i,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});i.oncomplete=o=>{a.disconnect(),r(o.renderedBuffer)},a.connect(i.destination),i.startRendering()}),Nc=s=>(t,e)=>{s.set(t,e)},Oc=s=>(t,e)=>s.set(t,e),Mc=(s,t,e,n,i,r,a,o)=>(c,u)=>e(c).render(c,u).then(()=>Promise.all(Array.from(n(u)).map(l=>e(l).render(l,u)))).then(()=>i(u)).then(l=>(typeof l.copyFromChannel!="function"?(a(l),ls(l)):t(r,()=>r(l))||o(l),s.add(l),l)),Ic={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",pan:0},Ec=(s,t,e,n,i,r)=>class extends s{constructor(o,c){const u=i(o),l={...Ic,...c},h=e(u,l),d=r(u),f=d?n():null;super(o,!1,h,f),this._pan=t(this,d,h.pan)}get pan(){return this._pan}},Dc=(s,t,e,n,i)=>()=>{const r=new WeakMap,a=async(o,c)=>{let u=e(o);const l=gt(u,c);if(!l){const h={channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,pan:u.pan.value};u=t(c,h)}return r.set(c,u),l?await s(c,o.pan,u.pan):await n(c,o.pan,u.pan),Ie(u)?await i(o,c,u.inputs[0]):await i(o,c,u),u};return{render(o,c){const u=r.get(c);return u!==void 0?Promise.resolve(u):a(o,c)}}},Rc=s=>()=>{if(s===null)return!1;try{new s({length:1,sampleRate:44100})}catch{return!1}return!0},Pc=(s,t)=>async()=>{if(s===null)return!0;if(t===null)return!1;const e=new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),n=new t(1,128,44100),i=URL.createObjectURL(e);let r=!1,a=!1;try{await n.audioWorklet.addModule(i);const o=new s(n,"a",{numberOfOutputs:0}),c=n.createOscillator();o.port.onmessage=()=>r=!0,o.onprocessorerror=()=>a=!0,c.connect(o),c.start(0),await n.startRendering(),await new Promise(u=>setTimeout(u))}catch{}finally{URL.revokeObjectURL(i)}return r&&!a},Vc=(s,t)=>()=>{if(t===null)return Promise.resolve(!1);const e=new t(1,1,44100),n=s(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return new Promise(i=>{e.oncomplete=()=>{n.disconnect(),i(e.currentTime!==0)},e.startRendering()})},Fc=()=>new DOMException("","UnknownError"),Lc={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",curve:null,oversample:"none"},qc=(s,t,e,n,i,r,a)=>class extends s{constructor(c,u){const l=i(c),h={...Lc,...u},d=e(l,h),p=r(l)?n():null;super(c,!0,d,p),this._isCurveNullified=!1,this._nativeWaveShaperNode=d,a(this,1)}get curve(){return this._isCurveNullified?null:this._nativeWaveShaperNode.curve}set curve(c){if(c===null)this._isCurveNullified=!0,this._nativeWaveShaperNode.curve=new Float32Array([0,0]);else{if(c.length<2)throw t();this._isCurveNullified=!1,this._nativeWaveShaperNode.curve=c}}get oversample(){return this._nativeWaveShaperNode.oversample}set oversample(c){this._nativeWaveShaperNode.oversample=c}},Wc=(s,t,e)=>()=>{const n=new WeakMap,i=async(r,a)=>{let o=t(r);if(!gt(o,a)){const u={channelCount:o.channelCount,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,curve:o.curve,oversample:o.oversample};o=s(a,u)}return n.set(a,o),Ie(o)?await e(r,a,o.inputs[0]):await e(r,a,o),o};return{render(r,a){const o=n.get(a);return o!==void 0?Promise.resolve(o):i(r,a)}}},Bc=()=>typeof window>"u"?null:window,jc=(s,t)=>e=>{e.copyFromChannel=(n,i,r=0)=>{const a=s(r),o=s(i);if(o>=e.numberOfChannels)throw t();const c=e.length,u=e.getChannelData(o),l=n.length;for(let h=a<0?-a:0;h+a<c&&h<l;h+=1)n[h]=u[h+a]},e.copyToChannel=(n,i,r=0)=>{const a=s(r),o=s(i);if(o>=e.numberOfChannels)throw t();const c=e.length,u=e.getChannelData(o),l=n.length;for(let h=a<0?-a:0;h+a<c&&h<l;h+=1)u[h+a]=n[h]}},Uc=s=>t=>{t.copyFromChannel=(e=>(n,i,r=0)=>{const a=s(r),o=s(i);if(a<t.length)return e.call(t,n,o,a)})(t.copyFromChannel),t.copyToChannel=(e=>(n,i,r=0)=>{const a=s(r),o=s(i);if(a<t.length)return e.call(t,n,o,a)})(t.copyToChannel)},zc=s=>(t,e)=>{const n=e.createBuffer(1,1,44100);t.buffer===null&&(t.buffer=n),s(t,"buffer",i=>()=>{const r=i.call(t);return r===n?null:r},i=>r=>i.call(t,r===null?n:r))},Gc=(s,t)=>(e,n)=>{n.channelCount=1,n.channelCountMode="explicit",Object.defineProperty(n,"channelCount",{get:()=>1,set:()=>{throw s()}}),Object.defineProperty(n,"channelCountMode",{get:()=>"explicit",set:()=>{throw s()}});const i=e.createBufferSource();t(n,()=>{const o=n.numberOfInputs;for(let c=0;c<o;c+=1)i.connect(n,0,c)},()=>i.disconnect(n))},Ti=(s,t,e)=>s.copyFromChannel===void 0?s.getChannelData(e)[0]:(s.copyFromChannel(t,e),t[0]),wi=s=>{if(s===null)return!1;const t=s.length;return t%2!==0?s[Math.floor(t/2)]!==0:s[t/2-1]+s[t/2]!==0},un=(s,t,e,n)=>{let i=s;for(;!i.hasOwnProperty(t);)i=Object.getPrototypeOf(i);const{get:r,set:a}=Object.getOwnPropertyDescriptor(i,t);Object.defineProperty(s,t,{get:e(r),set:n(a)})},$c=s=>({...s,outputChannelCount:s.outputChannelCount!==void 0?s.outputChannelCount:s.numberOfInputs===1&&s.numberOfOutputs===1?[s.channelCount]:Array.from({length:s.numberOfOutputs},()=>1)}),Zc=s=>({...s,channelCount:s.numberOfOutputs}),Xc=s=>{const{imag:t,real:e}=s;return t===void 0?e===void 0?{...s,imag:[0,0],real:[0,0]}:{...s,imag:Array.from(e,()=>0),real:e}:e===void 0?{...s,imag:t,real:Array.from(t,()=>0)}:{...s,imag:t,real:e}},bi=(s,t,e)=>{try{s.setValueAtTime(t,e)}catch(n){if(n.code!==9)throw n;bi(s,t,e+1e-7)}},Yc=s=>{const t=s.createBufferSource();t.start();try{t.start()}catch{return!0}return!1},Qc=s=>{const t=s.createBufferSource(),e=s.createBuffer(1,1,44100);t.buffer=e;try{t.start(0,1)}catch{return!1}return!0},Jc=s=>{const t=s.createBufferSource();t.start();try{t.stop()}catch{return!1}return!0},ms=s=>{const t=s.createOscillator();try{t.start(-1)}catch(e){return e instanceof RangeError}return!1},Ci=s=>{const t=s.createBuffer(1,1,44100),e=s.createBufferSource();e.buffer=t,e.start(),e.stop();try{return e.stop(),!0}catch{return!1}},_s=s=>{const t=s.createOscillator();try{t.stop(-1)}catch(e){return e instanceof RangeError}return!1},Hc=s=>{const{port1:t,port2:e}=new MessageChannel;try{t.postMessage(s)}finally{t.close(),e.close()}},Kc=s=>{s.start=(t=>(e=0,n=0,i)=>{const r=s.buffer,a=r===null?n:Math.min(r.duration,n);r!==null&&a>r.duration-.5/s.context.sampleRate?t.call(s,e,0,0):t.call(s,e,a,i)})(s.start)},Si=(s,t)=>{const e=t.createGain();s.connect(e);const n=(i=>()=>{i.call(s,e),s.removeEventListener("ended",n)})(s.disconnect);s.addEventListener("ended",n),Ee(s,e),s.stop=(i=>{let r=!1;return(a=0)=>{if(r)try{i.call(s,a)}catch{e.gain.setValueAtTime(0,a)}else i.call(s,a),r=!0}})(s.stop)},De=(s,t)=>e=>{const n={value:s};return Object.defineProperties(e,{currentTarget:n,target:n}),typeof t=="function"?t.call(s,e):t.handleEvent.call(s,e)},tu=vr(ye),eu=xr(ye),nu=Lo(qn),xi=new WeakMap,su=na(xi),Vt=fo(new Map,new WeakMap),qt=Bc(),Ai=Ea(Vt,Bt),gs=ea(Tt),mt=xc(Tt,gs,he),iu=Mr(Ai,K,mt),H=ra(Ln),Qt=rc(qt),Y=ba(Qt),ki=new WeakMap,Ni=Xo(De),ln=Va(qt),ys=ya(ln),vs=va(qt),Oi=Ta(qt),je=La(qt),lt=eo(Tr(ni),Sr(tu,eu,Sn,nu,xn,Tt,su,nn,K,ye,Zt,he,gn),Vt,pa(Kn,xn,Tt,K,We,Zt),Bt,Wn,wt,Ro(Sn,Kn,Tt,K,We,H,Zt,Y),Bo(ki,Tt,Pt),Ni,H,ys,vs,Oi,Y,je),ru=Or(lt,iu,Bt,Ai,H,Y),Ts=new WeakSet,Ys=Da(qt),Mi=ko(new Uint32Array(1)),ws=jc(Mi,Bt),bs=Uc(Mi),ou=Er(Ts,Vt,wt,Ys,Qt,Rc(Ys),ws,bs),Bn=Ar(St),Ii=Ac(gs,rn,he),jt=wo(Ii),Re=Pa(Bn,Vt,Yc,Qc,Jc,ms,Ci,_s,Kc,zc(un),Si),Ut=Sc(sa(rn),Ii),au=Pr(jt,Re,K,Ut,mt),Ft=no(wr(si),ki,us,so,pr,fr,mr,_r,gr,Qn,ti,ln,bi),cu=Rr(lt,au,Ft,ft,Re,H,Y,De),uu=zr(lt,Gr,Bt,ft,Fa(St,un),H,Y,mt),lu=po(jt,gi,K,Ut,mt),ve=Oc(xi),hu=ho(lt,Ft,lu,Wn,gi,H,Y,ve),re=Ma(ye,vs),du=Gc(ft,re),oe=Ga(ln,du),pu=go(oe,K,mt),fu=_o(lt,pu,oe,H,Y),mu=To(an,K,mt),_u=vo(lt,mu,an,H,Y,Zc),gu=Xa(Bn,Re,St,re),Pe=Za(Bn,Vt,gu,ms,_s),yu=Ao(jt,Pe,K,Ut,mt),vu=xo(lt,Ft,yu,Pe,H,Y,De),Ei=Ya(wt,un),Tu=Mo(Ei,K,mt),wu=Oo(lt,Tu,Ei,H,Y,ve),bu=Fo(jt,yi,K,Ut,mt),Cu=Vo(lt,Ft,bu,yi,H,Y,ve),Di=Qa(wt),Su=Go(jt,Di,K,Ut,mt),xu=zo(lt,Ft,Su,Di,wt,H,Y,ve),Au=Ko(jt,St,K,Ut,mt),ku=Ho(lt,Ft,Au,St,H,Y),Nu=tc(Wn,ft,cn,wt),jn=kc(Vt,St,cn,Vc(St,Qt)),Ou=da(Re,K,Qt,mt,jn),Mu=Ja(Nu),Iu=la(lt,Mu,Ou,H,Y,ve),Eu=$r(Ft,oe,Pe,cn,wt,Ti,Y,un),Ri=new WeakMap,Du=Oa(uu,Eu,Ni,Y,Ri,De),Pi=oc(Bn,Vt,ms,Ci,_s,Si),Ru=yc(jt,Pi,K,Ut,mt),Pu=gc(lt,Ft,Pi,Ru,H,Y,De),Vi=Co(Re),Vu=pc(Vi,ft,St,wi,re),Un=dc(Vi,ft,Vu,wi,re,ln,un),Fu=cc(Sn,ft,oe,St,cn,Un,wt,xn,Ti,re),Fi=ac(Fu),Lu=wc(jt,oe,Pe,St,Fi,K,Qt,Ut,mt,jn),qu=Tc(lt,Ft,Fi,Lu,H,Y,ve),Wu=uc(Bt),Bu=Cc(Wu,H,new WeakSet,Xc),ju=hc(oe,an,St,Un,wt,re),Li=lc(ju,wt),Uu=Dc(jt,Li,K,Ut,mt),zu=Ec(lt,Ft,Li,Uu,H,Y),Gu=Wc(Un,K,mt),$u=qc(lt,ft,Un,Gu,H,Y,ve),qi=Ca(qt),Cs=Yo(qt),Wi=new WeakMap,Zu=oa(Wi,Qt),Xu=qi?Cr(Vt,wt,Zo(qt),Cs,Qo(yr),H,Zu,Y,je,new WeakMap,new WeakMap,Pc(je,Qt),qt):void 0,Yu=wa(ys,Y),Qu=Do(Ts,Vt,Eo,$o,new WeakSet,H,Yu,bn,Be,ws,bs),Bi=uo(Xu,ru,ou,cu,hu,fu,_u,vu,wu,Qu,Cu,xu,ku,Iu,Du,Pu,qu,Bu,zu,$u),Ju=Sa(lt,ec,H,Y),Hu=Aa(lt,nc,H,Y),Ku=ka(lt,sc,H,Y),tl=ic(ft,Y),el=Na(lt,tl,H),nl=Ur(Bi,ft,wt,Fc,Ju,Hu,Ku,el,ln),Ss=aa(Ri),sl=kr(Ss),ji=bo(Bt),il=qo(Ss),Ui=jo(Bt),zi=new WeakMap,rl=ta(zi,Pt),ol=za(ji,Bt,ft,oe,an,Pe,St,cn,wt,Ui,Cs,rl,re),al=Wa(ft,ol,St,wt,re),cl=co(jt,ji,Re,oe,an,Pe,St,il,Ui,Cs,K,je,Qt,Ut,mt,jn),ul=ia(Wi),ll=Nc(zi),Qs=qi?ro(sl,lt,Ft,cl,al,Tt,ul,H,Y,je,$c,ll,Hc,De):void 0,hl=Io(wt,Qt),dl=Mc(Ts,Vt,gs,Ss,jn,bn,ws,bs),pl=mc(Bi,Vt,ft,hl,dl),fl=fa(Ln,ys),ml=ma(cs,vs),_l=_a(us,Oi),gl=ga(Ln,Y);function B(s,t){if(!s)throw new Error(t)}function se(s,t,e=1/0){if(!(t<=s&&s<=e))throw new RangeError(`Value must be within [${t}, ${e}], got: ${s}`)}function Gi(s){!s.isOffline&&s.state!=="running"&&Zi('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.')}let $i=console;function yl(...s){$i.log(...s)}function Zi(...s){$i.warn(...s)}function Mt(s){return typeof s>"u"}function $(s){return!Mt(s)}function vl(s){return typeof s=="function"}function de(s){return typeof s=="number"}function le(s){return Object.prototype.toString.call(s)==="[object Object]"&&s.constructor===Object}function Tl(s){return typeof s=="boolean"}function Rt(s){return Array.isArray(s)}function Wt(s){return typeof s=="string"}function mn(s){return Wt(s)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(s)}function wl(s){return new nl(s)}function bl(s,t,e){return new pl(s,t,e)}const Xt=typeof self=="object"?self:null,Cl=Xt&&(Xt.hasOwnProperty("AudioContext")||Xt.hasOwnProperty("webkitAudioContext"));function Sl(s,t,e){return B($(Qs),"This node only works in a secure context (https or localhost)"),new Qs(s,t,e)}function Lt(s,t,e,n){var i=arguments.length,r=i<3?t:n===null?n=Object.getOwnPropertyDescriptor(t,e):n,a;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")r=Reflect.decorate(s,t,e,n);else for(var o=s.length-1;o>=0;o--)(a=s[o])&&(r=(i<3?a(r):i>3?a(t,e,r):a(t,e))||r);return i>3&&r&&Object.defineProperty(t,e,r),r}function ot(s,t,e,n){function i(r){return r instanceof e?r:new e(function(a){a(r)})}return new(e||(e=Promise))(function(r,a){function o(l){try{u(n.next(l))}catch(h){a(h)}}function c(l){try{u(n.throw(l))}catch(h){a(h)}}function u(l){l.done?r(l.value):i(l.value).then(o,c)}u((n=n.apply(s,t||[])).next())})}class xl{constructor(t,e,n){this._callback=t,this._type=e,this._updateInterval=n,this._createClock()}_createWorker(){const t=new Blob([`
			// the initial timeout time
			let timeoutTime =  ${(this._updateInterval*1e3).toFixed(1)};
			// onmessage callback
			self.onmessage = function(msg){
				timeoutTime = parseInt(msg.data);
			};
			// the tick function which posts a message
			// and schedules a new tick
			function tick(){
				setTimeout(tick, timeoutTime);
				self.postMessage('tick');
			}
			// call tick initially
			tick();
			`],{type:"text/javascript"}),e=URL.createObjectURL(t),n=new Worker(e);n.onmessage=this._callback.bind(this),this._worker=n}_createTimeout(){this._timeout=setTimeout(()=>{this._createTimeout(),this._callback()},this._updateInterval*1e3)}_createClock(){if(this._type==="worker")try{this._createWorker()}catch{this._type="timeout",this._createClock()}else this._type==="timeout"&&this._createTimeout()}_disposeClock(){this._timeout&&(clearTimeout(this._timeout),this._timeout=0),this._worker&&(this._worker.terminate(),this._worker.onmessage=null)}get updateInterval(){return this._updateInterval}set updateInterval(t){this._updateInterval=Math.max(t,128/44100),this._type==="worker"&&this._worker.postMessage(Math.max(t*1e3,1))}get type(){return this._type}set type(t){this._disposeClock(),this._type=t,this._createClock()}dispose(){this._disposeClock()}}function pe(s){return _l(s)}function ne(s){return ml(s)}function yn(s){return gl(s)}function Ce(s){return fl(s)}function Xi(s){return s instanceof AudioBuffer}function Al(s,t){return s==="value"||pe(t)||ne(t)||Xi(t)}function xe(s,...t){if(!t.length)return s;const e=t.shift();if(le(s)&&le(e))for(const n in e)Al(n,e[n])?s[n]=e[n]:le(e[n])?(s[n]||Object.assign(s,{[n]:{}}),xe(s[n],e[n])):Object.assign(s,{[n]:e[n]});return xe(s,...t)}function kl(s,t){return s.length===t.length&&s.every((e,n)=>t[n]===e)}function M(s,t,e=[],n){const i={},r=Array.from(t);if(le(r[0])&&n&&!Reflect.has(r[0],n)&&(Object.keys(r[0]).some(o=>Reflect.has(s,o))||(xe(i,{[n]:r[0]}),e.splice(e.indexOf(n),1),r.shift())),r.length===1&&le(r[0]))xe(i,r[0]);else for(let a=0;a<e.length;a++)$(r[a])&&(i[e[a]]=r[a]);return xe(s,i)}function Nl(s){return s.constructor.getDefaults()}function Ae(s,t){return Mt(s)?t:s}function Js(s,t){return t.forEach(e=>{Reflect.has(s,e)&&delete s[e]}),s}/**
 * Tone.js
 * @author Yotam Mann
 * @license http://opensource.org/licenses/MIT MIT License
 * @copyright 2014-2019 Yotam Mann
 */class Jt{constructor(){this.debug=!1,this._wasDisposed=!1}static getDefaults(){return{}}log(...t){(this.debug||Xt&&this.toString()===Xt.TONE_DEBUG_CLASS)&&yl(this,...t)}dispose(){return this._wasDisposed=!0,this}get disposed(){return this._wasDisposed}toString(){return this.name}}Jt.version=Ks;const xs=1e-6;function On(s,t){return s>t+xs}function is(s,t){return On(s,t)||It(s,t)}function Yi(s,t){return s+xs<t}function It(s,t){return Math.abs(s-t)<xs}function Ol(s,t,e){return Math.max(Math.min(s,e),t)}class zt extends Jt{constructor(){super(),this.name="Timeline",this._timeline=[];const t=M(zt.getDefaults(),arguments,["memory"]);this.memory=t.memory,this.increasing=t.increasing}static getDefaults(){return{memory:1/0,increasing:!1}}get length(){return this._timeline.length}add(t){if(B(Reflect.has(t,"time"),"Timeline: events must have a time attribute"),t.time=t.time.valueOf(),this.increasing&&this.length){const e=this._timeline[this.length-1];B(is(t.time,e.time),"The time must be greater than or equal to the last scheduled time"),this._timeline.push(t)}else{const e=this._search(t.time);this._timeline.splice(e+1,0,t)}if(this.length>this.memory){const e=this.length-this.memory;this._timeline.splice(0,e)}return this}remove(t){const e=this._timeline.indexOf(t);return e!==-1&&this._timeline.splice(e,1),this}get(t,e="time"){const n=this._search(t,e);return n!==-1?this._timeline[n]:null}peek(){return this._timeline[0]}shift(){return this._timeline.shift()}getAfter(t,e="time"){const n=this._search(t,e);return n+1<this._timeline.length?this._timeline[n+1]:null}getBefore(t){const e=this._timeline.length;if(e>0&&this._timeline[e-1].time<t)return this._timeline[e-1];const n=this._search(t);return n-1>=0?this._timeline[n-1]:null}cancel(t){if(this._timeline.length>1){let e=this._search(t);if(e>=0)if(It(this._timeline[e].time,t)){for(let n=e;n>=0&&It(this._timeline[n].time,t);n--)e=n;this._timeline=this._timeline.slice(0,e)}else this._timeline=this._timeline.slice(0,e+1);else this._timeline=[]}else this._timeline.length===1&&is(this._timeline[0].time,t)&&(this._timeline=[]);return this}cancelBefore(t){const e=this._search(t);return e>=0&&(this._timeline=this._timeline.slice(e+1)),this}previousEvent(t){const e=this._timeline.indexOf(t);return e>0?this._timeline[e-1]:null}_search(t,e="time"){if(this._timeline.length===0)return-1;let n=0;const i=this._timeline.length;let r=i;if(i>0&&this._timeline[i-1][e]<=t)return i-1;for(;n<r;){let a=Math.floor(n+(r-n)/2);const o=this._timeline[a],c=this._timeline[a+1];if(It(o[e],t)){for(let u=a;u<this._timeline.length;u++){const l=this._timeline[u];if(It(l[e],t))a=u;else break}return a}else{if(Yi(o[e],t)&&On(c[e],t))return a;On(o[e],t)?r=a:n=a+1}}return-1}_iterate(t,e=0,n=this._timeline.length-1){this._timeline.slice(e,n+1).forEach(t)}forEach(t){return this._iterate(t),this}forEachBefore(t,e){const n=this._search(t);return n!==-1&&this._iterate(e,0,n),this}forEachAfter(t,e){const n=this._search(t);return this._iterate(e,n+1),this}forEachBetween(t,e,n){let i=this._search(t),r=this._search(e);return i!==-1&&r!==-1?(this._timeline[i].time!==t&&(i+=1),this._timeline[r].time===e&&(r-=1),this._iterate(n,i,r)):i===-1&&this._iterate(n,0,r),this}forEachFrom(t,e){let n=this._search(t);for(;n>=0&&this._timeline[n].time>=t;)n--;return this._iterate(e,n+1),this}forEachAtTime(t,e){const n=this._search(t);if(n!==-1&&It(this._timeline[n].time,t)){let i=n;for(let r=n;r>=0&&It(this._timeline[r].time,t);r--)i=r;this._iterate(r=>{e(r)},i,n)}return this}dispose(){return super.dispose(),this._timeline=[],this}}const Qi=[];function zn(s){Qi.push(s)}function Ml(s){Qi.forEach(t=>t(s))}const Ji=[];function Gn(s){Ji.push(s)}function Il(s){Ji.forEach(t=>t(s))}class hn extends Jt{constructor(){super(...arguments),this.name="Emitter"}on(t,e){return t.split(/\W+/).forEach(i=>{Mt(this._events)&&(this._events={}),this._events.hasOwnProperty(i)||(this._events[i]=[]),this._events[i].push(e)}),this}once(t,e){const n=(...i)=>{e(...i),this.off(t,n)};return this.on(t,n),this}off(t,e){return t.split(/\W+/).forEach(i=>{if(Mt(this._events)&&(this._events={}),this._events.hasOwnProperty(t))if(Mt(e))this._events[t]=[];else{const r=this._events[t];for(let a=r.length-1;a>=0;a--)r[a]===e&&r.splice(a,1)}}),this}emit(t,...e){if(this._events&&this._events.hasOwnProperty(t)){const n=this._events[t].slice(0);for(let i=0,r=n.length;i<r;i++)n[i].apply(this,e)}return this}static mixin(t){["on","once","off","emit"].forEach(e=>{const n=Object.getOwnPropertyDescriptor(hn.prototype,e);Object.defineProperty(t.prototype,e,n)})}dispose(){return super.dispose(),this._events=void 0,this}}class Hi extends hn{constructor(){super(...arguments),this.isOffline=!1}toJSON(){return{}}}class dn extends Hi{constructor(){super(),this.name="Context",this._constants=new Map,this._timeouts=new zt,this._timeoutIds=0,this._initialized=!1,this.isOffline=!1,this._workletModules=new Map;const t=M(dn.getDefaults(),arguments,["context"]);t.context?this._context=t.context:this._context=wl({latencyHint:t.latencyHint}),this._ticker=new xl(this.emit.bind(this,"tick"),t.clockSource,t.updateInterval),this.on("tick",this._timeoutLoop.bind(this)),this._context.onstatechange=()=>{this.emit("statechange",this.state)},this._setLatencyHint(t.latencyHint),this.lookAhead=t.lookAhead}static getDefaults(){return{clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.05}}initialize(){return this._initialized||(Ml(this),this._initialized=!0),this}createAnalyser(){return this._context.createAnalyser()}createOscillator(){return this._context.createOscillator()}createBufferSource(){return this._context.createBufferSource()}createBiquadFilter(){return this._context.createBiquadFilter()}createBuffer(t,e,n){return this._context.createBuffer(t,e,n)}createChannelMerger(t){return this._context.createChannelMerger(t)}createChannelSplitter(t){return this._context.createChannelSplitter(t)}createConstantSource(){return this._context.createConstantSource()}createConvolver(){return this._context.createConvolver()}createDelay(t){return this._context.createDelay(t)}createDynamicsCompressor(){return this._context.createDynamicsCompressor()}createGain(){return this._context.createGain()}createIIRFilter(t,e){return this._context.createIIRFilter(t,e)}createPanner(){return this._context.createPanner()}createPeriodicWave(t,e,n){return this._context.createPeriodicWave(t,e,n)}createStereoPanner(){return this._context.createStereoPanner()}createWaveShaper(){return this._context.createWaveShaper()}createMediaStreamSource(t){return B(Ce(this._context),"Not available if OfflineAudioContext"),this._context.createMediaStreamSource(t)}createMediaElementSource(t){return B(Ce(this._context),"Not available if OfflineAudioContext"),this._context.createMediaElementSource(t)}createMediaStreamDestination(){return B(Ce(this._context),"Not available if OfflineAudioContext"),this._context.createMediaStreamDestination()}decodeAudioData(t){return this._context.decodeAudioData(t)}get currentTime(){return this._context.currentTime}get state(){return this._context.state}get sampleRate(){return this._context.sampleRate}get listener(){return this.initialize(),this._listener}set listener(t){B(!this._initialized,"The listener cannot be set after initialization."),this._listener=t}get transport(){return this.initialize(),this._transport}set transport(t){B(!this._initialized,"The transport cannot be set after initialization."),this._transport=t}get draw(){return this.initialize(),this._draw}set draw(t){B(!this._initialized,"Draw cannot be set after initialization."),this._draw=t}get destination(){return this.initialize(),this._destination}set destination(t){B(!this._initialized,"The destination cannot be set after initialization."),this._destination=t}createAudioWorkletNode(t,e){return Sl(this.rawContext,t,e)}addAudioWorkletModule(t,e){return ot(this,void 0,void 0,function*(){B($(this.rawContext.audioWorklet),"AudioWorkletNode is only available in a secure context (https or localhost)"),this._workletModules.has(e)||this._workletModules.set(e,this.rawContext.audioWorklet.addModule(t)),yield this._workletModules.get(e)})}workletsAreReady(){return ot(this,void 0,void 0,function*(){const t=[];this._workletModules.forEach(e=>t.push(e)),yield Promise.all(t)})}get updateInterval(){return this._ticker.updateInterval}set updateInterval(t){this._ticker.updateInterval=t}get clockSource(){return this._ticker.type}set clockSource(t){this._ticker.type=t}get latencyHint(){return this._latencyHint}_setLatencyHint(t){let e=0;if(this._latencyHint=t,Wt(t))switch(t){case"interactive":e=.1;break;case"playback":e=.5;break;case"balanced":e=.25;break}this.lookAhead=e,this.updateInterval=e/2}get rawContext(){return this._context}now(){return this._context.currentTime+this.lookAhead}immediate(){return this._context.currentTime}resume(){return Ce(this._context)?this._context.resume():Promise.resolve()}close(){return ot(this,void 0,void 0,function*(){Ce(this._context)&&(yield this._context.close()),this._initialized&&Il(this)})}getConstant(t){if(this._constants.has(t))return this._constants.get(t);{const e=this._context.createBuffer(1,128,this._context.sampleRate),n=e.getChannelData(0);for(let r=0;r<n.length;r++)n[r]=t;const i=this._context.createBufferSource();return i.channelCount=1,i.channelCountMode="explicit",i.buffer=e,i.loop=!0,i.start(0),this._constants.set(t,i),i}}dispose(){return super.dispose(),this._ticker.dispose(),this._timeouts.dispose(),Object.keys(this._constants).map(t=>this._constants[t].disconnect()),this}_timeoutLoop(){const t=this.now();let e=this._timeouts.peek();for(;this._timeouts.length&&e&&e.time<=t;)e.callback(),this._timeouts.shift(),e=this._timeouts.peek()}setTimeout(t,e){this._timeoutIds++;const n=this.now();return this._timeouts.add({callback:t,id:this._timeoutIds,time:n+e}),this._timeoutIds}clearTimeout(t){return this._timeouts.forEach(e=>{e.id===t&&this._timeouts.remove(e)}),this}clearInterval(t){return this.clearTimeout(t)}setInterval(t,e){const n=++this._timeoutIds,i=()=>{const r=this.now();this._timeouts.add({callback:()=>{t(),i()},id:n,time:r+e})};return i(),n}}class El extends Hi{constructor(){super(...arguments),this.lookAhead=0,this.latencyHint=0,this.isOffline=!1}createAnalyser(){return{}}createOscillator(){return{}}createBufferSource(){return{}}createBiquadFilter(){return{}}createBuffer(t,e,n){return{}}createChannelMerger(t){return{}}createChannelSplitter(t){return{}}createConstantSource(){return{}}createConvolver(){return{}}createDelay(t){return{}}createDynamicsCompressor(){return{}}createGain(){return{}}createIIRFilter(t,e){return{}}createPanner(){return{}}createPeriodicWave(t,e,n){return{}}createStereoPanner(){return{}}createWaveShaper(){return{}}createMediaStreamSource(t){return{}}createMediaElementSource(t){return{}}createMediaStreamDestination(){return{}}decodeAudioData(t){return Promise.resolve({})}createAudioWorkletNode(t,e){return{}}get rawContext(){return{}}addAudioWorkletModule(t,e){return ot(this,void 0,void 0,function*(){return Promise.resolve()})}resume(){return Promise.resolve()}setTimeout(t,e){return 0}clearTimeout(t){return this}setInterval(t,e){return 0}clearInterval(t){return this}getConstant(t){return{}}get currentTime(){return 0}get state(){return{}}get sampleRate(){return 0}get listener(){return{}}get transport(){return{}}get draw(){return{}}set draw(t){}get destination(){return{}}set destination(t){}now(){return 0}immediate(){return 0}}function at(s,t){Rt(t)?t.forEach(e=>at(s,e)):Object.defineProperty(s,t,{enumerable:!0,writable:!1})}function Ki(s,t){Rt(t)?t.forEach(e=>Ki(s,e)):Object.defineProperty(s,t,{writable:!0})}const Q=()=>{};class J extends Jt{constructor(){super(),this.name="ToneAudioBuffer",this.onload=Q;const t=M(J.getDefaults(),arguments,["url","onload","onerror"]);this.reverse=t.reverse,this.onload=t.onload,t.url&&Xi(t.url)||t.url instanceof J?this.set(t.url):Wt(t.url)&&this.load(t.url).catch(t.onerror)}static getDefaults(){return{onerror:Q,onload:Q,reverse:!1}}get sampleRate(){return this._buffer?this._buffer.sampleRate:Et().sampleRate}set(t){return t instanceof J?t.loaded?this._buffer=t.get():t.onload=()=>{this.set(t),this.onload(this)}:this._buffer=t,this._reversed&&this._reverse(),this}get(){return this._buffer}load(t){return ot(this,void 0,void 0,function*(){const e=J.load(t).then(n=>{this.set(n),this.onload(this)});J.downloads.push(e);try{yield e}finally{const n=J.downloads.indexOf(e);J.downloads.splice(n,1)}return this})}dispose(){return super.dispose(),this._buffer=void 0,this}fromArray(t){const e=Rt(t)&&t[0].length>0,n=e?t.length:1,i=e?t[0].length:t.length,r=Et(),a=r.createBuffer(n,i,r.sampleRate),o=!e&&n===1?[t]:t;for(let c=0;c<n;c++)a.copyToChannel(o[c],c);return this._buffer=a,this}toMono(t){if(de(t))this.fromArray(this.toArray(t));else{let e=new Float32Array(this.length);const n=this.numberOfChannels;for(let i=0;i<n;i++){const r=this.toArray(i);for(let a=0;a<r.length;a++)e[a]+=r[a]}e=e.map(i=>i/n),this.fromArray(e)}return this}toArray(t){if(de(t))return this.getChannelData(t);if(this.numberOfChannels===1)return this.toArray(0);{const e=[];for(let n=0;n<this.numberOfChannels;n++)e[n]=this.getChannelData(n);return e}}getChannelData(t){return this._buffer?this._buffer.getChannelData(t):new Float32Array(0)}slice(t,e=this.duration){const n=Math.floor(t*this.sampleRate),i=Math.floor(e*this.sampleRate);B(n<i,"The start time must be less than the end time");const r=i-n,a=Et().createBuffer(this.numberOfChannels,r,this.sampleRate);for(let o=0;o<this.numberOfChannels;o++)a.copyToChannel(this.getChannelData(o).subarray(n,i),o);return new J(a)}_reverse(){if(this.loaded)for(let t=0;t<this.numberOfChannels;t++)this.getChannelData(t).reverse();return this}get loaded(){return this.length>0}get duration(){return this._buffer?this._buffer.duration:0}get length(){return this._buffer?this._buffer.length:0}get numberOfChannels(){return this._buffer?this._buffer.numberOfChannels:0}get reverse(){return this._reversed}set reverse(t){this._reversed!==t&&(this._reversed=t,this._reverse())}static fromArray(t){return new J().fromArray(t)}static fromUrl(t){return ot(this,void 0,void 0,function*(){return yield new J().load(t)})}static load(t){return ot(this,void 0,void 0,function*(){const e=t.match(/\[([^\]\[]+\|.+)\]$/);if(e){const o=e[1].split("|");let c=o[0];for(const u of o)if(J.supportsType(u)){c=u;break}t=t.replace(e[0],c)}const n=J.baseUrl===""||J.baseUrl.endsWith("/")?J.baseUrl:J.baseUrl+"/",i=yield fetch(n+t);if(!i.ok)throw new Error(`could not load url: ${t}`);const r=yield i.arrayBuffer();return yield Et().decodeAudioData(r)})}static supportsType(t){const e=t.split("."),n=e[e.length-1];return document.createElement("audio").canPlayType("audio/"+n)!==""}static loaded(){return ot(this,void 0,void 0,function*(){for(yield Promise.resolve();J.downloads.length;)yield J.downloads[0]})}}J.baseUrl="";J.downloads=[];class As extends dn{constructor(){super({clockSource:"offline",context:yn(arguments[0])?arguments[0]:bl(arguments[0],arguments[1]*arguments[2],arguments[2]),lookAhead:0,updateInterval:yn(arguments[0])?128/arguments[0].sampleRate:128/arguments[2]}),this.name="OfflineContext",this._currentTime=0,this.isOffline=!0,this._duration=yn(arguments[0])?arguments[0].length/arguments[0].sampleRate:arguments[1]}now(){return this._currentTime}get currentTime(){return this._currentTime}_renderClock(t){return ot(this,void 0,void 0,function*(){let e=0;for(;this._duration-this._currentTime>=0;){this.emit("tick"),this._currentTime+=128/this.sampleRate,e++;const n=Math.floor(this.sampleRate/128);t&&e%n===0&&(yield new Promise(i=>setTimeout(i,1)))}})}render(t=!0){return ot(this,void 0,void 0,function*(){yield this.workletsAreReady(),yield this._renderClock(t);const e=yield this._context.startRendering();return new J(e)})}close(){return Promise.resolve()}}const tr=new El;let Le=tr;function Et(){return Le===tr&&Cl&&Dl(new dn),Le}function Dl(s){Ce(s)?Le=new dn(s):yn(s)?Le=new As(s):Le=s}if(Xt&&!Xt.TONE_SILENCE_LOGGING){const t=` * Tone.js v${Ks} * `;console.log(`%c${t}`,"background: #000; color: #fff")}function Rl(s){return Math.pow(10,s/20)}function Pl(s){return 20*(Math.log(s)/Math.LN10)}function er(s){return Math.pow(2,s/12)}let $n=440;function Vl(){return $n}function Fl(s){$n=s}function rs(s){return Math.round(nr(s))}function nr(s){return 69+12*Math.log2(s/$n)}function Ll(s){return $n*Math.pow(2,(s-69)/12)}class ks extends Jt{constructor(t,e,n){super(),this.defaultUnits="s",this._val=e,this._units=n,this.context=t,this._expressions=this._getExpressions()}_getExpressions(){return{hz:{method:t=>this._frequencyToUnits(parseFloat(t)),regexp:/^(\d+(?:\.\d+)?)hz$/i},i:{method:t=>this._ticksToUnits(parseInt(t,10)),regexp:/^(\d+)i$/i},m:{method:t=>this._beatsToUnits(parseInt(t,10)*this._getTimeSignature()),regexp:/^(\d+)m$/i},n:{method:(t,e)=>{const n=parseInt(t,10),i=e==="."?1.5:1;return n===1?this._beatsToUnits(this._getTimeSignature())*i:this._beatsToUnits(4/n)*i},regexp:/^(\d+)n(\.?)$/i},number:{method:t=>this._expressions[this.defaultUnits].method.call(this,t),regexp:/^(\d+(?:\.\d+)?)$/},s:{method:t=>this._secondsToUnits(parseFloat(t)),regexp:/^(\d+(?:\.\d+)?)s$/},samples:{method:t=>parseInt(t,10)/this.context.sampleRate,regexp:/^(\d+)samples$/},t:{method:t=>{const e=parseInt(t,10);return this._beatsToUnits(8/(Math.floor(e)*3))},regexp:/^(\d+)t$/i},tr:{method:(t,e,n)=>{let i=0;return t&&t!=="0"&&(i+=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&e!=="0"&&(i+=this._beatsToUnits(parseFloat(e))),n&&n!=="0"&&(i+=this._beatsToUnits(parseFloat(n)/4)),i},regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/}}}valueOf(){if(this._val instanceof ks&&this.fromType(this._val),Mt(this._val))return this._noArg();if(Wt(this._val)&&Mt(this._units)){for(const t in this._expressions)if(this._expressions[t].regexp.test(this._val.trim())){this._units=t;break}}else if(le(this._val)){let t=0;for(const e in this._val)if($(this._val[e])){const n=this._val[e],i=new this.constructor(this.context,e).valueOf()*n;t+=i}return t}if($(this._units)){const t=this._expressions[this._units],e=this._val.toString().trim().match(t.regexp);return e?t.method.apply(this,e.slice(1)):t.method.call(this,this._val)}else return Wt(this._val)?parseFloat(this._val):this._val}_frequencyToUnits(t){return 1/t}_beatsToUnits(t){return 60/this._getBpm()*t}_secondsToUnits(t){return t}_ticksToUnits(t){return t*this._beatsToUnits(1)/this._getPPQ()}_noArg(){return this._now()}_getBpm(){return this.context.transport.bpm.value}_getTimeSignature(){return this.context.transport.timeSignature}_getPPQ(){return this.context.transport.PPQ}fromType(t){switch(this._units=void 0,this.defaultUnits){case"s":this._val=t.toSeconds();break;case"i":this._val=t.toTicks();break;case"hz":this._val=t.toFrequency();break;case"midi":this._val=t.toMidi();break}return this}toFrequency(){return 1/this.toSeconds()}toSamples(){return this.toSeconds()*this.context.sampleRate}toMilliseconds(){return this.toSeconds()*1e3}}class Dt extends ks{constructor(){super(...arguments),this.name="TimeClass"}_getExpressions(){return Object.assign(super._getExpressions(),{now:{method:t=>this._now()+new this.constructor(this.context,t).valueOf(),regexp:/^\+(.+)/},quantize:{method:t=>{const e=new Dt(this.context,t).valueOf();return this._secondsToUnits(this.context.transport.nextSubdivision(e))},regexp:/^@(.+)/}})}quantize(t,e=1){const n=new this.constructor(this.context,t).valueOf(),i=this.valueOf(),o=Math.round(i/n)*n-i;return i+o*e}toNotation(){const t=this.toSeconds(),e=["1m"];for(let r=1;r<9;r++){const a=Math.pow(2,r);e.push(a+"n."),e.push(a+"n"),e.push(a+"t")}e.push("0");let n=e[0],i=new Dt(this.context,e[0]).toSeconds();return e.forEach(r=>{const a=new Dt(this.context,r).toSeconds();Math.abs(a-t)<Math.abs(i-t)&&(n=r,i=a)}),n}toBarsBeatsSixteenths(){const t=this._beatsToUnits(1);let e=this.valueOf()/t;e=parseFloat(e.toFixed(4));const n=Math.floor(e/this._getTimeSignature());let i=e%1*4;e=Math.floor(e)%this._getTimeSignature();const r=i.toString();return r.length>3&&(i=parseFloat(parseFloat(r).toFixed(3))),[n,e,i].join(":")}toTicks(){const t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.round(e*this._getPPQ())}toSeconds(){return this.valueOf()}toMidi(){return rs(this.toFrequency())}_now(){return this.context.now()}}class Ot extends Dt{constructor(){super(...arguments),this.name="Frequency",this.defaultUnits="hz"}static get A4(){return Vl()}static set A4(t){Fl(t)}_getExpressions(){return Object.assign({},super._getExpressions(),{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method(t){return this.defaultUnits==="midi"?t:Ot.mtof(t)}},note:{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method(t,e){const i=ql[t.toLowerCase()]+(parseInt(e,10)+1)*12;return this.defaultUnits==="midi"?i:Ot.mtof(i)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method(t,e,n){let i=1;return t&&t!=="0"&&(i*=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&e!=="0"&&(i*=this._beatsToUnits(parseFloat(e))),n&&n!=="0"&&(i*=this._beatsToUnits(parseFloat(n)/4)),i}}})}transpose(t){return new Ot(this.context,this.valueOf()*er(t))}harmonize(t){return t.map(e=>this.transpose(e))}toMidi(){return rs(this.valueOf())}toNote(){const t=this.toFrequency(),e=Math.log2(t/Ot.A4);let n=Math.round(12*e)+57;const i=Math.floor(n/12);return i<0&&(n+=-12*i),Wl[n%12]+i.toString()}toSeconds(){return 1/super.toSeconds()}toTicks(){const t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.floor(e*this._getPPQ())}_noArg(){return 0}_frequencyToUnits(t){return t}_ticksToUnits(t){return 1/(t*60/(this._getBpm()*this._getPPQ()))}_beatsToUnits(t){return 1/super._beatsToUnits(t)}_secondsToUnits(t){return 1/t}static mtof(t){return Ll(t)}static ftom(t){return rs(t)}}const ql={cbb:-2,cb:-1,c:0,"c#":1,cx:2,dbb:0,db:1,d:2,"d#":3,dx:4,ebb:2,eb:3,e:4,"e#":5,ex:6,fbb:3,fb:4,f:5,"f#":6,fx:7,gbb:5,gb:6,g:7,"g#":8,gx:9,abb:7,ab:8,a:9,"a#":10,ax:11,bbb:9,bb:10,b:11,"b#":12,bx:13},Wl=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];class qe extends Dt{constructor(){super(...arguments),this.name="TransportTime"}_now(){return this.context.transport.seconds}}class Ct extends Jt{constructor(){super();const t=M(Ct.getDefaults(),arguments,["context"]);this.defaultContext?this.context=this.defaultContext:this.context=t.context}static getDefaults(){return{context:Et()}}now(){return this.context.currentTime+this.context.lookAhead}immediate(){return this.context.currentTime}get sampleTime(){return 1/this.context.sampleRate}get blockTime(){return 128/this.context.sampleRate}toSeconds(t){return new Dt(this.context,t).toSeconds()}toFrequency(t){return new Ot(this.context,t).toFrequency()}toTicks(t){return new qe(this.context,t).toTicks()}_getPartialProperties(t){const e=this.get();return Object.keys(e).forEach(n=>{Mt(t[n])&&delete e[n]}),e}get(){const t=Nl(this);return Object.keys(t).forEach(e=>{if(Reflect.has(this,e)){const n=this[e];$(n)&&$(n.value)&&$(n.setValueAtTime)?t[e]=n.value:n instanceof Ct?t[e]=n._getPartialProperties(t[e]):Rt(n)||de(n)||Wt(n)||Tl(n)?t[e]=n:delete t[e]}}),t}set(t){return Object.keys(t).forEach(e=>{Reflect.has(this,e)&&$(this[e])&&(this[e]&&$(this[e].value)&&$(this[e].setValueAtTime)?this[e].value!==t[e]&&(this[e].value=t[e]):this[e]instanceof Ct?this[e].set(t[e]):this[e]=t[e])}),this}}class Ns extends zt{constructor(t="stopped"){super(),this.name="StateTimeline",this._initial=t,this.setStateAtTime(this._initial,0)}getValueAtTime(t){const e=this.get(t);return e!==null?e.state:this._initial}setStateAtTime(t,e,n){return se(e,0),this.add(Object.assign({},n,{state:t,time:e})),this}getLastState(t,e){const n=this._search(e);for(let i=n;i>=0;i--){const r=this._timeline[i];if(r.state===t)return r}}getNextState(t,e){const n=this._search(e);if(n!==-1)for(let i=n;i<this._timeline.length;i++){const r=this._timeline[i];if(r.state===t)return r}}}class et extends Ct{constructor(){super(M(et.getDefaults(),arguments,["param","units","convert"])),this.name="Param",this.overridden=!1,this._minOutput=1e-7;const t=M(et.getDefaults(),arguments,["param","units","convert"]);for(B($(t.param)&&(pe(t.param)||t.param instanceof et),"param must be an AudioParam");!pe(t.param);)t.param=t.param._param;this._swappable=$(t.swappable)?t.swappable:!1,this._swappable?(this.input=this.context.createGain(),this._param=t.param,this.input.connect(this._param)):this._param=this.input=t.param,this._events=new zt(1e3),this._initialValue=this._param.defaultValue,this.units=t.units,this.convert=t.convert,this._minValue=t.minValue,this._maxValue=t.maxValue,$(t.value)&&t.value!==this._toType(this._initialValue)&&this.setValueAtTime(t.value,0)}static getDefaults(){return Object.assign(Ct.getDefaults(),{convert:!0,units:"number"})}get value(){const t=this.now();return this.getValueAtTime(t)}set value(t){this.cancelScheduledValues(this.now()),this.setValueAtTime(t,this.now())}get minValue(){return $(this._minValue)?this._minValue:this.units==="time"||this.units==="frequency"||this.units==="normalRange"||this.units==="positive"||this.units==="transportTime"||this.units==="ticks"||this.units==="bpm"||this.units==="hertz"||this.units==="samples"?0:this.units==="audioRange"?-1:this.units==="decibels"?-1/0:this._param.minValue}get maxValue(){return $(this._maxValue)?this._maxValue:this.units==="normalRange"||this.units==="audioRange"?1:this._param.maxValue}_is(t,e){return this.units===e}_assertRange(t){return $(this.maxValue)&&$(this.minValue)&&se(t,this._fromType(this.minValue),this._fromType(this.maxValue)),t}_fromType(t){return this.convert&&!this.overridden?this._is(t,"time")?this.toSeconds(t):this._is(t,"decibels")?Rl(t):this._is(t,"frequency")?this.toFrequency(t):t:this.overridden?0:t}_toType(t){return this.convert&&this.units==="decibels"?Pl(t):t}setValueAtTime(t,e){const n=this.toSeconds(e),i=this._fromType(t);return B(isFinite(i)&&isFinite(n),`Invalid argument(s) to setValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._assertRange(i),this.log(this.units,"setValueAtTime",t,n),this._events.add({time:n,type:"setValueAtTime",value:i}),this._param.setValueAtTime(i,n),this}getValueAtTime(t){const e=Math.max(this.toSeconds(t),0),n=this._events.getAfter(e),i=this._events.get(e);let r=this._initialValue;if(i===null)r=this._initialValue;else if(i.type==="setTargetAtTime"&&(n===null||n.type==="setValueAtTime")){const a=this._events.getBefore(i.time);let o;a===null?o=this._initialValue:o=a.value,i.type==="setTargetAtTime"&&(r=this._exponentialApproach(i.time,o,i.value,i.constant,e))}else if(n===null)r=i.value;else if(n.type==="linearRampToValueAtTime"||n.type==="exponentialRampToValueAtTime"){let a=i.value;if(i.type==="setTargetAtTime"){const o=this._events.getBefore(i.time);o===null?a=this._initialValue:a=o.value}n.type==="linearRampToValueAtTime"?r=this._linearInterpolate(i.time,a,n.time,n.value,e):r=this._exponentialInterpolate(i.time,a,n.time,n.value,e)}else r=i.value;return this._toType(r)}setRampPoint(t){t=this.toSeconds(t);let e=this.getValueAtTime(t);return this.cancelAndHoldAtTime(t),this._fromType(e)===0&&(e=this._toType(this._minOutput)),this.setValueAtTime(e,t),this}linearRampToValueAtTime(t,e){const n=this._fromType(t),i=this.toSeconds(e);return B(isFinite(n)&&isFinite(i),`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._assertRange(n),this._events.add({time:i,type:"linearRampToValueAtTime",value:n}),this.log(this.units,"linearRampToValueAtTime",t,i),this._param.linearRampToValueAtTime(n,i),this}exponentialRampToValueAtTime(t,e){let n=this._fromType(t);n=It(n,0)?this._minOutput:n,this._assertRange(n);const i=this.toSeconds(e);return B(isFinite(n)&&isFinite(i),`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._events.add({time:i,type:"exponentialRampToValueAtTime",value:n}),this.log(this.units,"exponentialRampToValueAtTime",t,i),this._param.exponentialRampToValueAtTime(n,i),this}exponentialRampTo(t,e,n){return n=this.toSeconds(n),this.setRampPoint(n),this.exponentialRampToValueAtTime(t,n+this.toSeconds(e)),this}linearRampTo(t,e,n){return n=this.toSeconds(n),this.setRampPoint(n),this.linearRampToValueAtTime(t,n+this.toSeconds(e)),this}targetRampTo(t,e,n){return n=this.toSeconds(n),this.setRampPoint(n),this.exponentialApproachValueAtTime(t,n,e),this}exponentialApproachValueAtTime(t,e,n){e=this.toSeconds(e),n=this.toSeconds(n);const i=Math.log(n+1)/Math.log(200);return this.setTargetAtTime(t,e,i),this.cancelAndHoldAtTime(e+n*.9),this.linearRampToValueAtTime(t,e+n),this}setTargetAtTime(t,e,n){const i=this._fromType(t);B(isFinite(n)&&n>0,"timeConstant must be a number greater than 0");const r=this.toSeconds(e);return this._assertRange(i),B(isFinite(i)&&isFinite(r),`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._events.add({constant:n,time:r,type:"setTargetAtTime",value:i}),this.log(this.units,"setTargetAtTime",t,r,n),this._param.setTargetAtTime(i,r,n),this}setValueCurveAtTime(t,e,n,i=1){n=this.toSeconds(n),e=this.toSeconds(e);const r=this._fromType(t[0])*i;this.setValueAtTime(this._toType(r),e);const a=n/(t.length-1);for(let o=1;o<t.length;o++){const c=this._fromType(t[o])*i;this.linearRampToValueAtTime(this._toType(c),e+o*a)}return this}cancelScheduledValues(t){const e=this.toSeconds(t);return B(isFinite(e),`Invalid argument to cancelScheduledValues: ${JSON.stringify(t)}`),this._events.cancel(e),this._param.cancelScheduledValues(e),this.log(this.units,"cancelScheduledValues",e),this}cancelAndHoldAtTime(t){const e=this.toSeconds(t),n=this._fromType(this.getValueAtTime(e));B(isFinite(e),`Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(t)}`),this.log(this.units,"cancelAndHoldAtTime",e,"value="+n);const i=this._events.get(e),r=this._events.getAfter(e);return i&&It(i.time,e)?r?(this._param.cancelScheduledValues(r.time),this._events.cancel(r.time)):(this._param.cancelAndHoldAtTime(e),this._events.cancel(e+this.sampleTime)):r&&(this._param.cancelScheduledValues(r.time),this._events.cancel(r.time),r.type==="linearRampToValueAtTime"?this.linearRampToValueAtTime(this._toType(n),e):r.type==="exponentialRampToValueAtTime"&&this.exponentialRampToValueAtTime(this._toType(n),e)),this._events.add({time:e,type:"setValueAtTime",value:n}),this._param.setValueAtTime(n,e),this}rampTo(t,e=.1,n){return this.units==="frequency"||this.units==="bpm"||this.units==="decibels"?this.exponentialRampTo(t,e,n):this.linearRampTo(t,e,n),this}apply(t){const e=this.context.currentTime;t.setValueAtTime(this.getValueAtTime(e),e);const n=this._events.get(e);if(n&&n.type==="setTargetAtTime"){const i=this._events.getAfter(n.time),r=i?i.time:e+2,a=(r-e)/10;for(let o=e;o<r;o+=a)t.linearRampToValueAtTime(this.getValueAtTime(o),o)}return this._events.forEachAfter(this.context.currentTime,i=>{i.type==="cancelScheduledValues"?t.cancelScheduledValues(i.time):i.type==="setTargetAtTime"?t.setTargetAtTime(i.value,i.time,i.constant):t[i.type](i.value,i.time)}),this}setParam(t){B(this._swappable,"The Param must be assigned as 'swappable' in the constructor");const e=this.input;return e.disconnect(this._param),this.apply(t),this._param=t,e.connect(this._param),this}dispose(){return super.dispose(),this._events.dispose(),this}get defaultValue(){return this._toType(this._param.defaultValue)}_exponentialApproach(t,e,n,i,r){return n+(e-n)*Math.exp(-(r-t)/i)}_linearInterpolate(t,e,n,i,r){return e+(i-e)*((r-t)/(n-t))}_exponentialInterpolate(t,e,n,i,r){return e*Math.pow(i/e,(r-t)/(n-t))}}class U extends Ct{constructor(){super(...arguments),this.name="ToneAudioNode",this._internalChannels=[]}get numberOfInputs(){return $(this.input)?pe(this.input)||this.input instanceof et?1:this.input.numberOfInputs:0}get numberOfOutputs(){return $(this.output)?this.output.numberOfOutputs:0}_isAudioNode(t){return $(t)&&(t instanceof U||ne(t))}_getInternalNodes(){const t=this._internalChannels.slice(0);return this._isAudioNode(this.input)&&t.push(this.input),this._isAudioNode(this.output)&&this.input!==this.output&&t.push(this.output),t}_setChannelProperties(t){this._getInternalNodes().forEach(n=>{n.channelCount=t.channelCount,n.channelCountMode=t.channelCountMode,n.channelInterpretation=t.channelInterpretation})}_getChannelProperties(){const t=this._getInternalNodes();B(t.length>0,"ToneAudioNode does not have any internal nodes");const e=t[0];return{channelCount:e.channelCount,channelCountMode:e.channelCountMode,channelInterpretation:e.channelInterpretation}}get channelCount(){return this._getChannelProperties().channelCount}set channelCount(t){const e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelCount:t}))}get channelCountMode(){return this._getChannelProperties().channelCountMode}set channelCountMode(t){const e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelCountMode:t}))}get channelInterpretation(){return this._getChannelProperties().channelInterpretation}set channelInterpretation(t){const e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelInterpretation:t}))}connect(t,e=0,n=0){return Ve(this,t,e,n),this}toDestination(){return this.connect(this.context.destination),this}toMaster(){return Zi("toMaster() has been renamed toDestination()"),this.toDestination()}disconnect(t,e=0,n=0){return Bl(this,t,e,n),this}chain(...t){return os(this,...t),this}fan(...t){return t.forEach(e=>this.connect(e)),this}dispose(){return super.dispose(),$(this.input)&&(this.input instanceof U?this.input.dispose():ne(this.input)&&this.input.disconnect()),$(this.output)&&(this.output instanceof U?this.output.dispose():ne(this.output)&&this.output.disconnect()),this._internalChannels=[],this}}function os(...s){const t=s.shift();s.reduce((e,n)=>(e instanceof U?e.connect(n):ne(e)&&Ve(e,n),n),t)}function Ve(s,t,e=0,n=0){for(B($(s),"Cannot connect from undefined node"),B($(t),"Cannot connect to undefined node"),(t instanceof U||ne(t))&&B(t.numberOfInputs>0,"Cannot connect to node with no inputs"),B(s.numberOfOutputs>0,"Cannot connect from node with no outputs");t instanceof U||t instanceof et;)$(t.input)&&(t=t.input);for(;s instanceof U;)$(s.output)&&(s=s.output);pe(t)?s.connect(t,e):s.connect(t,e,n)}function Bl(s,t,e=0,n=0){if($(t))for(;t instanceof U;)t=t.input;for(;!ne(s);)$(s.output)&&(s=s.output);pe(t)?s.disconnect(t,e):ne(t)?s.disconnect(t,e,n):s.disconnect()}class _t extends U{constructor(){super(M(_t.getDefaults(),arguments,["gain","units"])),this.name="Gain",this._gainNode=this.context.createGain(),this.input=this._gainNode,this.output=this._gainNode;const t=M(_t.getDefaults(),arguments,["gain","units"]);this.gain=new et({context:this.context,convert:t.convert,param:this._gainNode.gain,units:t.units,value:t.gain,minValue:t.minValue,maxValue:t.maxValue}),at(this,"gain")}static getDefaults(){return Object.assign(U.getDefaults(),{convert:!0,gain:1,units:"gain"})}dispose(){return super.dispose(),this._gainNode.disconnect(),this.gain.dispose(),this}}class Oe extends U{constructor(t){super(t),this.onended=Q,this._startTime=-1,this._stopTime=-1,this._timeout=-1,this.output=new _t({context:this.context,gain:0}),this._gainNode=this.output,this.getStateAtTime=function(e){const n=this.toSeconds(e);return this._startTime!==-1&&n>=this._startTime&&(this._stopTime===-1||n<=this._stopTime)?"started":"stopped"},this._fadeIn=t.fadeIn,this._fadeOut=t.fadeOut,this._curve=t.curve,this.onended=t.onended}static getDefaults(){return Object.assign(U.getDefaults(),{curve:"linear",fadeIn:0,fadeOut:0,onended:Q})}_startGain(t,e=1){B(this._startTime===-1,"Source cannot be started more than once");const n=this.toSeconds(this._fadeIn);return this._startTime=t+n,this._startTime=Math.max(this._startTime,this.context.currentTime),n>0?(this._gainNode.gain.setValueAtTime(0,t),this._curve==="linear"?this._gainNode.gain.linearRampToValueAtTime(e,t+n):this._gainNode.gain.exponentialApproachValueAtTime(e,t,n)):this._gainNode.gain.setValueAtTime(e,t),this}stop(t){return this.log("stop",t),this._stopGain(this.toSeconds(t)),this}_stopGain(t){B(this._startTime!==-1,"'start' must be called before 'stop'"),this.cancelStop();const e=this.toSeconds(this._fadeOut);return this._stopTime=this.toSeconds(t)+e,this._stopTime=Math.max(this._stopTime,this.context.currentTime),e>0?this._curve==="linear"?this._gainNode.gain.linearRampTo(0,e,t):this._gainNode.gain.targetRampTo(0,e,t):(this._gainNode.gain.cancelAndHoldAtTime(t),this._gainNode.gain.setValueAtTime(0,t)),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout(()=>{const n=this._curve==="exponential"?e*2:0;this._stopSource(this.now()+n),this._onended()},this._stopTime-this.context.currentTime),this}_onended(){if(this.onended!==Q&&(this.onended(this),this.onended=Q,!this.context.isOffline)){const t=()=>this.dispose();typeof window.requestIdleCallback<"u"?window.requestIdleCallback(t):setTimeout(t,1e3)}}get state(){return this.getStateAtTime(this.now())}cancelStop(){return this.log("cancelStop"),B(this._startTime!==-1,"Source is not started"),this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this.context.clearTimeout(this._timeout),this._stopTime=-1,this}dispose(){return super.dispose(),this._gainNode.disconnect(),this}}class Mn extends Oe{constructor(){super(M(Mn.getDefaults(),arguments,["offset"])),this.name="ToneConstantSource",this._source=this.context.createConstantSource();const t=M(Mn.getDefaults(),arguments,["offset"]);Ve(this._source,this._gainNode),this.offset=new et({context:this.context,convert:t.convert,param:this._source.offset,units:t.units,value:t.offset,minValue:t.minValue,maxValue:t.maxValue})}static getDefaults(){return Object.assign(Oe.getDefaults(),{convert:!0,offset:1,units:"number"})}start(t){const e=this.toSeconds(t);return this.log("start",e),this._startGain(e),this._source.start(e),this}_stopSource(t){this._source.stop(t)}dispose(){return super.dispose(),this.state==="started"&&this.stop(),this._source.disconnect(),this.offset.dispose(),this}}class pt extends U{constructor(){super(M(pt.getDefaults(),arguments,["value","units"])),this.name="Signal",this.override=!0;const t=M(pt.getDefaults(),arguments,["value","units"]);this.output=this._constantSource=new Mn({context:this.context,convert:t.convert,offset:t.value,units:t.units,minValue:t.minValue,maxValue:t.maxValue}),this._constantSource.start(0),this.input=this._param=this._constantSource.offset}static getDefaults(){return Object.assign(U.getDefaults(),{convert:!0,units:"number",value:0})}connect(t,e=0,n=0){return Os(this,t,e,n),this}dispose(){return super.dispose(),this._param.dispose(),this._constantSource.dispose(),this}setValueAtTime(t,e){return this._param.setValueAtTime(t,e),this}getValueAtTime(t){return this._param.getValueAtTime(t)}setRampPoint(t){return this._param.setRampPoint(t),this}linearRampToValueAtTime(t,e){return this._param.linearRampToValueAtTime(t,e),this}exponentialRampToValueAtTime(t,e){return this._param.exponentialRampToValueAtTime(t,e),this}exponentialRampTo(t,e,n){return this._param.exponentialRampTo(t,e,n),this}linearRampTo(t,e,n){return this._param.linearRampTo(t,e,n),this}targetRampTo(t,e,n){return this._param.targetRampTo(t,e,n),this}exponentialApproachValueAtTime(t,e,n){return this._param.exponentialApproachValueAtTime(t,e,n),this}setTargetAtTime(t,e,n){return this._param.setTargetAtTime(t,e,n),this}setValueCurveAtTime(t,e,n,i){return this._param.setValueCurveAtTime(t,e,n,i),this}cancelScheduledValues(t){return this._param.cancelScheduledValues(t),this}cancelAndHoldAtTime(t){return this._param.cancelAndHoldAtTime(t),this}rampTo(t,e,n){return this._param.rampTo(t,e,n),this}get value(){return this._param.value}set value(t){this._param.value=t}get convert(){return this._param.convert}set convert(t){this._param.convert=t}get units(){return this._param.units}get overridden(){return this._param.overridden}set overridden(t){this._param.overridden=t}get maxValue(){return this._param.maxValue}get minValue(){return this._param.minValue}apply(t){return this._param.apply(t),this}}function Os(s,t,e,n){(t instanceof et||pe(t)||t instanceof pt&&t.override)&&(t.cancelScheduledValues(0),t.setValueAtTime(0,0),t instanceof pt&&(t.overridden=!0)),Ve(s,t,e,n)}class In extends et{constructor(){super(M(In.getDefaults(),arguments,["value"])),this.name="TickParam",this._events=new zt(1/0),this._multiplier=1;const t=M(In.getDefaults(),arguments,["value"]);this._multiplier=t.multiplier,this._events.cancel(0),this._events.add({ticks:0,time:0,type:"setValueAtTime",value:this._fromType(t.value)}),this.setValueAtTime(t.value,0)}static getDefaults(){return Object.assign(et.getDefaults(),{multiplier:1,units:"hertz",value:1})}setTargetAtTime(t,e,n){e=this.toSeconds(e),this.setRampPoint(e);const i=this._fromType(t),r=this._events.get(e),a=Math.round(Math.max(1/n,1));for(let o=0;o<=a;o++){const c=n*o+e,u=this._exponentialApproach(r.time,r.value,i,n,c);this.linearRampToValueAtTime(this._toType(u),c)}return this}setValueAtTime(t,e){const n=this.toSeconds(e);super.setValueAtTime(t,e);const i=this._events.get(n),r=this._events.previousEvent(i),a=this._getTicksUntilEvent(r,n);return i.ticks=Math.max(a,0),this}linearRampToValueAtTime(t,e){const n=this.toSeconds(e);super.linearRampToValueAtTime(t,e);const i=this._events.get(n),r=this._events.previousEvent(i),a=this._getTicksUntilEvent(r,n);return i.ticks=Math.max(a,0),this}exponentialRampToValueAtTime(t,e){e=this.toSeconds(e);const n=this._fromType(t),i=this._events.get(e),r=Math.round(Math.max((e-i.time)*10,1)),a=(e-i.time)/r;for(let o=0;o<=r;o++){const c=a*o+i.time,u=this._exponentialInterpolate(i.time,i.value,e,n,c);this.linearRampToValueAtTime(this._toType(u),c)}return this}_getTicksUntilEvent(t,e){if(t===null)t={ticks:0,time:0,type:"setValueAtTime",value:0};else if(Mt(t.ticks)){const a=this._events.previousEvent(t);t.ticks=this._getTicksUntilEvent(a,t.time)}const n=this._fromType(this.getValueAtTime(t.time));let i=this._fromType(this.getValueAtTime(e));const r=this._events.get(e);return r&&r.time===e&&r.type==="setValueAtTime"&&(i=this._fromType(this.getValueAtTime(e-this.sampleTime))),.5*(e-t.time)*(n+i)+t.ticks}getTicksAtTime(t){const e=this.toSeconds(t),n=this._events.get(e);return Math.max(this._getTicksUntilEvent(n,e),0)}getDurationOfTicks(t,e){const n=this.toSeconds(e),i=this.getTicksAtTime(e);return this.getTimeOfTick(i+t)-n}getTimeOfTick(t){const e=this._events.get(t,"ticks"),n=this._events.getAfter(t,"ticks");if(e&&e.ticks===t)return e.time;if(e&&n&&n.type==="linearRampToValueAtTime"&&e.value!==n.value){const i=this._fromType(this.getValueAtTime(e.time)),a=(this._fromType(this.getValueAtTime(n.time))-i)/(n.time-e.time),o=Math.sqrt(Math.pow(i,2)-2*a*(e.ticks-t)),c=(-i+o)/a,u=(-i-o)/a;return(c>0?c:u)+e.time}else return e?e.value===0?1/0:e.time+(t-e.ticks)/e.value:t/this._initialValue}ticksToTime(t,e){return this.getDurationOfTicks(t,e)}timeToTicks(t,e){const n=this.toSeconds(e),i=this.toSeconds(t),r=this.getTicksAtTime(n);return this.getTicksAtTime(n+i)-r}_fromType(t){return this.units==="bpm"&&this.multiplier?1/(60/t/this.multiplier):super._fromType(t)}_toType(t){return this.units==="bpm"&&this.multiplier?t/this.multiplier*60:super._toType(t)}get multiplier(){return this._multiplier}set multiplier(t){const e=this.value;this._multiplier=t,this.cancelScheduledValues(0),this.setValueAtTime(e,0)}}class En extends pt{constructor(){super(M(En.getDefaults(),arguments,["value"])),this.name="TickSignal";const t=M(En.getDefaults(),arguments,["value"]);this.input=this._param=new In({context:this.context,convert:t.convert,multiplier:t.multiplier,param:this._constantSource.offset,units:t.units,value:t.value})}static getDefaults(){return Object.assign(pt.getDefaults(),{multiplier:1,units:"hertz",value:1})}ticksToTime(t,e){return this._param.ticksToTime(t,e)}timeToTicks(t,e){return this._param.timeToTicks(t,e)}getTimeOfTick(t){return this._param.getTimeOfTick(t)}getDurationOfTicks(t,e){return this._param.getDurationOfTicks(t,e)}getTicksAtTime(t){return this._param.getTicksAtTime(t)}get multiplier(){return this._param.multiplier}set multiplier(t){this._param.multiplier=t}dispose(){return super.dispose(),this._param.dispose(),this}}class Dn extends Ct{constructor(){super(M(Dn.getDefaults(),arguments,["frequency"])),this.name="TickSource",this._state=new Ns,this._tickOffset=new zt;const t=M(Dn.getDefaults(),arguments,["frequency"]);this.frequency=new En({context:this.context,units:t.units,value:t.frequency}),at(this,"frequency"),this._state.setStateAtTime("stopped",0),this.setTicksAtTime(0,0)}static getDefaults(){return Object.assign({frequency:1,units:"hertz"},Ct.getDefaults())}get state(){return this.getStateAtTime(this.now())}start(t,e){const n=this.toSeconds(t);return this._state.getValueAtTime(n)!=="started"&&(this._state.setStateAtTime("started",n),$(e)&&this.setTicksAtTime(e,n)),this}stop(t){const e=this.toSeconds(t);if(this._state.getValueAtTime(e)==="stopped"){const n=this._state.get(e);n&&n.time>0&&(this._tickOffset.cancel(n.time),this._state.cancel(n.time))}return this._state.cancel(e),this._state.setStateAtTime("stopped",e),this.setTicksAtTime(0,e),this}pause(t){const e=this.toSeconds(t);return this._state.getValueAtTime(e)==="started"&&this._state.setStateAtTime("paused",e),this}cancel(t){return t=this.toSeconds(t),this._state.cancel(t),this._tickOffset.cancel(t),this}getTicksAtTime(t){const e=this.toSeconds(t),n=this._state.getLastState("stopped",e),i={state:"paused",time:e};this._state.add(i);let r=n,a=0;return this._state.forEachBetween(n.time,e+this.sampleTime,o=>{let c=r.time;const u=this._tickOffset.get(o.time);u&&u.time>=r.time&&(a=u.ticks,c=u.time),r.state==="started"&&o.state!=="started"&&(a+=this.frequency.getTicksAtTime(o.time)-this.frequency.getTicksAtTime(c)),r=o}),this._state.remove(i),a}get ticks(){return this.getTicksAtTime(this.now())}set ticks(t){this.setTicksAtTime(t,this.now())}get seconds(){return this.getSecondsAtTime(this.now())}set seconds(t){const e=this.now(),n=this.frequency.timeToTicks(t,e);this.setTicksAtTime(n,e)}getSecondsAtTime(t){t=this.toSeconds(t);const e=this._state.getLastState("stopped",t),n={state:"paused",time:t};this._state.add(n);let i=e,r=0;return this._state.forEachBetween(e.time,t+this.sampleTime,a=>{let o=i.time;const c=this._tickOffset.get(a.time);c&&c.time>=i.time&&(r=c.seconds,o=c.time),i.state==="started"&&a.state!=="started"&&(r+=a.time-o),i=a}),this._state.remove(n),r}setTicksAtTime(t,e){return e=this.toSeconds(e),this._tickOffset.cancel(e),this._tickOffset.add({seconds:this.frequency.getDurationOfTicks(t,e),ticks:t,time:e}),this}getStateAtTime(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)}getTimeOfTick(t,e=this.now()){const n=this._tickOffset.get(e),i=this._state.get(e),r=Math.max(n.time,i.time),a=this.frequency.getTicksAtTime(r)+t-n.ticks;return this.frequency.getTimeOfTick(a)}forEachTickBetween(t,e,n){let i=this._state.get(t);this._state.forEachBetween(t,e,a=>{i&&i.state==="started"&&a.state!=="started"&&this.forEachTickBetween(Math.max(i.time,t),a.time-this.sampleTime,n),i=a});let r=null;if(i&&i.state==="started"){const a=Math.max(i.time,t),o=this.frequency.getTicksAtTime(a),c=this.frequency.getTicksAtTime(i.time),u=o-c;let l=Math.ceil(u)-u;l=It(l,1)?0:l;let h=this.frequency.getTimeOfTick(o+l);for(;h<e;){try{n(h,Math.round(this.getTicksAtTime(h)))}catch(d){r=d;break}h+=this.frequency.getDurationOfTicks(1,h)}}if(r)throw r;return this}dispose(){return super.dispose(),this._state.dispose(),this._tickOffset.dispose(),this.frequency.dispose(),this}}class Ue extends Ct{constructor(){super(M(Ue.getDefaults(),arguments,["callback","frequency"])),this.name="Clock",this.callback=Q,this._lastUpdate=0,this._state=new Ns("stopped"),this._boundLoop=this._loop.bind(this);const t=M(Ue.getDefaults(),arguments,["callback","frequency"]);this.callback=t.callback,this._tickSource=new Dn({context:this.context,frequency:t.frequency,units:t.units}),this._lastUpdate=0,this.frequency=this._tickSource.frequency,at(this,"frequency"),this._state.setStateAtTime("stopped",0),this.context.on("tick",this._boundLoop)}static getDefaults(){return Object.assign(Ct.getDefaults(),{callback:Q,frequency:1,units:"hertz"})}get state(){return this._state.getValueAtTime(this.now())}start(t,e){Gi(this.context);const n=this.toSeconds(t);return this.log("start",n),this._state.getValueAtTime(n)!=="started"&&(this._state.setStateAtTime("started",n),this._tickSource.start(n,e),n<this._lastUpdate&&this.emit("start",n,e)),this}stop(t){const e=this.toSeconds(t);return this.log("stop",e),this._state.cancel(e),this._state.setStateAtTime("stopped",e),this._tickSource.stop(e),e<this._lastUpdate&&this.emit("stop",e),this}pause(t){const e=this.toSeconds(t);return this._state.getValueAtTime(e)==="started"&&(this._state.setStateAtTime("paused",e),this._tickSource.pause(e),e<this._lastUpdate&&this.emit("pause",e)),this}get ticks(){return Math.ceil(this.getTicksAtTime(this.now()))}set ticks(t){this._tickSource.ticks=t}get seconds(){return this._tickSource.seconds}set seconds(t){this._tickSource.seconds=t}getSecondsAtTime(t){return this._tickSource.getSecondsAtTime(t)}setTicksAtTime(t,e){return this._tickSource.setTicksAtTime(t,e),this}getTimeOfTick(t,e=this.now()){return this._tickSource.getTimeOfTick(t,e)}getTicksAtTime(t){return this._tickSource.getTicksAtTime(t)}nextTickTime(t,e){const n=this.toSeconds(e),i=this.getTicksAtTime(n);return this._tickSource.getTimeOfTick(i+t,n)}_loop(){const t=this._lastUpdate,e=this.now();this._lastUpdate=e,this.log("loop",t,e),t!==e&&(this._state.forEachBetween(t,e,n=>{switch(n.state){case"started":const i=this._tickSource.getTicksAtTime(n.time);this.emit("start",n.time,i);break;case"stopped":n.time!==0&&this.emit("stop",n.time);break;case"paused":this.emit("pause",n.time);break}}),this._tickSource.forEachTickBetween(t,e,(n,i)=>{this.callback(n,i)}))}getStateAtTime(t){const e=this.toSeconds(t);return this._state.getValueAtTime(e)}dispose(){return super.dispose(),this.context.off("tick",this._boundLoop),this._tickSource.dispose(),this._state.dispose(),this}}hn.mixin(Ue);class Ms extends Jt{constructor(){super(),this.name="ToneAudioBuffers",this._buffers=new Map,this._loadingCount=0;const t=M(Ms.getDefaults(),arguments,["urls","onload","baseUrl"],"urls");this.baseUrl=t.baseUrl,Object.keys(t.urls).forEach(e=>{this._loadingCount++;const n=t.urls[e];this.add(e,n,this._bufferLoaded.bind(this,t.onload),t.onerror)})}static getDefaults(){return{baseUrl:"",onerror:Q,onload:Q,urls:{}}}has(t){return this._buffers.has(t.toString())}get(t){return B(this.has(t),`ToneAudioBuffers has no buffer named: ${t}`),this._buffers.get(t.toString())}_bufferLoaded(t){this._loadingCount--,this._loadingCount===0&&t&&t()}get loaded(){return Array.from(this._buffers).every(([t,e])=>e.loaded)}add(t,e,n=Q,i=Q){return Wt(e)?this._buffers.set(t.toString(),new J(this.baseUrl+e,n,i)):this._buffers.set(t.toString(),new J(e,n,i)),this}dispose(){return super.dispose(),this._buffers.forEach(t=>t.dispose()),this._buffers.clear(),this}}class $t extends qe{constructor(){super(...arguments),this.name="Ticks",this.defaultUnits="i"}_now(){return this.context.transport.ticks}_beatsToUnits(t){return this._getPPQ()*t}_secondsToUnits(t){return Math.floor(t/(60/this._getBpm())*this._getPPQ())}_ticksToUnits(t){return t}toTicks(){return this.valueOf()}toSeconds(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())}}class jl extends Ct{constructor(){super(...arguments),this.name="Draw",this.expiration=.25,this.anticipation=.008,this._events=new zt,this._boundDrawLoop=this._drawLoop.bind(this),this._animationFrame=-1}schedule(t,e){return this._events.add({callback:t,time:this.toSeconds(e)}),this._events.length===1&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop)),this}cancel(t){return this._events.cancel(this.toSeconds(t)),this}_drawLoop(){const t=this.context.currentTime;for(;this._events.length&&this._events.peek().time-this.anticipation<=t;){const e=this._events.shift();e&&t-e.time<=this.expiration&&e.callback()}this._events.length>0&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop))}dispose(){return super.dispose(),this._events.dispose(),cancelAnimationFrame(this._animationFrame),this}}zn(s=>{s.draw=new jl({context:s})});Gn(s=>{s.draw.dispose()});class Ul extends Jt{constructor(){super(...arguments),this.name="IntervalTimeline",this._root=null,this._length=0}add(t){B($(t.time),"Events must have a time property"),B($(t.duration),"Events must have a duration parameter"),t.time=t.time.valueOf();let e=new zl(t.time,t.time+t.duration,t);for(this._root===null?this._root=e:this._root.insert(e),this._length++;e!==null;)e.updateHeight(),e.updateMax(),this._rebalance(e),e=e.parent;return this}remove(t){if(this._root!==null){const e=[];this._root.search(t.time,e);for(const n of e)if(n.event===t){this._removeNode(n),this._length--;break}}return this}get length(){return this._length}cancel(t){return this.forEachFrom(t,e=>this.remove(e)),this}_setRoot(t){this._root=t,this._root!==null&&(this._root.parent=null)}_replaceNodeInParent(t,e){t.parent!==null?(t.isLeftChild()?t.parent.left=e:t.parent.right=e,this._rebalance(t.parent)):this._setRoot(e)}_removeNode(t){if(t.left===null&&t.right===null)this._replaceNodeInParent(t,null);else if(t.right===null)this._replaceNodeInParent(t,t.left);else if(t.left===null)this._replaceNodeInParent(t,t.right);else{const e=t.getBalance();let n,i=null;if(e>0)if(t.left.right===null)n=t.left,n.right=t.right,i=n;else{for(n=t.left.right;n.right!==null;)n=n.right;n.parent&&(n.parent.right=n.left,i=n.parent,n.left=t.left,n.right=t.right)}else if(t.right.left===null)n=t.right,n.left=t.left,i=n;else{for(n=t.right.left;n.left!==null;)n=n.left;n.parent&&(n.parent.left=n.right,i=n.parent,n.left=t.left,n.right=t.right)}t.parent!==null?t.isLeftChild()?t.parent.left=n:t.parent.right=n:this._setRoot(n),i&&this._rebalance(i)}t.dispose()}_rotateLeft(t){const e=t.parent,n=t.isLeftChild(),i=t.right;i&&(t.right=i.left,i.left=t),e!==null?n?e.left=i:e.right=i:this._setRoot(i)}_rotateRight(t){const e=t.parent,n=t.isLeftChild(),i=t.left;i&&(t.left=i.right,i.right=t),e!==null?n?e.left=i:e.right=i:this._setRoot(i)}_rebalance(t){const e=t.getBalance();e>1&&t.left?t.left.getBalance()<0?this._rotateLeft(t.left):this._rotateRight(t):e<-1&&t.right&&(t.right.getBalance()>0?this._rotateRight(t.right):this._rotateLeft(t))}get(t){if(this._root!==null){const e=[];if(this._root.search(t,e),e.length>0){let n=e[0];for(let i=1;i<e.length;i++)e[i].low>n.low&&(n=e[i]);return n.event}}return null}forEach(t){if(this._root!==null){const e=[];this._root.traverse(n=>e.push(n)),e.forEach(n=>{n.event&&t(n.event)})}return this}forEachAtTime(t,e){if(this._root!==null){const n=[];this._root.search(t,n),n.forEach(i=>{i.event&&e(i.event)})}return this}forEachFrom(t,e){if(this._root!==null){const n=[];this._root.searchAfter(t,n),n.forEach(i=>{i.event&&e(i.event)})}return this}dispose(){return super.dispose(),this._root!==null&&this._root.traverse(t=>t.dispose()),this._root=null,this}}class zl{constructor(t,e,n){this._left=null,this._right=null,this.parent=null,this.height=0,this.event=n,this.low=t,this.high=e,this.max=this.high}insert(t){t.low<=this.low?this.left===null?this.left=t:this.left.insert(t):this.right===null?this.right=t:this.right.insert(t)}search(t,e){t>this.max||(this.left!==null&&this.left.search(t,e),this.low<=t&&this.high>t&&e.push(this),!(this.low>t)&&this.right!==null&&this.right.search(t,e))}searchAfter(t,e){this.low>=t&&(e.push(this),this.left!==null&&this.left.searchAfter(t,e)),this.right!==null&&this.right.searchAfter(t,e)}traverse(t){t(this),this.left!==null&&this.left.traverse(t),this.right!==null&&this.right.traverse(t)}updateHeight(){this.left!==null&&this.right!==null?this.height=Math.max(this.left.height,this.right.height)+1:this.right!==null?this.height=this.right.height+1:this.left!==null?this.height=this.left.height+1:this.height=0}updateMax(){this.max=this.high,this.left!==null&&(this.max=Math.max(this.max,this.left.max)),this.right!==null&&(this.max=Math.max(this.max,this.right.max))}getBalance(){let t=0;return this.left!==null&&this.right!==null?t=this.left.height-this.right.height:this.left!==null?t=this.left.height+1:this.right!==null&&(t=-(this.right.height+1)),t}isLeftChild(){return this.parent!==null&&this.parent.left===this}get left(){return this._left}set left(t){this._left=t,t!==null&&(t.parent=this),this.updateHeight(),this.updateMax()}get right(){return this._right}set right(t){this._right=t,t!==null&&(t.parent=this),this.updateHeight(),this.updateMax()}dispose(){this.parent=null,this._left=null,this._right=null,this.event=null}}class fe extends U{constructor(){super(M(fe.getDefaults(),arguments,["volume"])),this.name="Volume";const t=M(fe.getDefaults(),arguments,["volume"]);this.input=this.output=new _t({context:this.context,gain:t.volume,units:"decibels"}),this.volume=this.output.gain,at(this,"volume"),this._unmutedVolume=t.volume,this.mute=t.mute}static getDefaults(){return Object.assign(U.getDefaults(),{mute:!1,volume:0})}get mute(){return this.volume.value===-1/0}set mute(t){!this.mute&&t?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!t&&(this.volume.value=this._unmutedVolume)}dispose(){return super.dispose(),this.input.dispose(),this.volume.dispose(),this}}class Rn extends U{constructor(){super(M(Rn.getDefaults(),arguments)),this.name="Destination",this.input=new fe({context:this.context}),this.output=new _t({context:this.context}),this.volume=this.input.volume;const t=M(Rn.getDefaults(),arguments);os(this.input,this.output,this.context.rawContext.destination),this.mute=t.mute,this._internalChannels=[this.input,this.context.rawContext.destination,this.output]}static getDefaults(){return Object.assign(U.getDefaults(),{mute:!1,volume:0})}get mute(){return this.input.mute}set mute(t){this.input.mute=t}chain(...t){return this.input.disconnect(),t.unshift(this.input),t.push(this.output),os(...t),this}get maxChannelCount(){return this.context.rawContext.destination.maxChannelCount}dispose(){return super.dispose(),this.volume.dispose(),this}}zn(s=>{s.destination=new Rn({context:s})});Gn(s=>{s.destination.dispose()});class Gl extends Jt{constructor(t){super(),this.name="TimelineValue",this._timeline=new zt({memory:10}),this._initialValue=t}set(t,e){return this._timeline.add({value:t,time:e}),this}get(t){const e=this._timeline.get(t);return e?e.value:this._initialValue}}class ie{constructor(t,e){this.id=ie._eventId++;const n=Object.assign(ie.getDefaults(),e);this.transport=t,this.callback=n.callback,this._once=n.once,this.time=n.time}static getDefaults(){return{callback:Q,once:!1,time:0}}invoke(t){this.callback&&(this.callback(t),this._once&&this.transport.clear(this.id))}dispose(){return this.callback=void 0,this}}ie._eventId=0;class Is extends ie{constructor(t,e){super(t,e),this._currentId=-1,this._nextId=-1,this._nextTick=this.time,this._boundRestart=this._restart.bind(this);const n=Object.assign(Is.getDefaults(),e);this.duration=new $t(t.context,n.duration).valueOf(),this._interval=new $t(t.context,n.interval).valueOf(),this._nextTick=n.time,this.transport.on("start",this._boundRestart),this.transport.on("loopStart",this._boundRestart),this.context=this.transport.context,this._restart()}static getDefaults(){return Object.assign({},ie.getDefaults(),{duration:1/0,interval:1,once:!1})}invoke(t){this._createEvents(t),super.invoke(t)}_createEvents(t){const e=this.transport.getTicksAtTime(t);e>=this.time&&e>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new $t(this.context,this._nextTick).toSeconds()))}_restart(t){this.transport.clear(this._currentId),this.transport.clear(this._nextId),this._nextTick=this.time;const e=this.transport.getTicksAtTime(t);e>this.time&&(this._nextTick=this.time+Math.ceil((e-this.time)/this._interval)*this._interval),this._currentId=this.transport.scheduleOnce(this.invoke.bind(this),new $t(this.context,this._nextTick).toSeconds()),this._nextTick+=this._interval,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new $t(this.context,this._nextTick).toSeconds())}dispose(){return super.dispose(),this.transport.clear(this._currentId),this.transport.clear(this._nextId),this.transport.off("start",this._boundRestart),this.transport.off("loopStart",this._boundRestart),this}}class ze extends Ct{constructor(){super(M(ze.getDefaults(),arguments)),this.name="Transport",this._loop=new Gl(!1),this._loopStart=0,this._loopEnd=0,this._scheduledEvents={},this._timeline=new zt,this._repeatedEvents=new Ul,this._syncedSignals=[],this._swingAmount=0;const t=M(ze.getDefaults(),arguments);this._ppq=t.ppq,this._clock=new Ue({callback:this._processTick.bind(this),context:this.context,frequency:0,units:"bpm"}),this._bindClockEvents(),this.bpm=this._clock.frequency,this._clock.frequency.multiplier=t.ppq,this.bpm.setValueAtTime(t.bpm,0),at(this,"bpm"),this._timeSignature=t.timeSignature,this._swingTicks=t.ppq/2}static getDefaults(){return Object.assign(Ct.getDefaults(),{bpm:120,loopEnd:"4m",loopStart:0,ppq:192,swing:0,swingSubdivision:"8n",timeSignature:4})}_processTick(t,e){if(this._loop.get(t)&&e>=this._loopEnd&&(this.emit("loopEnd",t),this._clock.setTicksAtTime(this._loopStart,t),e=this._loopStart,this.emit("loopStart",t,this._clock.getSecondsAtTime(t)),this.emit("loop",t)),this._swingAmount>0&&e%this._ppq!==0&&e%(this._swingTicks*2)!==0){const n=e%(this._swingTicks*2)/(this._swingTicks*2),i=Math.sin(n*Math.PI)*this._swingAmount;t+=new $t(this.context,this._swingTicks*2/3).toSeconds()*i}this._timeline.forEachAtTime(e,n=>n.invoke(t))}schedule(t,e){const n=new ie(this,{callback:t,time:new qe(this.context,e).toTicks()});return this._addEvent(n,this._timeline)}scheduleRepeat(t,e,n,i=1/0){const r=new Is(this,{callback:t,duration:new Dt(this.context,i).toTicks(),interval:new Dt(this.context,e).toTicks(),time:new qe(this.context,n).toTicks()});return this._addEvent(r,this._repeatedEvents)}scheduleOnce(t,e){const n=new ie(this,{callback:t,once:!0,time:new qe(this.context,e).toTicks()});return this._addEvent(n,this._timeline)}clear(t){if(this._scheduledEvents.hasOwnProperty(t)){const e=this._scheduledEvents[t.toString()];e.timeline.remove(e.event),e.event.dispose(),delete this._scheduledEvents[t.toString()]}return this}_addEvent(t,e){return this._scheduledEvents[t.id.toString()]={event:t,timeline:e},e.add(t),t.id}cancel(t=0){const e=this.toTicks(t);return this._timeline.forEachFrom(e,n=>this.clear(n.id)),this._repeatedEvents.forEachFrom(e,n=>this.clear(n.id)),this}_bindClockEvents(){this._clock.on("start",(t,e)=>{e=new $t(this.context,e).toSeconds(),this.emit("start",t,e)}),this._clock.on("stop",t=>{this.emit("stop",t)}),this._clock.on("pause",t=>{this.emit("pause",t)})}get state(){return this._clock.getStateAtTime(this.now())}start(t,e){let n;return $(e)&&(n=this.toTicks(e)),this._clock.start(t,n),this}stop(t){return this._clock.stop(t),this}pause(t){return this._clock.pause(t),this}toggle(t){return t=this.toSeconds(t),this._clock.getStateAtTime(t)!=="started"?this.start(t):this.stop(t),this}get timeSignature(){return this._timeSignature}set timeSignature(t){Rt(t)&&(t=t[0]/t[1]*4),this._timeSignature=t}get loopStart(){return new Dt(this.context,this._loopStart,"i").toSeconds()}set loopStart(t){this._loopStart=this.toTicks(t)}get loopEnd(){return new Dt(this.context,this._loopEnd,"i").toSeconds()}set loopEnd(t){this._loopEnd=this.toTicks(t)}get loop(){return this._loop.get(this.now())}set loop(t){this._loop.set(t,this.now())}setLoopPoints(t,e){return this.loopStart=t,this.loopEnd=e,this}get swing(){return this._swingAmount}set swing(t){this._swingAmount=t}get swingSubdivision(){return new $t(this.context,this._swingTicks).toNotation()}set swingSubdivision(t){this._swingTicks=this.toTicks(t)}get position(){const t=this.now(),e=this._clock.getTicksAtTime(t);return new $t(this.context,e).toBarsBeatsSixteenths()}set position(t){const e=this.toTicks(t);this.ticks=e}get seconds(){return this._clock.seconds}set seconds(t){const e=this.now(),n=this._clock.frequency.timeToTicks(t,e);this.ticks=n}get progress(){if(this.loop){const t=this.now();return(this._clock.getTicksAtTime(t)-this._loopStart)/(this._loopEnd-this._loopStart)}else return 0}get ticks(){return this._clock.ticks}set ticks(t){if(this._clock.ticks!==t){const e=this.now();if(this.state==="started"){const n=this._clock.getTicksAtTime(e),i=this._clock.frequency.getDurationOfTicks(Math.ceil(n)-n,e),r=e+i;this.emit("stop",r),this._clock.setTicksAtTime(t,r),this.emit("start",r,this._clock.getSecondsAtTime(r))}else this._clock.setTicksAtTime(t,e)}}getTicksAtTime(t){return Math.round(this._clock.getTicksAtTime(t))}getSecondsAtTime(t){return this._clock.getSecondsAtTime(t)}get PPQ(){return this._clock.frequency.multiplier}set PPQ(t){this._clock.frequency.multiplier=t}nextSubdivision(t){if(t=this.toTicks(t),this.state!=="started")return 0;{const e=this.now(),n=this.getTicksAtTime(e),i=t-n%t;return this._clock.nextTickTime(i,e)}}syncSignal(t,e){if(!e){const i=this.now();if(t.getValueAtTime(i)!==0){const a=1/(60/this.bpm.getValueAtTime(i)/this.PPQ);e=t.getValueAtTime(i)/a}else e=0}const n=new _t(e);return this.bpm.connect(n),n.connect(t._param),this._syncedSignals.push({initial:t.value,ratio:n,signal:t}),t.value=0,this}unsyncSignal(t){for(let e=this._syncedSignals.length-1;e>=0;e--){const n=this._syncedSignals[e];n.signal===t&&(n.ratio.dispose(),n.signal.value=n.initial,this._syncedSignals.splice(e,1))}return this}dispose(){return super.dispose(),this._clock.dispose(),Ki(this,"bpm"),this._timeline.dispose(),this._repeatedEvents.dispose(),this}}hn.mixin(ze);zn(s=>{s.transport=new ze({context:s})});Gn(s=>{s.transport.dispose()});class kt extends U{constructor(t){super(t),this.input=void 0,this._state=new Ns("stopped"),this._synced=!1,this._scheduled=[],this._syncedStart=Q,this._syncedStop=Q,this._state.memory=100,this._state.increasing=!0,this._volume=this.output=new fe({context:this.context,mute:t.mute,volume:t.volume}),this.volume=this._volume.volume,at(this,"volume"),this.onstop=t.onstop}static getDefaults(){return Object.assign(U.getDefaults(),{mute:!1,onstop:Q,volume:0})}get state(){return this._synced?this.context.transport.state==="started"?this._state.getValueAtTime(this.context.transport.seconds):"stopped":this._state.getValueAtTime(this.now())}get mute(){return this._volume.mute}set mute(t){this._volume.mute=t}_clampToCurrentTime(t){return this._synced?t:Math.max(t,this.context.currentTime)}start(t,e,n){let i=Mt(t)&&this._synced?this.context.transport.seconds:this.toSeconds(t);if(i=this._clampToCurrentTime(i),!this._synced&&this._state.getValueAtTime(i)==="started")B(On(i,this._state.get(i).time),"Start time must be strictly greater than previous start time"),this._state.cancel(i),this._state.setStateAtTime("started",i),this.log("restart",i),this.restart(i,e,n);else if(this.log("start",i),this._state.setStateAtTime("started",i),this._synced){const r=this._state.get(i);r&&(r.offset=this.toSeconds(Ae(e,0)),r.duration=n?this.toSeconds(n):void 0);const a=this.context.transport.schedule(o=>{this._start(o,e,n)},i);this._scheduled.push(a),this.context.transport.state==="started"&&this.context.transport.getSecondsAtTime(this.immediate())>i&&this._syncedStart(this.now(),this.context.transport.seconds)}else Gi(this.context),this._start(i,e,n);return this}stop(t){let e=Mt(t)&&this._synced?this.context.transport.seconds:this.toSeconds(t);if(e=this._clampToCurrentTime(e),this._state.getValueAtTime(e)==="started"||$(this._state.getNextState("started",e))){if(this.log("stop",e),!this._synced)this._stop(e);else{const n=this.context.transport.schedule(this._stop.bind(this),e);this._scheduled.push(n)}this._state.cancel(e),this._state.setStateAtTime("stopped",e)}return this}restart(t,e,n){return t=this.toSeconds(t),this._state.getValueAtTime(t)==="started"&&(this._state.cancel(t),this._restart(t,e,n)),this}sync(){return this._synced||(this._synced=!0,this._syncedStart=(t,e)=>{if(e>0){const n=this._state.get(e);if(n&&n.state==="started"&&n.time!==e){const i=e-this.toSeconds(n.time);let r;n.duration&&(r=this.toSeconds(n.duration)-i),this._start(t,this.toSeconds(n.offset)+i,r)}}},this._syncedStop=t=>{const e=this.context.transport.getSecondsAtTime(Math.max(t-this.sampleTime,0));this._state.getValueAtTime(e)==="started"&&this._stop(t)},this.context.transport.on("start",this._syncedStart),this.context.transport.on("loopStart",this._syncedStart),this.context.transport.on("stop",this._syncedStop),this.context.transport.on("pause",this._syncedStop),this.context.transport.on("loopEnd",this._syncedStop)),this}unsync(){return this._synced&&(this.context.transport.off("stop",this._syncedStop),this.context.transport.off("pause",this._syncedStop),this.context.transport.off("loopEnd",this._syncedStop),this.context.transport.off("start",this._syncedStart),this.context.transport.off("loopStart",this._syncedStart)),this._synced=!1,this._scheduled.forEach(t=>this.context.transport.clear(t)),this._scheduled=[],this._state.cancel(0),this._stop(0),this}dispose(){return super.dispose(),this.onstop=Q,this.unsync(),this._volume.dispose(),this._state.dispose(),this}}class Ge extends Oe{constructor(){super(M(Ge.getDefaults(),arguments,["url","onload"])),this.name="ToneBufferSource",this._source=this.context.createBufferSource(),this._internalChannels=[this._source],this._sourceStarted=!1,this._sourceStopped=!1;const t=M(Ge.getDefaults(),arguments,["url","onload"]);Ve(this._source,this._gainNode),this._source.onended=()=>this._stopSource(),this.playbackRate=new et({context:this.context,param:this._source.playbackRate,units:"positive",value:t.playbackRate}),this.loop=t.loop,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd,this._buffer=new J(t.url,t.onload,t.onerror),this._internalChannels.push(this._source)}static getDefaults(){return Object.assign(Oe.getDefaults(),{url:new J,loop:!1,loopEnd:0,loopStart:0,onload:Q,onerror:Q,playbackRate:1})}get fadeIn(){return this._fadeIn}set fadeIn(t){this._fadeIn=t}get fadeOut(){return this._fadeOut}set fadeOut(t){this._fadeOut=t}get curve(){return this._curve}set curve(t){this._curve=t}start(t,e,n,i=1){B(this.buffer.loaded,"buffer is either not set or not loaded");const r=this.toSeconds(t);this._startGain(r,i),this.loop?e=Ae(e,this.loopStart):e=Ae(e,0);let a=Math.max(this.toSeconds(e),0);if(this.loop){const o=this.toSeconds(this.loopEnd)||this.buffer.duration,c=this.toSeconds(this.loopStart),u=o-c;is(a,o)&&(a=(a-c)%u+c),It(a,this.buffer.duration)&&(a=0)}if(this._source.buffer=this.buffer.get(),this._source.loopEnd=this.toSeconds(this.loopEnd)||this.buffer.duration,Yi(a,this.buffer.duration)&&(this._sourceStarted=!0,this._source.start(r,a)),$(n)){let o=this.toSeconds(n);o=Math.max(o,0),this.stop(r+o)}return this}_stopSource(t){!this._sourceStopped&&this._sourceStarted&&(this._sourceStopped=!0,this._source.stop(this.toSeconds(t)),this._onended())}get loopStart(){return this._source.loopStart}set loopStart(t){this._source.loopStart=this.toSeconds(t)}get loopEnd(){return this._source.loopEnd}set loopEnd(t){this._source.loopEnd=this.toSeconds(t)}get buffer(){return this._buffer}set buffer(t){this._buffer.set(t)}get loop(){return this._source.loop}set loop(t){this._source.loop=t,this._sourceStarted&&this.cancelStop()}dispose(){return super.dispose(),this._source.onended=null,this._source.disconnect(),this._buffer.dispose(),this.playbackRate.dispose(),this}}function Te(s,t){return ot(this,void 0,void 0,function*(){const e=t/s.context.sampleRate,n=new As(1,e,s.context.sampleRate);return new s.constructor(Object.assign(s.get(),{frequency:2/e,detune:0,context:n})).toDestination().start(0),(yield n.render()).getChannelData(0)})}class Pn extends Oe{constructor(){super(M(Pn.getDefaults(),arguments,["frequency","type"])),this.name="ToneOscillatorNode",this._oscillator=this.context.createOscillator(),this._internalChannels=[this._oscillator];const t=M(Pn.getDefaults(),arguments,["frequency","type"]);Ve(this._oscillator,this._gainNode),this.type=t.type,this.frequency=new et({context:this.context,param:this._oscillator.frequency,units:"frequency",value:t.frequency}),this.detune=new et({context:this.context,param:this._oscillator.detune,units:"cents",value:t.detune}),at(this,["frequency","detune"])}static getDefaults(){return Object.assign(Oe.getDefaults(),{detune:0,frequency:440,type:"sine"})}start(t){const e=this.toSeconds(t);return this.log("start",e),this._startGain(e),this._oscillator.start(e),this}_stopSource(t){this._oscillator.stop(t)}setPeriodicWave(t){return this._oscillator.setPeriodicWave(t),this}get type(){return this._oscillator.type}set type(t){this._oscillator.type=t}dispose(){return super.dispose(),this.state==="started"&&this.stop(),this._oscillator.disconnect(),this.frequency.dispose(),this.detune.dispose(),this}}class ut extends kt{constructor(){super(M(ut.getDefaults(),arguments,["frequency","type"])),this.name="Oscillator",this._oscillator=null;const t=M(ut.getDefaults(),arguments,["frequency","type"]);this.frequency=new pt({context:this.context,units:"frequency",value:t.frequency}),at(this,"frequency"),this.detune=new pt({context:this.context,units:"cents",value:t.detune}),at(this,"detune"),this._partials=t.partials,this._partialCount=t.partialCount,this._type=t.type,t.partialCount&&t.type!=="custom"&&(this._type=this.baseType+t.partialCount.toString()),this.phase=t.phase}static getDefaults(){return Object.assign(kt.getDefaults(),{detune:0,frequency:440,partialCount:0,partials:[],phase:0,type:"sine"})}_start(t){const e=this.toSeconds(t),n=new Pn({context:this.context,onended:()=>this.onstop(this)});this._oscillator=n,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.start(e)}_stop(t){const e=this.toSeconds(t);this._oscillator&&this._oscillator.stop(e)}_restart(t){const e=this.toSeconds(t);return this.log("restart",e),this._oscillator&&this._oscillator.cancelStop(),this._state.cancel(e),this}syncFrequency(){return this.context.transport.syncSignal(this.frequency),this}unsyncFrequency(){return this.context.transport.unsyncSignal(this.frequency),this}_getCachedPeriodicWave(){if(this._type==="custom")return ut._periodicWaveCache.find(e=>e.phase===this._phase&&kl(e.partials,this._partials));{const t=ut._periodicWaveCache.find(e=>e.type===this._type&&e.phase===this._phase);return this._partialCount=t?t.partialCount:this._partialCount,t}}get type(){return this._type}set type(t){this._type=t;const e=["sine","square","sawtooth","triangle"].indexOf(t)!==-1;if(this._phase===0&&e)this._wave=void 0,this._partialCount=0,this._oscillator!==null&&(this._oscillator.type=t);else{const n=this._getCachedPeriodicWave();if($(n)){const{partials:i,wave:r}=n;this._wave=r,this._partials=i,this._oscillator!==null&&this._oscillator.setPeriodicWave(this._wave)}else{const[i,r]=this._getRealImaginary(t,this._phase),a=this.context.createPeriodicWave(i,r);this._wave=a,this._oscillator!==null&&this._oscillator.setPeriodicWave(this._wave),ut._periodicWaveCache.push({imag:r,partialCount:this._partialCount,partials:this._partials,phase:this._phase,real:i,type:this._type,wave:this._wave}),ut._periodicWaveCache.length>100&&ut._periodicWaveCache.shift()}}}get baseType(){return this._type.replace(this.partialCount.toString(),"")}set baseType(t){this.partialCount&&this._type!=="custom"&&t!=="custom"?this.type=t+this.partialCount:this.type=t}get partialCount(){return this._partialCount}set partialCount(t){se(t,0);let e=this._type;const n=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);if(n&&(e=n[1]),this._type!=="custom")t===0?this.type=e:this.type=e+t.toString();else{const i=new Float32Array(t);this._partials.forEach((r,a)=>i[a]=r),this._partials=Array.from(i),this.type=this._type}}_getRealImaginary(t,e){let i=2048;const r=new Float32Array(i),a=new Float32Array(i);let o=1;if(t==="custom"){if(o=this._partials.length+1,this._partialCount=this._partials.length,i=o,this._partials.length===0)return[r,a]}else{const c=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(t);c?(o=parseInt(c[2],10)+1,this._partialCount=parseInt(c[2],10),t=c[1],o=Math.max(o,2),i=o):this._partialCount=0,this._partials=[]}for(let c=1;c<i;++c){const u=2/(c*Math.PI);let l;switch(t){case"sine":l=c<=o?1:0,this._partials[c-1]=l;break;case"square":l=c&1?2*u:0,this._partials[c-1]=l;break;case"sawtooth":l=u*(c&1?1:-1),this._partials[c-1]=l;break;case"triangle":c&1?l=2*(u*u)*(c-1>>1&1?-1:1):l=0,this._partials[c-1]=l;break;case"custom":l=this._partials[c-1];break;default:throw new TypeError("Oscillator: invalid type: "+t)}l!==0?(r[c]=-l*Math.sin(e*c),a[c]=l*Math.cos(e*c)):(r[c]=0,a[c]=0)}return[r,a]}_inverseFFT(t,e,n){let i=0;const r=t.length;for(let a=0;a<r;a++)i+=t[a]*Math.cos(a*n)+e[a]*Math.sin(a*n);return i}getInitialValue(){const[t,e]=this._getRealImaginary(this._type,0);let n=0;const i=Math.PI*2,r=32;for(let a=0;a<r;a++)n=Math.max(this._inverseFFT(t,e,a/r*i),n);return Ol(-this._inverseFFT(t,e,this._phase)/n,-1,1)}get partials(){return this._partials.slice(0,this.partialCount)}set partials(t){this._partials=t,this._partialCount=this._partials.length,t.length&&(this.type="custom")}get phase(){return this._phase*(180/Math.PI)}set phase(t){this._phase=t*Math.PI/180,this.type=this._type}asArray(t=1024){return ot(this,void 0,void 0,function*(){return Te(this,t)})}dispose(){return super.dispose(),this._oscillator!==null&&this._oscillator.dispose(),this._wave=void 0,this.frequency.dispose(),this.detune.dispose(),this}}ut._periodicWaveCache=[];class Zn extends U{constructor(){super(Object.assign(M(Zn.getDefaults(),arguments,["context"])))}connect(t,e=0,n=0){return Os(this,t,e,n),this}}class $e extends Zn{constructor(){super(Object.assign(M($e.getDefaults(),arguments,["mapping","length"]))),this.name="WaveShaper",this._shaper=this.context.createWaveShaper(),this.input=this._shaper,this.output=this._shaper;const t=M($e.getDefaults(),arguments,["mapping","length"]);Rt(t.mapping)||t.mapping instanceof Float32Array?this.curve=Float32Array.from(t.mapping):vl(t.mapping)&&this.setMap(t.mapping,t.length)}static getDefaults(){return Object.assign(pt.getDefaults(),{length:1024})}setMap(t,e=1024){const n=new Float32Array(e);for(let i=0,r=e;i<r;i++){const a=i/(r-1)*2-1;n[i]=t(a,i)}return this.curve=n,this}get curve(){return this._shaper.curve}set curve(t){this._shaper.curve=t}get oversample(){return this._shaper.oversample}set oversample(t){const e=["none","2x","4x"].some(n=>n.includes(t));B(e,"oversampling must be either 'none', '2x', or '4x'"),this._shaper.oversample=t}dispose(){return super.dispose(),this._shaper.disconnect(),this}}class $l extends Zn{constructor(){super(...arguments),this.name="AudioToGain",this._norm=new $e({context:this.context,mapping:t=>(t+1)/2}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}}class me extends pt{constructor(){super(Object.assign(M(me.getDefaults(),arguments,["value"]))),this.name="Multiply",this.override=!1;const t=M(me.getDefaults(),arguments,["value"]);this._mult=this.input=this.output=new _t({context:this.context,minValue:t.minValue,maxValue:t.maxValue}),this.factor=this._param=this._mult.gain,this.factor.setValueAtTime(t.value,0)}static getDefaults(){return Object.assign(pt.getDefaults(),{value:0})}dispose(){return super.dispose(),this._mult.dispose(),this}}class Ze extends kt{constructor(){super(M(Ze.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="AMOscillator",this._modulationScale=new $l({context:this.context}),this._modulationNode=new _t({context:this.context});const t=M(Ze.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new ut({context:this.context,detune:t.detune,frequency:t.frequency,onstop:()=>this.onstop(this),phase:t.phase,type:t.type}),this.frequency=this._carrier.frequency,this.detune=this._carrier.detune,this._modulator=new ut({context:this.context,phase:t.phase,type:t.modulationType}),this.harmonicity=new me({context:this.context,units:"positive",value:t.harmonicity}),this.frequency.chain(this.harmonicity,this._modulator.frequency),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),at(this,["frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(ut.getDefaults(),{harmonicity:1,modulationType:"square"})}_start(t){this._modulator.start(t),this._carrier.start(t)}_stop(t){this._modulator.stop(t),this._carrier.stop(t)}_restart(t){this._modulator.restart(t),this._carrier.restart(t)}get type(){return this._carrier.type}set type(t){this._carrier.type=t}get baseType(){return this._carrier.baseType}set baseType(t){this._carrier.baseType=t}get partialCount(){return this._carrier.partialCount}set partialCount(t){this._carrier.partialCount=t}get modulationType(){return this._modulator.type}set modulationType(t){this._modulator.type=t}get phase(){return this._carrier.phase}set phase(t){this._carrier.phase=t,this._modulator.phase=t}get partials(){return this._carrier.partials}set partials(t){this._carrier.partials=t}asArray(t=1024){return ot(this,void 0,void 0,function*(){return Te(this,t)})}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this._modulationScale.dispose(),this}}class Xe extends kt{constructor(){super(M(Xe.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="FMOscillator",this._modulationNode=new _t({context:this.context,gain:0});const t=M(Xe.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new ut({context:this.context,detune:t.detune,frequency:0,onstop:()=>this.onstop(this),phase:t.phase,type:t.type}),this.detune=this._carrier.detune,this.frequency=new pt({context:this.context,units:"frequency",value:t.frequency}),this._modulator=new ut({context:this.context,phase:t.phase,type:t.modulationType}),this.harmonicity=new me({context:this.context,units:"positive",value:t.harmonicity}),this.modulationIndex=new me({context:this.context,units:"positive",value:t.modulationIndex}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this.detune.connect(this._modulator.detune),at(this,["modulationIndex","frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(ut.getDefaults(),{harmonicity:1,modulationIndex:2,modulationType:"square"})}_start(t){this._modulator.start(t),this._carrier.start(t)}_stop(t){this._modulator.stop(t),this._carrier.stop(t)}_restart(t){return this._modulator.restart(t),this._carrier.restart(t),this}get type(){return this._carrier.type}set type(t){this._carrier.type=t}get baseType(){return this._carrier.baseType}set baseType(t){this._carrier.baseType=t}get partialCount(){return this._carrier.partialCount}set partialCount(t){this._carrier.partialCount=t}get modulationType(){return this._modulator.type}set modulationType(t){this._modulator.type=t}get phase(){return this._carrier.phase}set phase(t){this._carrier.phase=t,this._modulator.phase=t}get partials(){return this._carrier.partials}set partials(t){this._carrier.partials=t}asArray(t=1024){return ot(this,void 0,void 0,function*(){return Te(this,t)})}dispose(){return super.dispose(),this.frequency.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this.modulationIndex.dispose(),this}}class Me extends kt{constructor(){super(M(Me.getDefaults(),arguments,["frequency","width"])),this.name="PulseOscillator",this._widthGate=new _t({context:this.context,gain:0}),this._thresh=new $e({context:this.context,mapping:e=>e<=0?-1:1});const t=M(Me.getDefaults(),arguments,["frequency","width"]);this.width=new pt({context:this.context,units:"audioRange",value:t.width}),this._triangle=new ut({context:this.context,detune:t.detune,frequency:t.frequency,onstop:()=>this.onstop(this),phase:t.phase,type:"triangle"}),this.frequency=this._triangle.frequency,this.detune=this._triangle.detune,this._triangle.chain(this._thresh,this.output),this.width.chain(this._widthGate,this._thresh),at(this,["width","frequency","detune"])}static getDefaults(){return Object.assign(kt.getDefaults(),{detune:0,frequency:440,phase:0,type:"pulse",width:.2})}_start(t){t=this.toSeconds(t),this._triangle.start(t),this._widthGate.gain.setValueAtTime(1,t)}_stop(t){t=this.toSeconds(t),this._triangle.stop(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(0,t)}_restart(t){this._triangle.restart(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(1,t)}get phase(){return this._triangle.phase}set phase(t){this._triangle.phase=t}get type(){return"pulse"}get baseType(){return"pulse"}get partials(){return[]}get partialCount(){return 0}set carrierType(t){this._triangle.type=t}asArray(t=1024){return ot(this,void 0,void 0,function*(){return Te(this,t)})}dispose(){return super.dispose(),this._triangle.dispose(),this.width.dispose(),this._widthGate.dispose(),this._thresh.dispose(),this}}class Ye extends kt{constructor(){super(M(Ye.getDefaults(),arguments,["frequency","type","spread"])),this.name="FatOscillator",this._oscillators=[];const t=M(Ye.getDefaults(),arguments,["frequency","type","spread"]);this.frequency=new pt({context:this.context,units:"frequency",value:t.frequency}),this.detune=new pt({context:this.context,units:"cents",value:t.detune}),this._spread=t.spread,this._type=t.type,this._phase=t.phase,this._partials=t.partials,this._partialCount=t.partialCount,this.count=t.count,at(this,["frequency","detune"])}static getDefaults(){return Object.assign(ut.getDefaults(),{count:3,spread:20,type:"sawtooth"})}_start(t){t=this.toSeconds(t),this._forEach(e=>e.start(t))}_stop(t){t=this.toSeconds(t),this._forEach(e=>e.stop(t))}_restart(t){this._forEach(e=>e.restart(t))}_forEach(t){for(let e=0;e<this._oscillators.length;e++)t(this._oscillators[e],e)}get type(){return this._type}set type(t){this._type=t,this._forEach(e=>e.type=t)}get spread(){return this._spread}set spread(t){if(this._spread=t,this._oscillators.length>1){const e=-t/2,n=t/(this._oscillators.length-1);this._forEach((i,r)=>i.detune.value=e+n*r)}}get count(){return this._oscillators.length}set count(t){if(se(t,1),this._oscillators.length!==t){this._forEach(e=>e.dispose()),this._oscillators=[];for(let e=0;e<t;e++){const n=new ut({context:this.context,volume:-6-t*1.1,type:this._type,phase:this._phase+e/t*360,partialCount:this._partialCount,onstop:e===0?()=>this.onstop(this):Q});this.type==="custom"&&(n.partials=this._partials),this.frequency.connect(n.frequency),this.detune.connect(n.detune),n.detune.overridden=!1,n.connect(this.output),this._oscillators[e]=n}this.spread=this._spread,this.state==="started"&&this._forEach(e=>e.start())}}get phase(){return this._phase}set phase(t){this._phase=t,this._forEach((e,n)=>e.phase=this._phase+n/this.count*360)}get baseType(){return this._oscillators[0].baseType}set baseType(t){this._forEach(e=>e.baseType=t),this._type=this._oscillators[0].type}get partials(){return this._oscillators[0].partials}set partials(t){this._partials=t,this._partialCount=this._partials.length,t.length&&(this._type="custom",this._forEach(e=>e.partials=t))}get partialCount(){return this._oscillators[0].partialCount}set partialCount(t){this._partialCount=t,this._forEach(e=>e.partialCount=t),this._type=this._oscillators[0].type}asArray(t=1024){return ot(this,void 0,void 0,function*(){return Te(this,t)})}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this._forEach(t=>t.dispose()),this}}class Qe extends kt{constructor(){super(M(Qe.getDefaults(),arguments,["frequency","modulationFrequency"])),this.name="PWMOscillator",this.sourceType="pwm",this._scale=new me({context:this.context,value:2});const t=M(Qe.getDefaults(),arguments,["frequency","modulationFrequency"]);this._pulse=new Me({context:this.context,frequency:t.modulationFrequency}),this._pulse.carrierType="sine",this.modulationFrequency=this._pulse.frequency,this._modulator=new ut({context:this.context,detune:t.detune,frequency:t.frequency,onstop:()=>this.onstop(this),phase:t.phase}),this.frequency=this._modulator.frequency,this.detune=this._modulator.detune,this._modulator.chain(this._scale,this._pulse.width),this._pulse.connect(this.output),at(this,["modulationFrequency","frequency","detune"])}static getDefaults(){return Object.assign(kt.getDefaults(),{detune:0,frequency:440,modulationFrequency:.4,phase:0,type:"pwm"})}_start(t){t=this.toSeconds(t),this._modulator.start(t),this._pulse.start(t)}_stop(t){t=this.toSeconds(t),this._modulator.stop(t),this._pulse.stop(t)}_restart(t){this._modulator.restart(t),this._pulse.restart(t)}get type(){return"pwm"}get baseType(){return"pwm"}get partials(){return[]}get partialCount(){return 0}get phase(){return this._modulator.phase}set phase(t){this._modulator.phase=t}asArray(t=1024){return ot(this,void 0,void 0,function*(){return Te(this,t)})}dispose(){return super.dispose(),this._pulse.dispose(),this._scale.dispose(),this._modulator.dispose(),this}}const Hs={am:Ze,fat:Ye,fm:Xe,oscillator:ut,pulse:Me,pwm:Qe};class Je extends kt{constructor(){super(M(Je.getDefaults(),arguments,["frequency","type"])),this.name="OmniOscillator";const t=M(Je.getDefaults(),arguments,["frequency","type"]);this.frequency=new pt({context:this.context,units:"frequency",value:t.frequency}),this.detune=new pt({context:this.context,units:"cents",value:t.detune}),at(this,["frequency","detune"]),this.set(t)}static getDefaults(){return Object.assign(ut.getDefaults(),Xe.getDefaults(),Ze.getDefaults(),Ye.getDefaults(),Me.getDefaults(),Qe.getDefaults())}_start(t){this._oscillator.start(t)}_stop(t){this._oscillator.stop(t)}_restart(t){return this._oscillator.restart(t),this}get type(){let t="";return["am","fm","fat"].some(e=>this._sourceType===e)&&(t=this._sourceType),t+this._oscillator.type}set type(t){t.substr(0,2)==="fm"?(this._createNewOscillator("fm"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(2)):t.substr(0,2)==="am"?(this._createNewOscillator("am"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(2)):t.substr(0,3)==="fat"?(this._createNewOscillator("fat"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(3)):t==="pwm"?(this._createNewOscillator("pwm"),this._oscillator=this._oscillator):t==="pulse"?this._createNewOscillator("pulse"):(this._createNewOscillator("oscillator"),this._oscillator=this._oscillator,this._oscillator.type=t)}get partials(){return this._oscillator.partials}set partials(t){!this._getOscType(this._oscillator,"pulse")&&!this._getOscType(this._oscillator,"pwm")&&(this._oscillator.partials=t)}get partialCount(){return this._oscillator.partialCount}set partialCount(t){!this._getOscType(this._oscillator,"pulse")&&!this._getOscType(this._oscillator,"pwm")&&(this._oscillator.partialCount=t)}set(t){return Reflect.has(t,"type")&&t.type&&(this.type=t.type),super.set(t),this}_createNewOscillator(t){if(t!==this._sourceType){this._sourceType=t;const e=Hs[t],n=this.now();if(this._oscillator){const i=this._oscillator;i.stop(n),this.context.setTimeout(()=>i.dispose(),this.blockTime)}this._oscillator=new e({context:this.context}),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this._oscillator.onstop=()=>this.onstop(this),this.state==="started"&&this._oscillator.start(n)}}get phase(){return this._oscillator.phase}set phase(t){this._oscillator.phase=t}get sourceType(){return this._sourceType}set sourceType(t){let e="sine";this._oscillator.type!=="pwm"&&this._oscillator.type!=="pulse"&&(e=this._oscillator.type),t==="fm"?this.type="fm"+e:t==="am"?this.type="am"+e:t==="fat"?this.type="fat"+e:t==="oscillator"?this.type=e:t==="pulse"?this.type="pulse":t==="pwm"&&(this.type="pwm")}_getOscType(t,e){return t instanceof Hs[e]}get baseType(){return this._oscillator.baseType}set baseType(t){!this._getOscType(this._oscillator,"pulse")&&!this._getOscType(this._oscillator,"pwm")&&t!=="pulse"&&t!=="pwm"&&(this._oscillator.baseType=t)}get width(){if(this._getOscType(this._oscillator,"pulse"))return this._oscillator.width}get count(){if(this._getOscType(this._oscillator,"fat"))return this._oscillator.count}set count(t){this._getOscType(this._oscillator,"fat")&&de(t)&&(this._oscillator.count=t)}get spread(){if(this._getOscType(this._oscillator,"fat"))return this._oscillator.spread}set spread(t){this._getOscType(this._oscillator,"fat")&&de(t)&&(this._oscillator.spread=t)}get modulationType(){if(this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am"))return this._oscillator.modulationType}set modulationType(t){(this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am"))&&Wt(t)&&(this._oscillator.modulationType=t)}get modulationIndex(){if(this._getOscType(this._oscillator,"fm"))return this._oscillator.modulationIndex}get harmonicity(){if(this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am"))return this._oscillator.harmonicity}get modulationFrequency(){if(this._getOscType(this._oscillator,"pwm"))return this._oscillator.modulationFrequency}asArray(t=1024){return ot(this,void 0,void 0,function*(){return Te(this,t)})}dispose(){return super.dispose(),this.detune.dispose(),this.frequency.dispose(),this._oscillator.dispose(),this}}function sr(s,t=1/0){const e=new WeakMap;return function(n,i){Reflect.defineProperty(n,i,{configurable:!0,enumerable:!0,get:function(){return e.get(this)},set:function(r){se(r,s,t),e.set(this,r)}})}}function Ht(s,t=1/0){const e=new WeakMap;return function(n,i){Reflect.defineProperty(n,i,{configurable:!0,enumerable:!0,get:function(){return e.get(this)},set:function(r){se(this.toSeconds(r),s,t),e.set(this,r)}})}}class He extends kt{constructor(){super(M(He.getDefaults(),arguments,["url","onload"])),this.name="Player",this._activeSources=new Set;const t=M(He.getDefaults(),arguments,["url","onload"]);this._buffer=new J({onload:this._onload.bind(this,t.onload),onerror:t.onerror,reverse:t.reverse,url:t.url}),this.autostart=t.autostart,this._loop=t.loop,this._loopStart=t.loopStart,this._loopEnd=t.loopEnd,this._playbackRate=t.playbackRate,this.fadeIn=t.fadeIn,this.fadeOut=t.fadeOut}static getDefaults(){return Object.assign(kt.getDefaults(),{autostart:!1,fadeIn:0,fadeOut:0,loop:!1,loopEnd:0,loopStart:0,onload:Q,onerror:Q,playbackRate:1,reverse:!1})}load(t){return ot(this,void 0,void 0,function*(){return yield this._buffer.load(t),this._onload(),this})}_onload(t=Q){t(),this.autostart&&this.start()}_onSourceEnd(t){this.onstop(this),this._activeSources.delete(t),this._activeSources.size===0&&!this._synced&&this._state.getValueAtTime(this.now())==="started"&&(this._state.cancel(this.now()),this._state.setStateAtTime("stopped",this.now()))}start(t,e,n){return super.start(t,e,n),this}_start(t,e,n){this._loop?e=Ae(e,this._loopStart):e=Ae(e,0);const i=this.toSeconds(e),r=n;n=Ae(n,Math.max(this._buffer.duration-i,0));let a=this.toSeconds(n);a=a/this._playbackRate,t=this.toSeconds(t);const o=new Ge({url:this._buffer,context:this.context,fadeIn:this.fadeIn,fadeOut:this.fadeOut,loop:this._loop,loopEnd:this._loopEnd,loopStart:this._loopStart,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate}).connect(this.output);!this._loop&&!this._synced&&(this._state.cancel(t+a),this._state.setStateAtTime("stopped",t+a,{implicitEnd:!0})),this._activeSources.add(o),this._loop&&Mt(r)?o.start(t,i):o.start(t,i,a-this.toSeconds(this.fadeOut))}_stop(t){const e=this.toSeconds(t);this._activeSources.forEach(n=>n.stop(e))}restart(t,e,n){return super.restart(t,e,n),this}_restart(t,e,n){this._stop(t),this._start(t,e,n)}seek(t,e){const n=this.toSeconds(e);if(this._state.getValueAtTime(n)==="started"){const i=this.toSeconds(t);this._stop(n),this._start(n,i)}return this}setLoopPoints(t,e){return this.loopStart=t,this.loopEnd=e,this}get loopStart(){return this._loopStart}set loopStart(t){this._loopStart=t,this.buffer.loaded&&se(this.toSeconds(t),0,this.buffer.duration),this._activeSources.forEach(e=>{e.loopStart=t})}get loopEnd(){return this._loopEnd}set loopEnd(t){this._loopEnd=t,this.buffer.loaded&&se(this.toSeconds(t),0,this.buffer.duration),this._activeSources.forEach(e=>{e.loopEnd=t})}get buffer(){return this._buffer}set buffer(t){this._buffer.set(t)}get loop(){return this._loop}set loop(t){if(this._loop!==t&&(this._loop=t,this._activeSources.forEach(e=>{e.loop=t}),t)){const e=this._state.getNextState("stopped",this.now());e&&this._state.cancel(e.time)}}get playbackRate(){return this._playbackRate}set playbackRate(t){this._playbackRate=t;const e=this.now(),n=this._state.getNextState("stopped",e);n&&n.implicitEnd&&(this._state.cancel(n.time),this._activeSources.forEach(i=>i.cancelStop())),this._activeSources.forEach(i=>{i.playbackRate.setValueAtTime(t,e)})}get reverse(){return this._buffer.reverse}set reverse(t){this._buffer.reverse=t}get loaded(){return this._buffer.loaded}dispose(){return super.dispose(),this._activeSources.forEach(t=>t.dispose()),this._activeSources.clear(),this._buffer.dispose(),this}}Lt([Ht(0)],He.prototype,"fadeIn",void 0);Lt([Ht(0)],He.prototype,"fadeOut",void 0);class Yt extends U{constructor(){super(M(Yt.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="Envelope",this._sig=new pt({context:this.context,value:0}),this.output=this._sig,this.input=void 0;const t=M(Yt.getDefaults(),arguments,["attack","decay","sustain","release"]);this.attack=t.attack,this.decay=t.decay,this.sustain=t.sustain,this.release=t.release,this.attackCurve=t.attackCurve,this.releaseCurve=t.releaseCurve,this.decayCurve=t.decayCurve}static getDefaults(){return Object.assign(U.getDefaults(),{attack:.01,attackCurve:"linear",decay:.1,decayCurve:"exponential",release:1,releaseCurve:"exponential",sustain:.5})}get value(){return this.getValueAtTime(this.now())}_getCurve(t,e){if(Wt(t))return t;{let n;for(n in _n)if(_n[n][e]===t)return n;return t}}_setCurve(t,e,n){if(Wt(n)&&Reflect.has(_n,n)){const i=_n[n];le(i)?t!=="_decayCurve"&&(this[t]=i[e]):this[t]=i}else if(Rt(n)&&t!=="_decayCurve")this[t]=n;else throw new Error("Envelope: invalid curve: "+n)}get attackCurve(){return this._getCurve(this._attackCurve,"In")}set attackCurve(t){this._setCurve("_attackCurve","In",t)}get releaseCurve(){return this._getCurve(this._releaseCurve,"Out")}set releaseCurve(t){this._setCurve("_releaseCurve","Out",t)}get decayCurve(){return this._decayCurve}set decayCurve(t){B(["linear","exponential"].some(e=>e===t),`Invalid envelope curve: ${t}`),this._decayCurve=t}triggerAttack(t,e=1){this.log("triggerAttack",t,e),t=this.toSeconds(t);let i=this.toSeconds(this.attack);const r=this.toSeconds(this.decay),a=this.getValueAtTime(t);if(a>0){const o=1/i;i=(1-a)/o}if(i<this.sampleTime)this._sig.cancelScheduledValues(t),this._sig.setValueAtTime(e,t);else if(this._attackCurve==="linear")this._sig.linearRampTo(e,i,t);else if(this._attackCurve==="exponential")this._sig.targetRampTo(e,i,t);else{this._sig.cancelAndHoldAtTime(t);let o=this._attackCurve;for(let c=1;c<o.length;c++)if(o[c-1]<=a&&a<=o[c]){o=this._attackCurve.slice(c),o[0]=a;break}this._sig.setValueCurveAtTime(o,t,i,e)}if(r&&this.sustain<1){const o=e*this.sustain,c=t+i;this.log("decay",c),this._decayCurve==="linear"?this._sig.linearRampToValueAtTime(o,r+c):this._sig.exponentialApproachValueAtTime(o,c,r)}return this}triggerRelease(t){this.log("triggerRelease",t),t=this.toSeconds(t);const e=this.getValueAtTime(t);if(e>0){const n=this.toSeconds(this.release);n<this.sampleTime?this._sig.setValueAtTime(0,t):this._releaseCurve==="linear"?this._sig.linearRampTo(0,n,t):this._releaseCurve==="exponential"?this._sig.targetRampTo(0,n,t):(B(Rt(this._releaseCurve),"releaseCurve must be either 'linear', 'exponential' or an array"),this._sig.cancelAndHoldAtTime(t),this._sig.setValueCurveAtTime(this._releaseCurve,t,n,e))}return this}getValueAtTime(t){return this._sig.getValueAtTime(t)}triggerAttackRelease(t,e,n=1){return e=this.toSeconds(e),this.triggerAttack(e,n),this.triggerRelease(e+this.toSeconds(t)),this}cancel(t){return this._sig.cancelScheduledValues(this.toSeconds(t)),this}connect(t,e=0,n=0){return Os(this,t,e,n),this}asArray(t=1024){return ot(this,void 0,void 0,function*(){const e=t/this.context.sampleRate,n=new As(1,e,this.context.sampleRate),i=this.toSeconds(this.attack)+this.toSeconds(this.decay),r=i+this.toSeconds(this.release),a=r*.1,o=r+a,c=new this.constructor(Object.assign(this.get(),{attack:e*this.toSeconds(this.attack)/o,decay:e*this.toSeconds(this.decay)/o,release:e*this.toSeconds(this.release)/o,context:n}));return c._sig.toDestination(),c.triggerAttackRelease(e*(i+a)/o,0),(yield n.render()).getChannelData(0)})}dispose(){return super.dispose(),this._sig.dispose(),this}}Lt([Ht(0)],Yt.prototype,"attack",void 0);Lt([Ht(0)],Yt.prototype,"decay",void 0);Lt([sr(0,1)],Yt.prototype,"sustain",void 0);Lt([Ht(0)],Yt.prototype,"release",void 0);const _n=(()=>{let t,e;const n=[];for(t=0;t<128;t++)n[t]=Math.sin(t/(128-1)*(Math.PI/2));const i=[],r=6.4;for(t=0;t<128-1;t++){e=t/(128-1);const d=Math.sin(e*(Math.PI*2)*r-Math.PI/2)+1;i[t]=d/10+e*.83}i[128-1]=1;const a=[],o=5;for(t=0;t<128;t++)a[t]=Math.ceil(t/(128-1)*o)/o;const c=[];for(t=0;t<128;t++)e=t/(128-1),c[t]=.5*(1-Math.cos(Math.PI*e));const u=[];for(t=0;t<128;t++){e=t/(128-1);const d=Math.pow(e,3)*4+.2,f=Math.cos(d*Math.PI*2*e);u[t]=Math.abs(f*(1-e))}function l(d){const f=new Array(d.length);for(let p=0;p<d.length;p++)f[p]=1-d[p];return f}function h(d){return d.slice(0).reverse()}return{bounce:{In:l(u),Out:u},cosine:{In:n,Out:h(n)},exponential:"exponential",linear:"linear",ripple:{In:i,Out:l(i)},sine:{In:c,Out:l(c)},step:{In:a,Out:l(a)}}})();class _e extends U{constructor(){super(M(_e.getDefaults(),arguments)),this._scheduledEvents=[],this._synced=!1,this._original_triggerAttack=this.triggerAttack,this._original_triggerRelease=this.triggerRelease;const t=M(_e.getDefaults(),arguments);this._volume=this.output=new fe({context:this.context,volume:t.volume}),this.volume=this._volume.volume,at(this,"volume")}static getDefaults(){return Object.assign(U.getDefaults(),{volume:0})}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0)),this}_syncState(){let t=!1;return this._synced||(this._synced=!0,t=!0),t}_syncMethod(t,e){const n=this["_original_"+t]=this[t];this[t]=(...i)=>{const r=i[e],a=this.context.transport.schedule(o=>{i[e]=o,n.apply(this,i)},r);this._scheduledEvents.push(a)}}unsync(){return this._scheduledEvents.forEach(t=>this.context.transport.clear(t)),this._scheduledEvents=[],this._synced&&(this._synced=!1,this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease),this}triggerAttackRelease(t,e,n,i){const r=this.toSeconds(n),a=this.toSeconds(e);return this.triggerAttack(t,r,i),this.triggerRelease(r+a),this}dispose(){return super.dispose(),this._volume.dispose(),this.unsync(),this._scheduledEvents=[],this}}class ge extends _e{constructor(){super(M(ge.getDefaults(),arguments));const t=M(ge.getDefaults(),arguments);this.portamento=t.portamento,this.onsilence=t.onsilence}static getDefaults(){return Object.assign(_e.getDefaults(),{detune:0,onsilence:Q,portamento:0})}triggerAttack(t,e,n=1){this.log("triggerAttack",t,e,n);const i=this.toSeconds(e);return this._triggerEnvelopeAttack(i,n),this.setNote(t,i),this}triggerRelease(t){this.log("triggerRelease",t);const e=this.toSeconds(t);return this._triggerEnvelopeRelease(e),this}setNote(t,e){const n=this.toSeconds(e),i=t instanceof Ot?t.toFrequency():t;if(this.portamento>0&&this.getLevelAtTime(n)>.05){const r=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(i,r,n)}else this.frequency.setValueAtTime(i,n);return this}}Lt([Ht(0)],ge.prototype,"portamento",void 0);class Es extends Yt{constructor(){super(M(Es.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="AmplitudeEnvelope",this._gainNode=new _t({context:this.context,gain:0}),this.output=this._gainNode,this.input=this._gainNode,this._sig.connect(this._gainNode.gain),this.output=this._gainNode,this.input=this._gainNode}dispose(){return super.dispose(),this._gainNode.dispose(),this}}class Ke extends ge{constructor(){super(M(Ke.getDefaults(),arguments)),this.name="Synth";const t=M(Ke.getDefaults(),arguments);this.oscillator=new Je(Object.assign({context:this.context,detune:t.detune,onstop:()=>this.onsilence(this)},t.oscillator)),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.envelope=new Es(Object.assign({context:this.context},t.envelope)),this.oscillator.chain(this.envelope,this.output),at(this,["oscillator","frequency","detune","envelope"])}static getDefaults(){return Object.assign(ge.getDefaults(),{envelope:Object.assign(Js(Yt.getDefaults(),Object.keys(U.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.3}),oscillator:Object.assign(Js(Je.getDefaults(),[...Object.keys(kt.getDefaults()),"frequency","detune"]),{type:"triangle"})})}_triggerEnvelopeAttack(t,e){if(this.envelope.triggerAttack(t,e),this.oscillator.start(t),this.envelope.sustain===0){const n=this.toSeconds(this.envelope.attack),i=this.toSeconds(this.envelope.decay);this.oscillator.stop(t+n+i)}}_triggerEnvelopeRelease(t){this.envelope.triggerRelease(t),this.oscillator.stop(t+this.toSeconds(this.envelope.release))}getLevelAtTime(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)}dispose(){return super.dispose(),this.oscillator.dispose(),this.envelope.dispose(),this}}class tn extends Ke{constructor(){super(M(tn.getDefaults(),arguments)),this.name="MembraneSynth",this.portamento=0;const t=M(tn.getDefaults(),arguments);this.pitchDecay=t.pitchDecay,this.octaves=t.octaves,at(this,["oscillator","envelope"])}static getDefaults(){return xe(ge.getDefaults(),Ke.getDefaults(),{envelope:{attack:.001,attackCurve:"exponential",decay:.4,release:1.4,sustain:.01},octaves:10,oscillator:{type:"sine"},pitchDecay:.05})}setNote(t,e){const n=this.toSeconds(e),i=this.toFrequency(t instanceof Ot?t.toFrequency():t),r=i*this.octaves;return this.oscillator.frequency.setValueAtTime(r,n),this.oscillator.frequency.exponentialRampToValueAtTime(i,n+this.toSeconds(this.pitchDecay)),this}dispose(){return super.dispose(),this}}Lt([sr(0)],tn.prototype,"octaves",void 0);Lt([Ht(0)],tn.prototype,"pitchDecay",void 0);const ir=new Set;function Ds(s){ir.add(s)}function rr(s,t){const e=`registerProcessor("${s}", ${t})`;ir.add(e)}const Zl=`
	/**
	 * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. 
	 */
	class ToneAudioWorkletProcessor extends AudioWorkletProcessor {

		constructor(options) {
			
			super(options);
			/**
			 * If the processor was disposed or not. Keep alive until it's disposed.
			 */
			this.disposed = false;
		   	/** 
			 * The number of samples in the processing block
			 */
			this.blockSize = 128;
			/**
			 * the sample rate
			 */
			this.sampleRate = sampleRate;

			this.port.onmessage = (event) => {
				// when it receives a dispose 
				if (event.data === "dispose") {
					this.disposed = true;
				}
			};
		}
	}
`;Ds(Zl);const Xl=`
	/**
	 * Abstract class for a single input/output processor. 
	 * has a 'generate' function which processes one sample at a time
	 */
	class SingleIOProcessor extends ToneAudioWorkletProcessor {

		constructor(options) {
			super(Object.assign(options, {
				numberOfInputs: 1,
				numberOfOutputs: 1
			}));
			/**
			 * Holds the name of the parameter and a single value of that
			 * parameter at the current sample
			 * @type { [name: string]: number }
			 */
			this.params = {}
		}

		/**
		 * Generate an output sample from the input sample and parameters
		 * @abstract
		 * @param input number
		 * @param channel number
		 * @param parameters { [name: string]: number }
		 * @returns number
		 */
		generate(){}

		/**
		 * Update the private params object with the 
		 * values of the parameters at the given index
		 * @param parameters { [name: string]: Float32Array },
		 * @param index number
		 */
		updateParams(parameters, index) {
			for (const paramName in parameters) {
				const param = parameters[paramName];
				if (param.length > 1) {
					this.params[paramName] = parameters[paramName][index];
				} else {
					this.params[paramName] = parameters[paramName][0];
				}
			}
		}

		/**
		 * Process a single frame of the audio
		 * @param inputs Float32Array[][]
		 * @param outputs Float32Array[][]
		 */
		process(inputs, outputs, parameters) {
			const input = inputs[0];
			const output = outputs[0];
			// get the parameter values
			const channelCount = Math.max(input && input.length || 0, output.length);
			for (let sample = 0; sample < this.blockSize; sample++) {
				this.updateParams(parameters, sample);
				for (let channel = 0; channel < channelCount; channel++) {
					const inputSample = input && input.length ? input[channel][sample] : 0;
					output[channel][sample] = this.generate(inputSample, channel, this.params);
				}
			}
			return !this.disposed;
		}
	};
`;Ds(Xl);const Yl=`
	/**
	 * A multichannel buffer for use within an AudioWorkletProcessor as a delay line
	 */
	class DelayLine {
		
		constructor(size, channels) {
			this.buffer = [];
			this.writeHead = []
			this.size = size;

			// create the empty channels
			for (let i = 0; i < channels; i++) {
				this.buffer[i] = new Float32Array(this.size);
				this.writeHead[i] = 0;
			}
		}

		/**
		 * Push a value onto the end
		 * @param channel number
		 * @param value number
		 */
		push(channel, value) {
			this.writeHead[channel] += 1;
			if (this.writeHead[channel] > this.size) {
				this.writeHead[channel] = 0;
			}
			this.buffer[channel][this.writeHead[channel]] = value;
		}

		/**
		 * Get the recorded value of the channel given the delay
		 * @param channel number
		 * @param delay number delay samples
		 */
		get(channel, delay) {
			let readHead = this.writeHead[channel] - Math.floor(delay);
			if (readHead < 0) {
				readHead += this.size;
			}
			return this.buffer[channel][readHead];
		}
	}
`;Ds(Yl);const Ql="feedback-comb-filter",Jl=`
	class FeedbackCombFilterWorklet extends SingleIOProcessor {

		constructor(options) {
			super(options);
			this.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);
		}

		static get parameterDescriptors() {
			return [{
				name: "delayTime",
				defaultValue: 0.1,
				minValue: 0,
				maxValue: 1,
				automationRate: "k-rate"
			}, {
				name: "feedback",
				defaultValue: 0.5,
				minValue: 0,
				maxValue: 0.9999,
				automationRate: "k-rate"
			}];
		}

		generate(input, channel, parameters) {
			const delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);
			this.delayLine.push(channel, input + delayedSample * parameters.feedback);
			return delayedSample;
		}
	}
`;rr(Ql,Jl);class en extends _e{constructor(){super(M(en.getDefaults(),arguments,["urls","onload","baseUrl"],"urls")),this.name="Sampler",this._activeSources=new Map;const t=M(en.getDefaults(),arguments,["urls","onload","baseUrl"],"urls"),e={};Object.keys(t.urls).forEach(n=>{const i=parseInt(n,10);if(B(mn(n)||de(i)&&isFinite(i),`url key is neither a note or midi pitch: ${n}`),mn(n)){const r=new Ot(this.context,n).toMidi();e[r]=t.urls[n]}else de(i)&&isFinite(i)&&(e[i]=t.urls[i])}),this._buffers=new Ms({urls:e,onload:t.onload,baseUrl:t.baseUrl,onerror:t.onerror}),this.attack=t.attack,this.release=t.release,this.curve=t.curve,this._buffers.loaded&&Promise.resolve().then(t.onload)}static getDefaults(){return Object.assign(_e.getDefaults(),{attack:0,baseUrl:"",curve:"exponential",onload:Q,onerror:Q,release:.1,urls:{}})}_findClosest(t){let n=0;for(;n<96;){if(this._buffers.has(t+n))return-n;if(this._buffers.has(t-n))return n;n++}throw new Error(`No available buffers for note: ${t}`)}triggerAttack(t,e,n=1){return this.log("triggerAttack",t,e,n),Array.isArray(t)||(t=[t]),t.forEach(i=>{const r=nr(new Ot(this.context,i).toFrequency()),a=Math.round(r),o=r-a,c=this._findClosest(a),u=a-c,l=this._buffers.get(u),h=er(c+o),d=new Ge({url:l,context:this.context,curve:this.curve,fadeIn:this.attack,fadeOut:this.release,playbackRate:h}).connect(this.output);d.start(e,0,l.duration/h,n),Rt(this._activeSources.get(a))||this._activeSources.set(a,[]),this._activeSources.get(a).push(d),d.onended=()=>{if(this._activeSources&&this._activeSources.has(a)){const f=this._activeSources.get(a),p=f.indexOf(d);p!==-1&&f.splice(p,1)}}}),this}triggerRelease(t,e){return this.log("triggerRelease",t,e),Array.isArray(t)||(t=[t]),t.forEach(n=>{const i=new Ot(this.context,n).toMidi();if(this._activeSources.has(i)&&this._activeSources.get(i).length){const r=this._activeSources.get(i);e=this.toSeconds(e),r.forEach(a=>{a.stop(e)}),this._activeSources.set(i,[])}}),this}releaseAll(t){const e=this.toSeconds(t);return this._activeSources.forEach(n=>{for(;n.length;)n.shift().stop(e)}),this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1)),this}triggerAttackRelease(t,e,n,i=1){const r=this.toSeconds(n);return this.triggerAttack(t,r,i),Rt(e)?(B(Rt(t),"notes must be an array when duration is array"),t.forEach((a,o)=>{const c=e[Math.min(o,e.length-1)];this.triggerRelease(a,r+this.toSeconds(c))})):this.triggerRelease(t,r+this.toSeconds(e)),this}add(t,e,n){if(B(mn(t)||isFinite(t),`note must be a pitch or midi: ${t}`),mn(t)){const i=new Ot(this.context,t).toMidi();this._buffers.add(i,e,n)}else this._buffers.add(t,e,n);return this}get loaded(){return this._buffers.loaded}dispose(){return super.dispose(),this._buffers.dispose(),this._activeSources.forEach(t=>{t.forEach(e=>e.dispose())}),this._activeSources.clear(),this}}Lt([Ht(0)],en.prototype,"attack",void 0);Lt([Ht(0)],en.prototype,"release",void 0);class Vn extends U{constructor(){super(Object.assign(M(Vn.getDefaults(),arguments,["pan"]))),this.name="Panner",this._panner=this.context.createStereoPanner(),this.input=this._panner,this.output=this._panner;const t=M(Vn.getDefaults(),arguments,["pan"]);this.pan=new et({context:this.context,param:this._panner.pan,value:t.pan,minValue:-1,maxValue:1}),this._panner.channelCount=t.channelCount,this._panner.channelCountMode="explicit",at(this,"pan")}static getDefaults(){return Object.assign(U.getDefaults(),{pan:0,channelCount:1})}dispose(){return super.dispose(),this._panner.disconnect(),this.pan.dispose(),this}}const Hl="bit-crusher",Kl=`
	class BitCrusherWorklet extends SingleIOProcessor {

		static get parameterDescriptors() {
			return [{
				name: "bits",
				defaultValue: 12,
				minValue: 1,
				maxValue: 16,
				automationRate: 'k-rate'
			}];
		}

		generate(input, _channel, parameters) {
			const step = Math.pow(0.5, parameters.bits - 1);
			const val = step * Math.floor(input / step + 0.5);
			return val;
		}
	}
`;rr(Hl,Kl);class ct extends U{constructor(){super(M(ct.getDefaults(),arguments,["solo"])),this.name="Solo";const t=M(ct.getDefaults(),arguments,["solo"]);this.input=this.output=new _t({context:this.context}),ct._allSolos.has(this.context)||ct._allSolos.set(this.context,new Set),ct._allSolos.get(this.context).add(this),this.solo=t.solo}static getDefaults(){return Object.assign(U.getDefaults(),{solo:!1})}get solo(){return this._isSoloed()}set solo(t){t?this._addSolo():this._removeSolo(),ct._allSolos.get(this.context).forEach(e=>e._updateSolo())}get muted(){return this.input.gain.value===0}_addSolo(){ct._soloed.has(this.context)||ct._soloed.set(this.context,new Set),ct._soloed.get(this.context).add(this)}_removeSolo(){ct._soloed.has(this.context)&&ct._soloed.get(this.context).delete(this)}_isSoloed(){return ct._soloed.has(this.context)&&ct._soloed.get(this.context).has(this)}_noSolos(){return!ct._soloed.has(this.context)||ct._soloed.has(this.context)&&ct._soloed.get(this.context).size===0}_updateSolo(){this._isSoloed()?this.input.gain.value=1:this._noSolos()?this.input.gain.value=1:this.input.gain.value=0}dispose(){return super.dispose(),ct._allSolos.get(this.context).delete(this),this._removeSolo(),this}}ct._allSolos=new Map;ct._soloed=new Map;class Fn extends U{constructor(){super(M(Fn.getDefaults(),arguments,["pan","volume"])),this.name="PanVol";const t=M(Fn.getDefaults(),arguments,["pan","volume"]);this._panner=this.input=new Vn({context:this.context,pan:t.pan,channelCount:t.channelCount}),this.pan=this._panner.pan,this._volume=this.output=new fe({context:this.context,volume:t.volume}),this.volume=this._volume.volume,this._panner.connect(this._volume),this.mute=t.mute,at(this,["pan","volume"])}static getDefaults(){return Object.assign(U.getDefaults(),{mute:!1,pan:0,volume:0,channelCount:1})}get mute(){return this._volume.mute}set mute(t){this._volume.mute=t}dispose(){return super.dispose(),this._panner.dispose(),this.pan.dispose(),this._volume.dispose(),this.volume.dispose(),this}}class ue extends U{constructor(){super(M(ue.getDefaults(),arguments,["volume","pan"])),this.name="Channel";const t=M(ue.getDefaults(),arguments,["volume","pan"]);this._solo=this.input=new ct({solo:t.solo,context:this.context}),this._panVol=this.output=new Fn({context:this.context,pan:t.pan,volume:t.volume,mute:t.mute,channelCount:t.channelCount}),this.pan=this._panVol.pan,this.volume=this._panVol.volume,this._solo.connect(this._panVol),at(this,["pan","volume"])}static getDefaults(){return Object.assign(U.getDefaults(),{pan:0,volume:0,mute:!1,solo:!1,channelCount:1})}get solo(){return this._solo.solo}set solo(t){this._solo.solo=t}get muted(){return this._solo.muted||this.mute}get mute(){return this._panVol.mute}set mute(t){this._panVol.mute=t}_getBus(t){return ue.buses.has(t)||ue.buses.set(t,new _t({context:this.context})),ue.buses.get(t)}send(t,e=0){const n=this._getBus(t),i=new _t({context:this.context,units:"decibels",gain:e});return this.connect(i),i.connect(n),i}receive(t){return this._getBus(t).connect(this),this}dispose(){return super.dispose(),this._panVol.dispose(),this.pan.dispose(),this.volume.dispose(),this._solo.dispose(),this}}ue.buses=new Map;class th extends U{constructor(){super(...arguments),this.name="Listener",this.positionX=new et({context:this.context,param:this.context.rawContext.listener.positionX}),this.positionY=new et({context:this.context,param:this.context.rawContext.listener.positionY}),this.positionZ=new et({context:this.context,param:this.context.rawContext.listener.positionZ}),this.forwardX=new et({context:this.context,param:this.context.rawContext.listener.forwardX}),this.forwardY=new et({context:this.context,param:this.context.rawContext.listener.forwardY}),this.forwardZ=new et({context:this.context,param:this.context.rawContext.listener.forwardZ}),this.upX=new et({context:this.context,param:this.context.rawContext.listener.upX}),this.upY=new et({context:this.context,param:this.context.rawContext.listener.upY}),this.upZ=new et({context:this.context,param:this.context.rawContext.listener.upZ})}static getDefaults(){return Object.assign(U.getDefaults(),{positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:-1,upX:0,upY:1,upZ:0})}dispose(){return super.dispose(),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this.forwardX.dispose(),this.forwardY.dispose(),this.forwardZ.dispose(),this.upX.dispose(),this.upY.dispose(),this.upZ.dispose(),this}}zn(s=>{s.listener=new th({context:s})});Gn(s=>{s.listener.dispose()});class vn extends U{constructor(){super(M(vn.getDefaults(),arguments)),this.name="Recorder";const t=M(vn.getDefaults(),arguments);this.input=new _t({context:this.context}),B(vn.supported,"Media Recorder API is not available"),this._stream=this.context.createMediaStreamDestination(),this.input.connect(this._stream),this._recorder=new MediaRecorder(this._stream.stream,{mimeType:t.mimeType})}static getDefaults(){return U.getDefaults()}get mimeType(){return this._recorder.mimeType}static get supported(){return Xt!==null&&Reflect.has(Xt,"MediaRecorder")}get state(){return this._recorder.state==="inactive"?"stopped":this._recorder.state==="paused"?"paused":"started"}start(){return ot(this,void 0,void 0,function*(){B(this.state!=="started","Recorder is already started");const t=new Promise(e=>{const n=()=>{this._recorder.removeEventListener("start",n,!1),e()};this._recorder.addEventListener("start",n,!1)});return this._recorder.start(),yield t})}stop(){return ot(this,void 0,void 0,function*(){B(this.state!=="stopped","Recorder is not started");const t=new Promise(e=>{const n=i=>{this._recorder.removeEventListener("dataavailable",n,!1),e(i.data)};this._recorder.addEventListener("dataavailable",n,!1)});return this._recorder.stop(),yield t})}pause(){return B(this.state==="started","Recorder must be started"),this._recorder.pause(),this}dispose(){return super.dispose(),this.input.dispose(),this._stream.disconnect(),this}}Et().transport;Et().destination;Et().destination;Et().listener;Et().draw;Et();class N{constructor(){this.hex="#000000",this.rgb_r=0,this.rgb_g=0,this.rgb_b=0,this.xyz_x=0,this.xyz_y=0,this.xyz_z=0,this.luv_l=0,this.luv_u=0,this.luv_v=0,this.lch_l=0,this.lch_c=0,this.lch_h=0,this.hsluv_h=0,this.hsluv_s=0,this.hsluv_l=0,this.hpluv_h=0,this.hpluv_p=0,this.hpluv_l=0,this.r0s=0,this.r0i=0,this.r1s=0,this.r1i=0,this.g0s=0,this.g0i=0,this.g1s=0,this.g1i=0,this.b0s=0,this.b0i=0,this.b1s=0,this.b1i=0}static fromLinear(t){return t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055}static toLinear(t){return t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92}static yToL(t){return t<=N.epsilon?t/N.refY*N.kappa:116*Math.pow(t/N.refY,1/3)-16}static lToY(t){return t<=8?N.refY*t/N.kappa:N.refY*Math.pow((t+16)/116,3)}static rgbChannelToHex(t){const e=Math.round(t*255),n=e%16,i=(e-n)/16|0;return N.hexChars.charAt(i)+N.hexChars.charAt(n)}static hexToRgbChannel(t,e){const n=N.hexChars.indexOf(t.charAt(e)),i=N.hexChars.indexOf(t.charAt(e+1));return(n*16+i)/255}static distanceFromOriginAngle(t,e,n){const i=e/(Math.sin(n)-t*Math.cos(n));return i<0?1/0:i}static distanceFromOrigin(t,e){return Math.abs(e)/Math.sqrt(Math.pow(t,2)+1)}static min6(t,e,n,i,r,a){return Math.min(t,Math.min(e,Math.min(n,Math.min(i,Math.min(r,a)))))}rgbToHex(){this.hex="#",this.hex+=N.rgbChannelToHex(this.rgb_r),this.hex+=N.rgbChannelToHex(this.rgb_g),this.hex+=N.rgbChannelToHex(this.rgb_b)}hexToRgb(){this.hex=this.hex.toLowerCase(),this.rgb_r=N.hexToRgbChannel(this.hex,1),this.rgb_g=N.hexToRgbChannel(this.hex,3),this.rgb_b=N.hexToRgbChannel(this.hex,5)}xyzToRgb(){this.rgb_r=N.fromLinear(N.m_r0*this.xyz_x+N.m_r1*this.xyz_y+N.m_r2*this.xyz_z),this.rgb_g=N.fromLinear(N.m_g0*this.xyz_x+N.m_g1*this.xyz_y+N.m_g2*this.xyz_z),this.rgb_b=N.fromLinear(N.m_b0*this.xyz_x+N.m_b1*this.xyz_y+N.m_b2*this.xyz_z)}rgbToXyz(){const t=N.toLinear(this.rgb_r),e=N.toLinear(this.rgb_g),n=N.toLinear(this.rgb_b);this.xyz_x=.41239079926595*t+.35758433938387*e+.18048078840183*n,this.xyz_y=.21263900587151*t+.71516867876775*e+.072192315360733*n,this.xyz_z=.019330818715591*t+.11919477979462*e+.95053215224966*n}xyzToLuv(){const t=this.xyz_x+15*this.xyz_y+3*this.xyz_z;let e=4*this.xyz_x,n=9*this.xyz_y;t!==0?(e/=t,n/=t):(e=NaN,n=NaN),this.luv_l=N.yToL(this.xyz_y),this.luv_l===0?(this.luv_u=0,this.luv_v=0):(this.luv_u=13*this.luv_l*(e-N.refU),this.luv_v=13*this.luv_l*(n-N.refV))}luvToXyz(){if(this.luv_l===0){this.xyz_x=0,this.xyz_y=0,this.xyz_z=0;return}const t=this.luv_u/(13*this.luv_l)+N.refU,e=this.luv_v/(13*this.luv_l)+N.refV;this.xyz_y=N.lToY(this.luv_l),this.xyz_x=0-9*this.xyz_y*t/((t-4)*e-t*e),this.xyz_z=(9*this.xyz_y-15*e*this.xyz_y-e*this.xyz_x)/(3*e)}luvToLch(){if(this.lch_l=this.luv_l,this.lch_c=Math.sqrt(this.luv_u*this.luv_u+this.luv_v*this.luv_v),this.lch_c<1e-8)this.lch_h=0;else{const t=Math.atan2(this.luv_v,this.luv_u);this.lch_h=t*180/Math.PI,this.lch_h<0&&(this.lch_h=360+this.lch_h)}}lchToLuv(){const t=this.lch_h/180*Math.PI;this.luv_l=this.lch_l,this.luv_u=Math.cos(t)*this.lch_c,this.luv_v=Math.sin(t)*this.lch_c}calculateBoundingLines(t){const e=Math.pow(t+16,3)/1560896,n=e>N.epsilon?e:t/N.kappa,i=n*(284517*N.m_r0-94839*N.m_r2),r=n*(838422*N.m_r2+769860*N.m_r1+731718*N.m_r0),a=n*(632260*N.m_r2-126452*N.m_r1),o=n*(284517*N.m_g0-94839*N.m_g2),c=n*(838422*N.m_g2+769860*N.m_g1+731718*N.m_g0),u=n*(632260*N.m_g2-126452*N.m_g1),l=n*(284517*N.m_b0-94839*N.m_b2),h=n*(838422*N.m_b2+769860*N.m_b1+731718*N.m_b0),d=n*(632260*N.m_b2-126452*N.m_b1);this.r0s=i/a,this.r0i=r*t/a,this.r1s=i/(a+126452),this.r1i=(r-769860)*t/(a+126452),this.g0s=o/u,this.g0i=c*t/u,this.g1s=o/(u+126452),this.g1i=(c-769860)*t/(u+126452),this.b0s=l/d,this.b0i=h*t/d,this.b1s=l/(d+126452),this.b1i=(h-769860)*t/(d+126452)}calcMaxChromaHpluv(){const t=N.distanceFromOrigin(this.r0s,this.r0i),e=N.distanceFromOrigin(this.r1s,this.r1i),n=N.distanceFromOrigin(this.g0s,this.g0i),i=N.distanceFromOrigin(this.g1s,this.g1i),r=N.distanceFromOrigin(this.b0s,this.b0i),a=N.distanceFromOrigin(this.b1s,this.b1i);return N.min6(t,e,n,i,r,a)}calcMaxChromaHsluv(t){const e=t/360*Math.PI*2,n=N.distanceFromOriginAngle(this.r0s,this.r0i,e),i=N.distanceFromOriginAngle(this.r1s,this.r1i,e),r=N.distanceFromOriginAngle(this.g0s,this.g0i,e),a=N.distanceFromOriginAngle(this.g1s,this.g1i,e),o=N.distanceFromOriginAngle(this.b0s,this.b0i,e),c=N.distanceFromOriginAngle(this.b1s,this.b1i,e);return N.min6(n,i,r,a,o,c)}hsluvToLch(){if(this.hsluv_l>99.9999999)this.lch_l=100,this.lch_c=0;else if(this.hsluv_l<1e-8)this.lch_l=0,this.lch_c=0;else{this.lch_l=this.hsluv_l,this.calculateBoundingLines(this.hsluv_l);const t=this.calcMaxChromaHsluv(this.hsluv_h);this.lch_c=t/100*this.hsluv_s}this.lch_h=this.hsluv_h}lchToHsluv(){if(this.lch_l>99.9999999)this.hsluv_s=0,this.hsluv_l=100;else if(this.lch_l<1e-8)this.hsluv_s=0,this.hsluv_l=0;else{this.calculateBoundingLines(this.lch_l);const t=this.calcMaxChromaHsluv(this.lch_h);this.hsluv_s=this.lch_c/t*100,this.hsluv_l=this.lch_l}this.hsluv_h=this.lch_h}hpluvToLch(){if(this.hpluv_l>99.9999999)this.lch_l=100,this.lch_c=0;else if(this.hpluv_l<1e-8)this.lch_l=0,this.lch_c=0;else{this.lch_l=this.hpluv_l,this.calculateBoundingLines(this.hpluv_l);const t=this.calcMaxChromaHpluv();this.lch_c=t/100*this.hpluv_p}this.lch_h=this.hpluv_h}lchToHpluv(){if(this.lch_l>99.9999999)this.hpluv_p=0,this.hpluv_l=100;else if(this.lch_l<1e-8)this.hpluv_p=0,this.hpluv_l=0;else{this.calculateBoundingLines(this.lch_l);const t=this.calcMaxChromaHpluv();this.hpluv_p=this.lch_c/t*100,this.hpluv_l=this.lch_l}this.hpluv_h=this.lch_h}hsluvToRgb(){this.hsluvToLch(),this.lchToLuv(),this.luvToXyz(),this.xyzToRgb()}hpluvToRgb(){this.hpluvToLch(),this.lchToLuv(),this.luvToXyz(),this.xyzToRgb()}hsluvToHex(){this.hsluvToRgb(),this.rgbToHex()}hpluvToHex(){this.hpluvToRgb(),this.rgbToHex()}rgbToHsluv(){this.rgbToXyz(),this.xyzToLuv(),this.luvToLch(),this.lchToHpluv(),this.lchToHsluv()}rgbToHpluv(){this.rgbToXyz(),this.xyzToLuv(),this.luvToLch(),this.lchToHpluv(),this.lchToHpluv()}hexToHsluv(){this.hexToRgb(),this.rgbToHsluv()}hexToHpluv(){this.hexToRgb(),this.rgbToHpluv()}}N.hexChars="0123456789abcdef";N.refY=1;N.refU=.19783000664283;N.refV=.46831999493879;N.kappa=903.2962962;N.epsilon=.0088564516;N.m_r0=3.240969941904521;N.m_r1=-1.537383177570093;N.m_r2=-.498610760293;N.m_g0=-.96924363628087;N.m_g1=1.87596750150772;N.m_g2=.041555057407175;N.m_b0=.055630079696993;N.m_b1=-.20397695888897;N.m_b2=1.056971514242878;export{Ot as F,N as H,_e as I,vn as R,Ke as S,B as a,Rt as b,Js as c,xe as d,rs as f,de as i,Ll as m,M as o,Zi as w};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
