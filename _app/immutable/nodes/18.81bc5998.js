var he=Object.defineProperty;var ce=(i,t,e)=>t in i?he(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var g=(i,t,e)=>(ce(i,typeof t!="symbol"?t+"":t,e),e),ue=(i,t,e)=>{if(!t.has(i))throw TypeError("Cannot "+e)};var Lt=(i,t,e)=>{if(t.has(i))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(i):t.set(i,e)};var Ht=(i,t,e)=>(ue(i,t,"access private method"),e);import{S as fe,i as pe,s as ge,k as m,a as U,q as R,N as de,l as v,h as f,c as A,m as b,r as I,n as d,a0 as _e,p as me,D as u,b as z,a1 as Bt,$ as Ot,L as Y,H as nt,J as _t,M as ve,o as be,e as Tt,u as le,a2 as we,w as Qt}from"../chunks/index.b1f4a11b.js";import{F as ye,f as yt,m as Me,I as jt,o as Gt,a as dt,i as Te,S as Ee,w as Fe,b as Wt,c as ke,d as De,H as Ve,R as Ue}from"../chunks/hsluv.6ea9c96e.js";class Et extends ye{constructor(){super(...arguments),this.name="MidiClass",this.defaultUnits="midi"}_frequencyToUnits(t){return yt(super._frequencyToUnits(t))}_ticksToUnits(t){return yt(super._ticksToUnits(t))}_beatsToUnits(t){return yt(super._beatsToUnits(t))}_secondsToUnits(t){return yt(super._secondsToUnits(t))}toMidi(){return this.valueOf()}toFrequency(){return Me(this.toMidi())}transpose(t){return new Et(this.context,this.toMidi()+t)}}class Ft extends jt{constructor(){super(Gt(Ft.getDefaults(),arguments,["voice","options"])),this.name="PolySynth",this._availableVoices=[],this._activeVoices=[],this._voices=[],this._gcTimeout=-1,this._averageActiveVoices=0;const t=Gt(Ft.getDefaults(),arguments,["voice","options"]);dt(!Te(t.voice),"DEPRECATED: The polyphony count is no longer the first argument.");const e=t.voice.getDefaults();this.options=Object.assign(e,t.options),this.voice=t.voice,this.maxPolyphony=t.maxPolyphony,this._dummyVoice=this._getNextAvailableVoice();const s=this._voices.indexOf(this._dummyVoice);this._voices.splice(s,1),this._gcTimeout=this.context.setInterval(this._collectGarbage.bind(this),1)}static getDefaults(){return Object.assign(jt.getDefaults(),{maxPolyphony:32,options:{},voice:Ee})}get activeVoices(){return this._activeVoices.length}_makeVoiceAvailable(t){this._availableVoices.push(t);const e=this._activeVoices.findIndex(s=>s.voice===t);this._activeVoices.splice(e,1)}_getNextAvailableVoice(){if(this._availableVoices.length)return this._availableVoices.shift();if(this._voices.length<this.maxPolyphony){const t=new this.voice(Object.assign(this.options,{context:this.context,onsilence:this._makeVoiceAvailable.bind(this)}));return t.connect(this.output),this._voices.push(t),t}else Fe("Max polyphony exceeded. Note dropped.")}_collectGarbage(){if(this._averageActiveVoices=Math.max(this._averageActiveVoices*.95,this.activeVoices),this._availableVoices.length&&this._voices.length>Math.ceil(this._averageActiveVoices+1)){const t=this._availableVoices.shift(),e=this._voices.indexOf(t);this._voices.splice(e,1),this.context.isOffline||t.dispose()}}_triggerAttack(t,e,s){t.forEach(r=>{const n=new Et(this.context,r).toMidi(),o=this._getNextAvailableVoice();o&&(o.triggerAttack(r,e,s),this._activeVoices.push({midi:n,voice:o,released:!1}),this.log("triggerAttack",r,e))})}_triggerRelease(t,e){t.forEach(s=>{const r=new Et(this.context,s).toMidi(),n=this._activeVoices.find(({midi:o,released:a})=>o===r&&!a);n&&(n.voice.triggerRelease(e),n.released=!0,this.log("triggerRelease",s,e))})}_scheduleEvent(t,e,s,r){dt(!this.disposed,"Synth was already disposed"),s<=this.now()?t==="attack"?this._triggerAttack(e,s,r):this._triggerRelease(e,s):this.context.setTimeout(()=>{this._scheduleEvent(t,e,s,r)},s-this.now())}triggerAttack(t,e,s){Array.isArray(t)||(t=[t]);const r=this.toSeconds(e);return this._scheduleEvent("attack",t,r,s),this}triggerRelease(t,e){Array.isArray(t)||(t=[t]);const s=this.toSeconds(e);return this._scheduleEvent("release",t,s),this}triggerAttackRelease(t,e,s,r){const n=this.toSeconds(s);if(this.triggerAttack(t,n,r),Wt(e)){dt(Wt(t),"If the duration is an array, the notes must also be an array"),t=t;for(let o=0;o<t.length;o++){const a=e[Math.min(o,e.length-1)],p=this.toSeconds(a);dt(p>0,"The duration must be greater than 0"),this.triggerRelease(t[o],n+p)}}else{const o=this.toSeconds(e);dt(o>0,"The duration must be greater than 0"),this.triggerRelease(t,n+o)}return this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1)),this}set(t){const e=ke(t,["onsilence","context"]);return this.options=De(this.options,e),this._voices.forEach(s=>s.set(e)),this._dummyVoice.set(e),this}get(){return this._dummyVoice.get()}releaseAll(t){const e=this.toSeconds(t);return this._activeVoices.forEach(({voice:s})=>{s.triggerRelease(e)}),this}dispose(){return super.dispose(),this._dummyVoice.dispose(),this._voices.forEach(t=>t.dispose()),this._activeVoices=[],this._availableVoices=[],this.context.clearInterval(this._gcTimeout),this}}const Ae=!0,Oe=Object.freeze(Object.defineProperty({__proto__:null,prerender:Ae},Symbol.toStringTag,{value:"Module"}));class $ extends DataView{constructor(t,e){if(t>15e9)throw new Error("BitArray size can not exceed 1.5e10");super(e instanceof ArrayBuffer?e:new ArrayBuffer(Number((BigInt(t+31)&~31n)>>3n)))}get length(){return this.buffer.byteLength<<3}get popcount(){for(var t=1431655765,e=858993459,s=252645135,r=16843009,n=0,o,a=0,p=this.buffer.byteLength>>2;a<p;a++)o=this.getUint32(a<<2),o-=o>>1&t,o=(o&e)+(o>>2&e),o=o+(o>>4)&s,n+=o*r>>56;return n}and(t){for(var e=Math.min(this.buffer.byteLength,t.buffer.byteLength),s=new $(e<<3,null),r=0;r<e;r+=4)s.setUint32(r,this.getUint32(r)&t.getUint32(r));return s}at(t){return this.getUint8(t>>3)&1<<(t&7)?1:0}or(t){for(var e=Math.min(this.buffer.byteLength,t.buffer.byteLength),s=new $(e<<3,null),r=0;r<e;r+=4)s.setUint32(r,this.getUint32(r)|t.getUint32(r));return s}not(){for(var t=this.buffer.byteLength,e=new $(t<<3,null),s=0;s<t;s+=4)e.setUint32(s,~(this.getUint32(s)>>0));return e}reset(t){this.setUint8(t>>3,this.getUint8(t>>3)&~(1<<(t&7)))}set(t){this.setUint8(t>>3,this.getUint8(t>>3)|1<<(t&7))}slice(t=0,e=this.length){return new $(e-t,this.buffer.slice(t>>3,e>>3))}toggle(t){this.setUint8(t>>3,this.getUint8(t>>3)^1<<(t&7))}toString(){return new Uint8Array(this.buffer).reduce((t,e)=>t+((BigInt(e)*0x0202020202n&0x010884422010n)%1023n).toString(2).padStart(8,"0"),"")}xor(t){for(var e=Math.min(this.buffer.byteLength,t.buffer.byteLength),s=new $(e<<3,null),r=0;r<e;r+=4)s.setUint32(r,this.getUint32(r)^t.getUint32(r));return s}}class Vt{constructor(){g(this,"attackRelease");g(this,"duration");g(this,"startTime");g(this,"instrument");g(this,"notes")}save(){new $(this.notes.length<=4?64:96,null)}setDuration(t){return this.duration=t,this}next(t){t.startTime=this.startTime+this.duration,t.duration=this.duration}copyWithoutNotes(){const t=new Vt;return t.attackRelease=this.attackRelease,t.duration=this.duration,t.startTime=this.startTime,t.instrument=this.instrument,t}}function Mt(i,t){let e=new Vt;return e.attackRelease=0,e.notes=t,e.duration=500,e.startTime=i,e.instrument=0,e}const _=class _{constructor(t){g(this,"name");g(this,"size");g(this,"getFreq");g(this,"invFreq");Object.assign(this,t),_.values.push(this)}};g(_,"values",[]),g(_,"Exp8",new _({name:"8 ET",size:8,getFreq:t=>{let e=t+40;return parseFloat(Math.pow(Math.pow(2,1/8),e).toFixed(4))}})),g(_,"Linear8",new _({name:"8 Lin",size:8,getFreq:t=>{let e=Math.pow(2,Math.floor(t/8)+5),s=Math.pow(2,Math.floor(t/8)+6);return e+(s-e)/8*(t%8)}})),g(_,"Divisional8",new _({name:"8 Div",size:8,getFreq:t=>{if(t%8==0)return Math.pow(2,t/8+5);let e=Math.pow(2,Math.floor(t/8)+5),r=Math.pow(2,Math.floor(t/8)+6)-e;return t%8==1?e+r*.2:t%8==2?e+r/3:t%8==3?e+r*.4:t%8==4?e+r*.5:t%8==5?e+r*.6:t%8==6?e+2*r/3:e+r*.8},invFreq:t=>{const e=Math.floor(Math.log2(t)),s=Math.pow(2,e),r=e-5,n=(t-s)/s;return n<.1?8*r+0:n<.265?8*r+1:n<.36?8*r+2:n<.45?8*r+3:n<.55?8*r+4:n<.63?8*r+5:n<.73?8*r+6:8*r+7}})),g(_,"DivisionalExp8",new _({name:"8 Exp Div",size:8,getFreq:t=>{let e=(Math.floor(t/8)+5)*30;return t%8==0?Math.pow(2,t/8+5):t%8==1?parseFloat(Math.pow(Math.pow(2,1/30),6+e).toFixed(4)):t%8==2?parseFloat(Math.pow(Math.pow(2,1/30),10+e).toFixed(4)):t%8==3?parseFloat(Math.pow(Math.pow(2,1/30),12+e).toFixed(4)):t%8==4?parseFloat(Math.pow(Math.pow(2,1/30),15+e).toFixed(4)):t%8==5?parseFloat(Math.pow(Math.pow(2,1/30),18+e).toFixed(4)):t%8==6?parseFloat(Math.pow(Math.pow(2,1/30),20+e).toFixed(4)):parseFloat(Math.pow(Math.pow(2,1/30),24+e).toFixed(4))},invFreq:t=>{const e=Math.floor(Math.log2(t)),s=Math.log2(t)-e;return console.log(s),s<.07?8*(e-5):s<.2?8*(e-5)+1:s<.28?8*(e-5)+2:s<.39?8*(e-5)+3:s<.46?8*(e-5)+4:s<.55?8*(e-5)+5:s<.66?8*(e-5)+6:8*(e-5)+7}})),g(_,"DivisionalExp8Copilot",new _({name:"8 Exp Div Copilot",size:8,getFreq:t=>{let e=Math.floor(t/8)+5;return t%8==0?Math.pow(2,t/8+5):t%8==1?Math.pow(2,e)*Math.pow(2,1/5):t%8==2?Math.pow(2,e)*Math.pow(2,1/3):t%8==3?Math.pow(2,e)*Math.pow(2,2/5):t%8==4?Math.pow(2,e)*Math.pow(2,1/2):t%8==5?Math.pow(2,e)*Math.pow(2,3/5):t%8==6?Math.pow(2,e)*Math.pow(2,2/3):Math.pow(2,e)*Math.pow(2,4/5)}})),g(_,"Pleasant8",new _({name:"8 Pls",size:8,getFreq:t=>{if(t%8==0)return Math.pow(2,t/8+5);let e=Math.pow(2,Math.floor(t/8)+5),r=Math.pow(2,Math.floor(t/8)+6)-e;return t%8==1?e+r*.03125:t%8==2?e+7*r/27:t%8==3?e+r*.31831:t%8==4?e+r*.5:t%8==5?e+r/Math.sqrt(Math.E):t%8==6?e+r*.71875:e+r*.8125}})),g(_,"Log8",new _({name:"8 AET",size:8,getFreq:t=>{if(t%8==0)return Math.pow(2,t/8+5);let e=Math.pow(2,Math.floor(t/8)+5),r=Math.pow(2,Math.floor(t/8)+6)-e;return e+r*Math.log2(t%8/8+1)}})),g(_,"Exp12",new _({name:"12 ET",size:12,getFreq:t=>{let e=t+60;return parseFloat(Math.pow(Math.pow(2,1/12),e).toFixed(4))},invFreq:t=>Math.round(12*Math.log2(t))})),g(_,"Exp12Piano",new _({name:"12 ET Piano",size:12,getFreq:t=>{let e=Math.pow(2,Math.floor(t/12)+5),r=Math.pow(2,Math.floor(t/12)+6)-e;return t%12==0?e+r*.02199:t%12==1?e+r*.08273:t%12==2?e+r*.14711:t%12==3?e+r*.21535:t%12==4?e+r*.28762:t%12==5?e+r*.36418:t%12==6?e+r*.44527:t%12==7?e+r*.53125:t%12==8?e+r*.62227:t%12==9?e+r*.71875:t%12==10?e+r*.82094:e+r*.92922}})),g(_,"Divisional14",new _({name:"14 Div",size:14,getFreq:t=>{if(t%14==0)return Math.pow(2,t/14+5);let e=Math.pow(2,Math.floor(t/14)+5),r=Math.pow(2,Math.floor(t/14)+6)-e;return t%14==1?e+r/7:t%14==2?e+r/5:t%14==3?e+2*r/7:t%14==4?e+r/3:t%14==5?e+r*.4:t%14==6?e+3*r/7:t%14==7?e+r*.5:t%14==8?e+4*r/7:t%14==9?e+r*.6:t%14==10?e+2*r/3:t%14==11?e+5*r/7:t%14==12?e+r*.8:e+6*r/7}})),g(_,"Exp30",new _({name:"30 ET",size:30,getFreq:t=>{let e=t+150;return parseFloat(Math.pow(Math.pow(2,1/30),e).toFixed(4))}}));let x=_;class Ut{constructor(t){g(this,"chords",new Array);g(this,"octaveDivision");g(this,"noteFormat");this.octaveDivision=t}push(t){this.chords.push(t)}convert(t){const e=new Ut(t);e.octaveDivision=t;for(const r of this.chords){const n=r.copyWithoutNotes();n.notes=[];for(var s=0;s<r.notes.length;s++){const o=r.notes[s];console.log("Reading note index: "+o);const a=this.octaveDivision.getFreq(o);console.log("Has freq of "+a);const p=t.invFreq(a);console.log("Index n new octave "+p);const q=t.getFreq(p);console.log("New Freq "+q),n.notes.push(p)}e.push(n)}return e}}let qe={C:0,"C#":1,D:2,"D#":3,E:4,F:5,"F#":6,G:7,"G#":8,A:9,"A#":10,B:11};function Jt(i){return console.log("Music Note"),i}var kt,ae;class Pe{constructor(){Lt(this,kt);g(this,"freeList",[])}playNote(t,e){let s;this.freeList.length==0?s=Ht(this,kt,ae).call(this):s=this.freeList.pop(),s.triggerAttackRelease(t,e/1e3),setTimeout(()=>{this.freeList.push(s)},e+10)}}kt=new WeakSet,ae=function(){return new Ft().toDestination()};class Ne{constructor(){g(this,"song");g(this,"noteFormat");g(this,"lastDuration")}playQ(t){return this.play(t,250),this}playH(t){return this.play(t,500),this}playD(t){return this.play(t,2e3),this}play(t,e=1e3){return Array.isArray(t)?this.song.push(Mt(this.lastTime,t.map(this.noteFormat.convertToIndex)).setDuration(e)):this.song.push(Mt(this.lastTime,[this.noteFormat.convertToIndex(t)]).setDuration(e)),this.lastDuration=e,this}thenQ(t){return this.waitThenPlay(this.lastDuration,t,250),this}thenH(t){return this.waitThenPlay(this.lastDuration,t,500),this}then(t){return this.waitThenPlay(this.lastDuration,t,1e3),this}thenD(t){return this.waitThenPlay(this.lastDuration,t,2e3),this}waitThenPlay(t,e,s=500){Array.isArray(e)?this.song.push(Mt(this.lastTime+t,e.map(this.noteFormat.convertToIndex)).setDuration(s)):this.song.push(Mt(this.lastTime+t,[this.noteFormat.convertToIndex(e)]).setDuration(s)),this.lastDuration=s}wait(t){return this.lastDuration+=t,this}get lastTime(){return this.song.chords.length==0?0:this.song.chords[this.song.chords.length-1].startTime}}class Se{constructor(){g(this,"convertToIndex",t=>36+qe[t])}}function Kt(i,t,e){const s=i.slice();return s[7]=t[e],s}function Xt(i,t,e){const s=i.slice();return s[37]=t[e],s}function Yt(i,t,e){const s=i.slice();return s[37]=t[e],s}function Zt(i,t,e){const s=i.slice();return s[42]=t[e],s[44]=e,s}function $t(i,t,e){const s=i.slice();return s[45]=t[e],s[47]=e,s}function xt(i){let t,e,s=i[45].name+"",r;return{c(){t=m("option"),e=R("Octaves: "),r=R(s),this.h()},l(n){t=v(n,"OPTION",{});var o=b(t);e=I(o,"Octaves: "),r=I(o,s),o.forEach(f),this.h()},h(){t.selected=!0,t.__value=i[45],t.value=t.__value},m(n,o){z(n,t,o),u(t,e),u(t,r)},p:nt,d(n){n&&f(t)}}}function te(i){let t,e,s,r,n;function o(){return i[15](i[44])}return{c(){t=m("button"),e=R(i[44]),s=U(),this.h()},l(a){t=v(a,"BUTTON",{style:!0,class:!0});var p=b(t);e=I(p,i[44]),s=A(p),p.forEach(f),this.h()},h(){d(t,"style","min-height:5vh;background: "+i[12](i[44])),d(t,"class","p-0 m-0")},m(a,p){z(a,t,p),u(t,e),u(t,s),r||(n=Y(t,"click",o),r=!0)},p(a,p){i=a},d(a){a&&f(t),r=!1,n()}}}function Re(i){let t,e,s,r;return{c(){t=m("button"),e=R("Record"),this.h()},l(n){t=v(n,"BUTTON",{class:!0});var o=b(t);e=I(o,"Record"),o.forEach(f),this.h()},h(){d(t,"class","btn m-2 btn-error ")},m(n,o){z(n,t,o),u(t,e),s||(r=Y(t,"click",i[13]),s=!0)},p:nt,d(n){n&&f(t),s=!1,r()}}}function Ie(i){let t,e,s,r;return{c(){t=m("button"),e=R("Stop"),this.h()},l(n){t=v(n,"BUTTON",{class:!0});var o=b(t);e=I(o,"Stop"),o.forEach(f),this.h()},h(){d(t,"class","btn btn-warning m-2")},m(n,o){z(n,t,o),u(t,e),s||(r=Y(t,"click",i[13]),s=!0)},p:nt,d(n){n&&f(t),s=!1,r()}}}function ee(i){let t,e;return{c(){t=m("audio"),e=m("source"),this.h()},l(s){t=v(s,"AUDIO",{});var r=b(t);e=v(r,"SOURCE",{}),r.forEach(f),this.h()},h(){t.controls=!0},m(s,r){z(s,t,r),u(t,e),i[16](e),i[17](t)},p:nt,d(s){s&&f(t),i[16](null),i[17](null)}}}function se(i){let t,e=i[7],s=[];for(let r=0;r<e.length;r+=1)s[r]=re(Yt(i,e,r));return{c(){for(let r=0;r<s.length;r+=1)s[r].c();t=Tt()},l(r){for(let n=0;n<s.length;n+=1)s[n].l(r);t=Tt()},m(r,n){for(let o=0;o<s.length;o+=1)s[o]&&s[o].m(r,n);z(r,t,n)},p(r,n){if(n[0]&4224){e=r[7];let o;for(o=0;o<e.length;o+=1){const a=Yt(r,e,o);s[o]?s[o].p(a,n):(s[o]=re(a),s[o].c(),s[o].m(t.parentNode,t))}for(;o<s.length;o+=1)s[o].d(1);s.length=e.length}},d(r){_t(s,r),r&&f(t)}}}function re(i){let t,e=i[37]+"",s,r,n;return{c(){t=m("button"),s=R(e),r=U(),this.h()},l(o){t=v(o,"BUTTON",{style:!0,class:!0});var a=b(t);s=I(a,e),r=A(a),a.forEach(f),this.h()},h(){d(t,"style",n="background: "+i[12](i[37])),d(t,"class","p-0 m-0")},m(o,a){z(o,t,a),u(t,s),u(t,r)},p(o,a){a[0]&128&&e!==(e=o[37]+"")&&le(s,e),a[0]&128&&n!==(n="background: "+o[12](o[37]))&&d(t,"style",n)},d(o){o&&f(t)}}}function oe(i){let t,e=i[7],s=[];for(let r=0;r<e.length;r+=1)s[r]=ne(Xt(i,e,r));return{c(){for(let r=0;r<s.length;r+=1)s[r].c();t=Tt()},l(r){for(let n=0;n<s.length;n+=1)s[n].l(r);t=Tt()},m(r,n){for(let o=0;o<s.length;o+=1)s[o]&&s[o].m(r,n);z(r,t,n)},p(r,n){if(n[0]&4098){e=r[7];let o;for(o=0;o<e.length;o+=1){const a=Xt(r,e,o);s[o]?s[o].p(a,n):(s[o]=ne(a),s[o].c(),s[o].m(t.parentNode,t))}for(;o<s.length;o+=1)s[o].d(1);s.length=e.length}},d(r){_t(s,r),r&&f(t)}}}function ne(i){let t,e=i[37]+"",s,r,n;return{c(){t=m("button"),s=R(e),r=U(),this.h()},l(o){t=v(o,"BUTTON",{style:!0,class:!0});var a=b(t);s=I(a,e),r=A(a),a.forEach(f),this.h()},h(){d(t,"style",n="background: "+i[12](i[37])),d(t,"class","p-1")},m(o,a){z(o,t,a),u(t,s),u(t,r)},p(o,a){a[0]&2&&e!==(e=o[37]+"")&&le(s,e),a[0]&2&&n!==(n="background: "+o[12](o[37]))&&d(t,"style",n)},d(o){o&&f(t)}}}function ie(i){let t,e,s,r,n=i[7]!=null&&oe(i);function o(){return i[19](i[7])}return{c(){t=m("button"),n&&n.c(),e=U(),this.h()},l(a){t=v(a,"BUTTON",{class:!0});var p=b(t);n&&n.l(p),e=A(p),p.forEach(f),this.h()},h(){d(t,"class","flex flex-col p-1")},m(a,p){z(a,t,p),n&&n.m(t,null),u(t,e),s||(r=Y(t,"click",o),s=!0)},p(a,p){i=a,i[7]!=null?n?n.p(i,p):(n=oe(i),n.c(),n.m(t,e)):n&&(n.d(1),n=null)},d(a){a&&f(t),n&&n.d(),s=!1,r()}}}function ze(i){let t,e,s,r,n,o,a,p,q,J,K,k,C,Q,y,Z,it,lt,P,at,tt,j,X,ht,ct,N,L,ut,G,ft,pt,W,gt,c,w,S,et=x.values,T=[];for(let h=0;h<et.length;h+=1)T[h]=xt($t(i,et,h));let st={length:i[6].size*Dt},E=[];for(let h=0;h<st.length;h+=1)E[h]=te(Zt(i,st,h));function At(h,M){return h[2]?Ie:Re}let mt=At(i),H=mt(i),D=i[3]&&ee(i),V=i[7]!=null&&se(i),rt=i[1],F=[];for(let h=0;h<rt.length;h+=1)F[h]=ie(Kt(i,rt,h));return{c(){t=m("meta"),e=U(),s=m("div"),r=m("h1"),n=R("Funky Piano 2: The Refunkening"),o=U(),a=m("select");for(let h=0;h<T.length;h+=1)T[h].c();p=U(),q=m("div");for(let h=0;h<E.length;h+=1)E[h].c();K=U(),k=m("div"),H.c(),C=U(),D&&D.c(),Q=U(),y=m("div"),Z=m("div"),it=R("Song Player"),lt=U(),P=m("button"),at=R("Play Song"),tt=U(),j=m("div"),X=m("div"),ht=R("Chord Player"),ct=U(),N=m("div"),L=m("input"),ut=U(),G=m("button"),ft=R("Play"),pt=U(),W=m("div"),V&&V.c(),gt=U(),c=m("div");for(let h=0;h<F.length;h+=1)F[h].c();this.h()},l(h){const M=de("svelte-6k6tpx",document.head);t=v(M,"META",{name:!0,content:!0}),M.forEach(f),e=A(h),s=v(h,"DIV",{class:!0,style:!0});var l=b(s);r=v(l,"H1",{class:!0});var B=b(r);n=I(B,"Funky Piano 2: The Refunkening"),B.forEach(f),o=A(l),a=v(l,"SELECT",{class:!0});var qt=b(a);for(let O=0;O<T.length;O+=1)T[O].l(qt);qt.forEach(f),p=A(l),q=v(l,"DIV",{class:!0,style:!0});var Pt=b(q);for(let O=0;O<E.length;O+=1)E[O].l(Pt);Pt.forEach(f),K=A(l),k=v(l,"DIV",{class:!0});var vt=b(k);H.l(vt),C=A(vt),D&&D.l(vt),vt.forEach(f),Q=A(l),y=v(l,"DIV",{});var bt=b(y);Z=v(bt,"DIV",{});var Nt=b(Z);it=I(Nt,"Song Player"),Nt.forEach(f),lt=A(bt),P=v(bt,"BUTTON",{class:!0});var St=b(P);at=I(St,"Play Song"),St.forEach(f),bt.forEach(f),tt=A(l),j=v(l,"DIV",{});var wt=b(j);X=v(wt,"DIV",{});var Rt=b(X);ht=I(Rt,"Chord Player"),Rt.forEach(f),ct=A(wt),N=v(wt,"DIV",{class:!0});var ot=b(N);L=v(ot,"INPUT",{type:!0,class:!0}),ut=A(ot),G=v(ot,"BUTTON",{class:!0});var It=b(G);ft=I(It,"Play"),It.forEach(f),pt=A(ot),W=v(ot,"DIV",{class:!0});var zt=b(W);V&&V.l(zt),zt.forEach(f),ot.forEach(f),wt.forEach(f),gt=A(l),c=v(l,"DIV",{class:!0});var Ct=b(c);for(let O=0;O<F.length;O+=1)F[O].l(Ct);Ct.forEach(f),l.forEach(f),this.h()},h(){document.title="Funky Piano 2",d(t,"name","description"),d(t,"content","Play that funkier music"),d(r,"class","text-4xl pt-8 font-semibold text-center"),d(a,"class","select w-full bg-slate-800 join-item"),i[6]===void 0&&_e(()=>i[14].call(a)),d(q,"class","grid gap-0 grid-flow-dense m-2"),d(q,"style",J="grid-template-columns: repeat("+i[6].size+", minmax(0, 1fr));"),d(k,"class","flex"),d(P,"class","btn btn-primary"),d(L,"type","text"),d(L,"class","input"),d(G,"class","btn"),d(W,"class","flex flex-col"),d(N,"class","grid grid-rows-1 grid-cols-3"),d(c,"class","flex w-full flex-wrap gap-1"),d(s,"class","bg-base-100 h-full"),me(s,"min-height","92.25vh")},m(h,M){u(document.head,t),z(h,e,M),z(h,s,M),u(s,r),u(r,n),u(s,o),u(s,a);for(let l=0;l<T.length;l+=1)T[l]&&T[l].m(a,null);Bt(a,i[6],!0),u(s,p),u(s,q);for(let l=0;l<E.length;l+=1)E[l]&&E[l].m(q,null);u(s,K),u(s,k),H.m(k,null),u(k,C),D&&D.m(k,null),u(s,Q),u(s,y),u(y,Z),u(Z,it),u(y,lt),u(y,P),u(P,at),u(s,tt),u(s,j),u(j,X),u(X,ht),u(j,ct),u(j,N),u(N,L),Ot(L,i[0]),u(N,ut),u(N,G),u(G,ft),u(N,pt),u(N,W),V&&V.m(W,null),u(s,gt),u(s,c);for(let l=0;l<F.length;l+=1)F[l]&&F[l].m(c,null);w||(S=[Y(a,"change",i[14]),Y(P,"click",i[8]),Y(L,"input",i[18]),Y(G,"click",i[9])],w=!0)},p(h,M){if(M&0){et=x.values;let l;for(l=0;l<et.length;l+=1){const B=$t(h,et,l);T[l]?T[l].p(B,M):(T[l]=xt(B),T[l].c(),T[l].m(a,null))}for(;l<T.length;l+=1)T[l].d(1);T.length=et.length}if(M[0]&64&&Bt(a,h[6]),M[0]&6208){st={length:h[6].size*Dt};let l;for(l=0;l<st.length;l+=1){const B=Zt(h,st,l);E[l]?E[l].p(B,M):(E[l]=te(B),E[l].c(),E[l].m(q,null))}for(;l<E.length;l+=1)E[l].d(1);E.length=st.length}if(M[0]&64&&J!==(J="grid-template-columns: repeat("+h[6].size+", minmax(0, 1fr));")&&d(q,"style",J),mt===(mt=At(h))&&H?H.p(h,M):(H.d(1),H=mt(h),H&&(H.c(),H.m(k,C))),h[3]?D?D.p(h,M):(D=ee(h),D.c(),D.m(k,null)):D&&(D.d(1),D=null),M[0]&1&&L.value!==h[0]&&Ot(L,h[0]),h[7]!=null?V?V.p(h,M):(V=se(h),V.c(),V.m(W,null)):V&&(V.d(1),V=null),M[0]&5122){rt=h[1];let l;for(l=0;l<rt.length;l+=1){const B=Kt(h,rt,l);F[l]?F[l].p(B,M):(F[l]=ie(B),F[l].c(),F[l].m(c,null))}for(;l<F.length;l+=1)F[l].d(1);F.length=rt.length}},i:nt,o:nt,d(h){f(t),h&&f(e),h&&f(s),_t(T,h),_t(E,h),H.d(),D&&D.d(),V&&V.d(),_t(F,h),w=!1,ve(S)}}}const Dt=8;function Ce(i,t,e){let s,r=[],n=new Ve,o,a,p=!1,q=!1,J,K,k,C,Q,y=x.Exp8;be(()=>{a=new Ue,o=new Pe,new AudioContext,Z(),it()});function Z(){Q=new Ut(x.Exp12Piano);const c=new Ne;c.noteFormat=new Se,c.song=Q,c.playH("E").thenH("D").thenH("C").wait(500).thenH("E").thenH("D").thenH("C").wait(500).thenQ("E").thenQ("E").thenQ("E").thenQ("E").thenQ("D").thenQ("D").thenQ("D").thenQ("D").thenH("E").thenH("D").thenH("C"),Q=Q.convert(x.DivisionalExp8)}function it(){for(var c=18;c<36;c++)for(var w=c+1;w<36;w++){r.push([c,w]);for(var S=w+1;S<36;S++)r.push([c,w,S])}e(1,r)}async function lt(){for(const c of Q.chords)console.log(c.notes),setTimeout(()=>{j(c.notes),console.log(c.notes)},c.startTime)}function P(c,w){o.playNote(c,w)}function at(){for(const c of s){const w=parseInt(c);if(isNaN(w))continue;const S=y.getFreq(w);P(S,250)}}function tt(c,w=500){P(c.map(S=>y.getFreq(Jt(S))),w)}function j(c,w=500){P(c.map(S=>Q.octaveDivision.getFreq(Jt(S))),w)}function X(c){const w=y.getFreq(c);console.log("Playing freq: "+w),P(w,250)}function ht(c){return n.hsluv_h=N(c),n.hsluv_s=100,n.hsluv_l=12+Dt*y.size*(c/y.size/y.size),n.hsluvToHex(),n.hex}function ct(c){return 360*(c%y.size/y.size)}function N(c){return ct(c)}async function L(){if(p){e(3,q=!0),J=await a.stop(),console.log("Recording sizE: "+J.size);const c=URL.createObjectURL(J);e(5,k.src=c,k),K.load()}else a.start();e(2,p=!p)}function ut(){y=we(this),e(6,y)}const G=c=>X(c);function ft(c){Qt[c?"unshift":"push"](()=>{k=c,e(5,k)})}function pt(c){Qt[c?"unshift":"push"](()=>{K=c,e(4,K)})}function W(){C=this.value,e(0,C)}const gt=c=>tt(c);return i.$$.update=()=>{i.$$.dirty[0]&1&&e(7,s=C==null?void 0:C.split(","))},[C,r,p,q,K,k,y,s,lt,at,tt,X,ht,L,ut,G,ft,pt,W,gt]}class Qe extends fe{constructor(t){super(),pe(this,t,Ce,ze,ge,{},null,[-1,-1])}}export{Qe as component,Oe as universal};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
