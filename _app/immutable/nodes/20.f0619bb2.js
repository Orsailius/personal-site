var C=Object.defineProperty;var P=(u,o,c)=>o in u?C(u,o,{enumerable:!0,configurable:!0,writable:!0,value:c}):u[o]=c;var y=(u,o,c)=>(P(u,typeof o!="symbol"?o+"":o,c),c);import{S as T,i as O,s as F,k as h,a as b,q as L,O as H,l as E,h as p,c as I,m as S,r as k,n as x,p as j,D as _,b as A,H as w}from"../chunks/index.d9fb27cb.js";import{g as K}from"../chunks/main.709fbbde.js";const M=!0,z=Object.freeze(Object.defineProperty({__proto__:null,prerender:M},Symbol.toStringTag,{value:"Module"})),D=K(String.raw`
Compila {

    Exp
    = Statement*
    
    Enum
    = "enum" ident ident ("," ident)* ";"        
    
    Class
    ="class" ident Statement* ";"

    Totality
    = "totality" ident ("with" "id")* Statement* ";"
    
    Statement
        = Declaration ";" --declaration
    | "return" Expression ";" --return
    | "failif" Expression ";" --failif
    | "yield" Expression ";" --yield
    | Function ";" --function
    | Assignment  ";" --assignment      
    | IfStatement ";" --if
    | ForStatement ";"--for
    | Iterative ";" --iter     
    
    IfStatement
    = "if" "(" Expression ")" Statement* ElseIf* Else*

    ElseIf
    ="else" "if" "(" Expression ")" Statement*

    Else
    ="else" Statement*

    ForStatement
    = "for" "(" (Expression | Declaration) ")" Statement* --foreach
    | "for" "(" Expression ";" Expression ";" Expression ")" Statement* --fori
    | "for" "(" ident ("," ident)* "of" Expression ")" Statement* --forof

    Iterative
    = iterativeKeyword "(" Expression ")" (Statement* | Expression) --long
    | iterativeKeyword "(" ident "of" Expression ")" (Statement* | Expression)  -- explicit
    | iterativeKeyword "(" Expression "," Lambda ")" --lambda

    Lambda
    = "(" Params ")" "=>" Expression
    
    Expression
    = Expression infix Expression --infix
    | prefix Expression --prefix
    | ident "(" Expression ("," Expression)* ")" --functioncall
    | Expression "[" Expression "]" --index
    | "(" Expression ")" --brackets
    | Literal--literal
    | ident ("." Expression)* --callchain    
    | "new" ident "(" Expression* ")" --new  
    
    Declaration
    = ("required")* ("const" | "let")* "!"* ident "=" Expression
    
    Assignment
    = ident "=" Expression --normal
    | ident "~=" Expression --fail   
    | ident "?" Expression "=" Expression --assignif
    
    Function
    = ident "(" Params* ")" (":" Type)* Statement*

    Type
    = ident (("|" | "&") ident)*

    Params
    = Param "," Params --multi
    |  Param --single
    
    Param
    =  Type ident (RHSAssignment)*--typed
    | ident (RHSAssignment)*--typeless

    RHSAssignment
    = "=" Literal  

    Literal
    = string | number | ArrayLiteral | ObjectLiteral | boolean | "fail" | "null"
    
    ArrayLiteral
    = "[""]" --empty
    | "[" Expression ("," Expression)* "]" --normal

    ObjectLiteral
    = "{" "}" -- empty
    | "{" ident ":" Expression ("," ident ":" Expression)* "}" --normal

    ident  (an identifier)
    = letter alnum*
    
    infix
    ="+" | "-" | "*" | "/" | "<" | ">" | ">=" | "<=" | "=="

    prefix
    ="~" | "-"  
    
    knownType
        = "string" | "int" | "number" | "decimal" | "float" | "double" | "boolean" | "any"
    
    iterativeKeyword
    ="map" | "filter" | "find" | "sort" | "sortInto"
    
    string
        = "\"" (~"\"" any )+ "\""
    
    boolean
    ="true" | "false"

    number  (a number)
    = digit* "." digit+  -- fract
    | digit+             -- whole
    }
`);function R(u){let o,c,r,m,v,g,e,t,n,i;return{c(){o=h("meta"),c=b(),r=h("div"),m=h("div"),v=L("Make a Web Card"),g=b(),e=h("div"),t=L("Using a Domain Specific Language"),n=b(),i=h("div"),this.h()},l(a){const l=H("svelte-kb2evl",document.head);o=E(l,"META",{name:!0,content:!0}),l.forEach(p),c=I(a),r=E(a,"DIV",{class:!0,style:!0});var s=S(r);m=E(s,"DIV",{class:!0});var d=S(m);v=k(d,"Make a Web Card"),d.forEach(p),g=I(s),e=E(s,"DIV",{class:!0});var f=S(e);t=k(f,"Using a Domain Specific Language"),f.forEach(p),n=I(s),i=E(s,"DIV",{class:!0});var q=S(i);q.forEach(p),s.forEach(p),this.h()},h(){document.title="High Level Language",x(o,"name","description"),x(o,"content","About this app"),x(m,"class","text-4xl text-center font-semibold pt-8"),x(e,"class","text-sm text-center pb-8"),x(i,"class","flex"),x(r,"class","bg-base-100 h-full"),j(r,"min-height","92.25vh")},m(a,l){_(document.head,o),A(a,c,l),A(a,r,l),_(r,m),_(m,v),_(r,g),_(r,e),_(e,t),_(r,n),_(r,i)},p:w,i:w,o:w,d(a){p(o),a&&p(c),a&&p(r)}}}function V(u){const o=[` binarySearch(arr, val, low = 0, high = fail)
            high ~= arr.length;
            failif high < low;
            const mid = (low + high) / 2;
            if(val < arr[mid])
                return binarySearch(arr,val,low, mid-1);
            else if(val < arr[mid])
                return binarySearch(arr,val, mid+1, high);
            else
                return mid;
            ;
        ;`,`const mid = (low + high) / 2;
        `];class c{constructor(){y(this,"code","");this.writeLine('const fail = Symbol("fail");')}write(t){this.code+=t}writeLine(t){this.code+=t+`
`}}const r=new c,m=D.createSemantics();m.addOperation("eval",{_iter(...e){e.map(t=>t.evalInner())}}),m.addOperation("evalInner",{Statement_declaration(e,t){e.evalInner()},Statement_return(e,t,n){r.writeLine("return "+t.evalInner()+`;
}`)},Statement_failif(e,t,n){const i=t.evalInner();r.writeLine("if("+i+`)
{`),r.writeLine(`	return fail;
}`)},Statement_yield(e,t,n){r.writeLine("yield "+t.evalInner()+";")},Statement_function(e,t){e.evalInner()},Statement_assignment(e,t){e.evalInner()},Statement_if(e,t){e.evalInner()},Statement_for(e,t){console.log("for")},Statement_iter(e,t){console.log("iter")},IfStatement(e,t,n,i,a,l,s){const d=n.evalInner();r.writeLine("if("+d+`)
{`);for(const f of a.children)f.evalInner();for(const f of l.children)f.evalInner();for(const f of s.children)f.evalInner()},ElseIf(e,t,n,i,a,l){const s=i.evalInner();r.writeLine("else if("+s+`)
{`);for(const d of l.children)d.evalInner()},Else(e,t){r.writeLine(`else
{`);for(const n of t.children)n.evalInner()},Assignment_normal(e,t,n){r.writeLine(e.sourceString+"="+n.evalInner()+";")},Assignment_fail(e,t,n){let i=n.evalInner();r.writeLine("if("+e.sourceString+`==fail)
{`),r.writeLine(e.sourceString+"="+i+`
}`)},Assignment_assignif(e,t,n,i,a){r.writeLine("if("+n.evalInner()+`)
{`),r.writeLine(e.sourceString+" = "+a.evalInner()+`;
}`)},Declaration(e,t,n,i,a,l){const s=l.evalInner();r.writeLine(t.sourceString+" "+i.sourceString+"="+s+";")},Function(e,t,n,i,a,l,s){console.log("Function: "+e);const d=n.sourceString;r.writeLine("function "+e.sourceString+"("+d+"){");for(const f of s.children)f.evalInner();r.writeLine("}")},Expression_infix(e,t,n){const i=e.evalInner(),a=n.evalInner();return i+" "+t.sourceString+" "+a},Expression_prefix(e,t){return e+" "+t.evalInner()},Expression_functioncall(e,t,n,i,a,l){let s=n.evalInner();for(const d of a.children)s+=","+d.evalInner();return e.sourceString+"("+s+")"},Expression_index(e,t,n,i){return e.evalInner()+"["+n.evalInner()+"]"},Expression_brackets(e,t,n){return"("+t.evalInner()+")"},Expression_literal(e){return e.sourceString},Expression_callchain(e,t,n){let i=e.sourceString;for(const a of n.children)i+="."+a.sourceString;return i},Expression_new(e,t,n,i,a){let l="";for(const s of i.children)l+=","+s.evalInner();return"new "+t.sourceString+"("+l+")"}});let v=o[0];function g(){let e=D.match(v);e.succeeded()&&m(e).eval(),console.log(r.code)}return g(),[]}class G extends T{constructor(o){super(),O(this,o,V,R,F,{})}}export{G as component,z as universal};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
