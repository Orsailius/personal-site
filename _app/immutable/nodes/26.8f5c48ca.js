import{S as SvelteComponent,i as init,s as safe_not_equal,k as element,a as space,q as text,N as head_selector,l as claim_element,h as detach,c as claim_space,m as children,r as claim_text,n as attr,p as set_style,D as append_hydration,b as insert_hydration,$ as set_input_value,L as listen,d as transition_out,f as check_outros,g as transition_in,M as run_all,v as group_outros,H as noop$1,y as create_component,z as claim_component,A as mount_component,B as destroy_component,R as update_keyed_each,V as outro_and_destroy_block,e as empty,u as set_data}from"../chunks/index.b0d5924d.js";import{c as commonjsGlobal,g as getDefaultExportFromCjs}from"../chunks/_commonjsHelpers.725317a4.js";import{S as Splide_1,a as SplideSlide}from"../chunks/splide-default.min.e1f025de.js";const prerender=!0,_page=Object.freeze(Object.defineProperty({__proto__:null,prerender},Symbol.toStringTag,{value:"Module"}));var dist={exports:{}},request={};function bind(e,r){return function(){return e.apply(r,arguments)}}const{toString}=Object.prototype,{getPrototypeOf}=Object,kindOf=(e=>r=>{const t=toString.call(r);return e[t]||(e[t]=t.slice(8,-1).toLowerCase())})(Object.create(null)),kindOfTest=e=>(e=e.toLowerCase(),r=>kindOf(r)===e),typeOfTest=e=>r=>typeof r===e,{isArray}=Array,isUndefined=typeOfTest("undefined");function isBuffer(e){return e!==null&&!isUndefined(e)&&e.constructor!==null&&!isUndefined(e.constructor)&&isFunction(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const isArrayBuffer=kindOfTest("ArrayBuffer");function isArrayBufferView(e){let r;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?r=ArrayBuffer.isView(e):r=e&&e.buffer&&isArrayBuffer(e.buffer),r}const isString=typeOfTest("string"),isFunction=typeOfTest("function"),isNumber=typeOfTest("number"),isObject=e=>e!==null&&typeof e=="object",isBoolean=e=>e===!0||e===!1,isPlainObject=e=>{if(kindOf(e)!=="object")return!1;const r=getPrototypeOf(e);return(r===null||r===Object.prototype||Object.getPrototypeOf(r)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},isDate=kindOfTest("Date"),isFile=kindOfTest("File"),isBlob=kindOfTest("Blob"),isFileList=kindOfTest("FileList"),isStream=e=>isObject(e)&&isFunction(e.pipe),isFormData=e=>{let r;return e&&(typeof FormData=="function"&&e instanceof FormData||isFunction(e.append)&&((r=kindOf(e))==="formdata"||r==="object"&&isFunction(e.toString)&&e.toString()==="[object FormData]"))},isURLSearchParams=kindOfTest("URLSearchParams"),trim=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function forEach(e,r,{allOwnKeys:t=!1}={}){if(e===null||typeof e>"u")return;let n,a;if(typeof e!="object"&&(e=[e]),isArray(e))for(n=0,a=e.length;n<a;n++)r.call(null,e[n],n,e);else{const s=t?Object.getOwnPropertyNames(e):Object.keys(e),o=s.length;let c;for(n=0;n<o;n++)c=s[n],r.call(null,e[c],c,e)}}function findKey(e,r){r=r.toLowerCase();const t=Object.keys(e);let n=t.length,a;for(;n-- >0;)if(a=t[n],r===a.toLowerCase())return a;return null}const _global=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:commonjsGlobal)(),isContextDefined=e=>!isUndefined(e)&&e!==_global;function merge(){const{caseless:e}=isContextDefined(this)&&this||{},r={},t=(n,a)=>{const s=e&&findKey(r,a)||a;isPlainObject(r[s])&&isPlainObject(n)?r[s]=merge(r[s],n):isPlainObject(n)?r[s]=merge({},n):isArray(n)?r[s]=n.slice():r[s]=n};for(let n=0,a=arguments.length;n<a;n++)arguments[n]&&forEach(arguments[n],t);return r}const extend=(e,r,t,{allOwnKeys:n}={})=>(forEach(r,(a,s)=>{t&&isFunction(a)?e[s]=bind(a,t):e[s]=a},{allOwnKeys:n}),e),stripBOM=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),inherits=(e,r,t,n)=>{e.prototype=Object.create(r.prototype,n),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:r.prototype}),t&&Object.assign(e.prototype,t)},toFlatObject=(e,r,t,n)=>{let a,s,o;const c={};if(r=r||{},e==null)return r;do{for(a=Object.getOwnPropertyNames(e),s=a.length;s-- >0;)o=a[s],(!n||n(o,e,r))&&!c[o]&&(r[o]=e[o],c[o]=!0);e=t!==!1&&getPrototypeOf(e)}while(e&&(!t||t(e,r))&&e!==Object.prototype);return r},endsWith=(e,r,t)=>{e=String(e),(t===void 0||t>e.length)&&(t=e.length),t-=r.length;const n=e.indexOf(r,t);return n!==-1&&n===t},toArray=e=>{if(!e)return null;if(isArray(e))return e;let r=e.length;if(!isNumber(r))return null;const t=new Array(r);for(;r-- >0;)t[r]=e[r];return t},isTypedArray=(e=>r=>e&&r instanceof e)(typeof Uint8Array<"u"&&getPrototypeOf(Uint8Array)),forEachEntry=(e,r)=>{const n=(e&&e[Symbol.iterator]).call(e);let a;for(;(a=n.next())&&!a.done;){const s=a.value;r.call(e,s[0],s[1])}},matchAll=(e,r)=>{let t;const n=[];for(;(t=e.exec(r))!==null;)n.push(t);return n},isHTMLForm=kindOfTest("HTMLFormElement"),toCamelCase=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(t,n,a){return n.toUpperCase()+a}),hasOwnProperty=(({hasOwnProperty:e})=>(r,t)=>e.call(r,t))(Object.prototype),isRegExp=kindOfTest("RegExp"),reduceDescriptors=(e,r)=>{const t=Object.getOwnPropertyDescriptors(e),n={};forEach(t,(a,s)=>{let o;(o=r(a,s,e))!==!1&&(n[s]=o||a)}),Object.defineProperties(e,n)},freezeMethods=e=>{reduceDescriptors(e,(r,t)=>{if(isFunction(e)&&["arguments","caller","callee"].indexOf(t)!==-1)return!1;const n=e[t];if(isFunction(n)){if(r.enumerable=!1,"writable"in r){r.writable=!1;return}r.set||(r.set=()=>{throw Error("Can not rewrite read-only method '"+t+"'")})}})},toObjectSet=(e,r)=>{const t={},n=a=>{a.forEach(s=>{t[s]=!0})};return isArray(e)?n(e):n(String(e).split(r)),t},noop=()=>{},toFiniteNumber=(e,r)=>(e=+e,Number.isFinite(e)?e:r),ALPHA="abcdefghijklmnopqrstuvwxyz",DIGIT="0123456789",ALPHABET={DIGIT,ALPHA,ALPHA_DIGIT:ALPHA+ALPHA.toUpperCase()+DIGIT},generateString=(e=16,r=ALPHABET.ALPHA_DIGIT)=>{let t="";const{length:n}=r;for(;e--;)t+=r[Math.random()*n|0];return t};function isSpecCompliantForm(e){return!!(e&&isFunction(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const toJSONObject=e=>{const r=new Array(10),t=(n,a)=>{if(isObject(n)){if(r.indexOf(n)>=0)return;if(!("toJSON"in n)){r[a]=n;const s=isArray(n)?[]:{};return forEach(n,(o,c)=>{const d=t(o,a+1);!isUndefined(d)&&(s[c]=d)}),r[a]=void 0,s}}return n};return t(e,0)},isAsyncFn=kindOfTest("AsyncFunction"),isThenable=e=>e&&(isObject(e)||isFunction(e))&&isFunction(e.then)&&isFunction(e.catch);var utils$1={isArray,isArrayBuffer,isBuffer,isFormData,isArrayBufferView,isString,isNumber,isBoolean,isObject,isPlainObject,isUndefined,isDate,isFile,isBlob,isRegExp,isFunction,isStream,isURLSearchParams,isTypedArray,isFileList,forEach,merge,extend,trim,stripBOM,inherits,toFlatObject,kindOf,kindOfTest,endsWith,toArray,forEachEntry,matchAll,isHTMLForm,hasOwnProperty,hasOwnProp:hasOwnProperty,reduceDescriptors,freezeMethods,toObjectSet,toCamelCase,noop,toFiniteNumber,findKey,global:_global,isContextDefined,ALPHABET,generateString,isSpecCompliantForm,toJSONObject,isAsyncFn,isThenable};function AxiosError(e,r,t,n,a){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",r&&(this.code=r),t&&(this.config=t),n&&(this.request=n),a&&(this.response=a)}utils$1.inherits(AxiosError,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:utils$1.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const prototype$1=AxiosError.prototype,descriptors={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{descriptors[e]={value:e}});Object.defineProperties(AxiosError,descriptors);Object.defineProperty(prototype$1,"isAxiosError",{value:!0});AxiosError.from=(e,r,t,n,a,s)=>{const o=Object.create(prototype$1);return utils$1.toFlatObject(e,o,function(d){return d!==Error.prototype},c=>c!=="isAxiosError"),AxiosError.call(o,e.message,r,t,n,a),o.cause=e,o.name=e.name,s&&Object.assign(o,s),o};var httpAdapter=null;function isVisitable(e){return utils$1.isPlainObject(e)||utils$1.isArray(e)}function removeBrackets(e){return utils$1.endsWith(e,"[]")?e.slice(0,-2):e}function renderKey(e,r,t){return e?e.concat(r).map(function(a,s){return a=removeBrackets(a),!t&&s?"["+a+"]":a}).join(t?".":""):r}function isFlatArray(e){return utils$1.isArray(e)&&!e.some(isVisitable)}const predicates=utils$1.toFlatObject(utils$1,{},null,function(r){return/^is[A-Z]/.test(r)});function toFormData(e,r,t){if(!utils$1.isObject(e))throw new TypeError("target must be an object");r=r||new FormData,t=utils$1.toFlatObject(t,{metaTokens:!0,dots:!1,indexes:!1},!1,function(h,g){return!utils$1.isUndefined(g[h])});const n=t.metaTokens,a=t.visitor||l,s=t.dots,o=t.indexes,d=(t.Blob||typeof Blob<"u"&&Blob)&&utils$1.isSpecCompliantForm(r);if(!utils$1.isFunction(a))throw new TypeError("visitor must be a function");function u(p){if(p===null)return"";if(utils$1.isDate(p))return p.toISOString();if(!d&&utils$1.isBlob(p))throw new AxiosError("Blob is not supported. Use a Buffer instead.");return utils$1.isArrayBuffer(p)||utils$1.isTypedArray(p)?d&&typeof Blob=="function"?new Blob([p]):Buffer.from(p):p}function l(p,h,g){let y=p;if(p&&!g&&typeof p=="object"){if(utils$1.endsWith(h,"{}"))h=n?h:h.slice(0,-2),p=JSON.stringify(p);else if(utils$1.isArray(p)&&isFlatArray(p)||(utils$1.isFileList(p)||utils$1.endsWith(h,"[]"))&&(y=utils$1.toArray(p)))return h=removeBrackets(h),y.forEach(function(_,E){!(utils$1.isUndefined(_)||_===null)&&r.append(o===!0?renderKey([h],E,s):o===null?h:h+"[]",u(_))}),!1}return isVisitable(p)?!0:(r.append(renderKey(g,h,s),u(p)),!1)}const i=[],f=Object.assign(predicates,{defaultVisitor:l,convertValue:u,isVisitable});function m(p,h){if(!utils$1.isUndefined(p)){if(i.indexOf(p)!==-1)throw Error("Circular reference detected in "+h.join("."));i.push(p),utils$1.forEach(p,function(y,w){(!(utils$1.isUndefined(y)||y===null)&&a.call(r,y,utils$1.isString(w)?w.trim():w,h,f))===!0&&m(y,h?h.concat(w):[w])}),i.pop()}}if(!utils$1.isObject(e))throw new TypeError("data must be an object");return m(e),r}function encode$1(e){const r={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(n){return r[n]})}function AxiosURLSearchParams(e,r){this._pairs=[],e&&toFormData(e,this,r)}const prototype=AxiosURLSearchParams.prototype;prototype.append=function(r,t){this._pairs.push([r,t])};prototype.toString=function(r){const t=r?function(n){return r.call(this,n,encode$1)}:encode$1;return this._pairs.map(function(a){return t(a[0])+"="+t(a[1])},"").join("&")};function encode(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function buildURL(e,r,t){if(!r)return e;const n=t&&t.encode||encode,a=t&&t.serialize;let s;if(a?s=a(r,t):s=utils$1.isURLSearchParams(r)?r.toString():new AxiosURLSearchParams(r,t).toString(n),s){const o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+s}return e}class InterceptorManager{constructor(){this.handlers=[]}use(r,t,n){return this.handlers.push({fulfilled:r,rejected:t,synchronous:n?n.synchronous:!1,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(r){this.handlers[r]&&(this.handlers[r]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(r){utils$1.forEach(this.handlers,function(n){n!==null&&r(n)})}}var InterceptorManager$1=InterceptorManager,transitionalDefaults={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},URLSearchParams$1=typeof URLSearchParams<"u"?URLSearchParams:AxiosURLSearchParams,FormData$1=typeof FormData<"u"?FormData:null,Blob$1=typeof Blob<"u"?Blob:null,platform$1={isBrowser:!0,classes:{URLSearchParams:URLSearchParams$1,FormData:FormData$1,Blob:Blob$1},protocols:["http","https","file","blob","url","data"]};const hasBrowserEnv=typeof window<"u"&&typeof document<"u",hasStandardBrowserEnv=(e=>hasBrowserEnv&&["ReactNative","NativeScript","NS"].indexOf(e)<0)(typeof navigator<"u"&&navigator.product),hasStandardBrowserWebWorkerEnv=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")();var utils$2=Object.freeze({__proto__:null,hasBrowserEnv,hasStandardBrowserWebWorkerEnv,hasStandardBrowserEnv}),platform={...utils$2,...platform$1};function toURLEncodedForm(e,r){return toFormData(e,new platform.classes.URLSearchParams,Object.assign({visitor:function(t,n,a,s){return platform.isNode&&utils$1.isBuffer(t)?(this.append(n,t.toString("base64")),!1):s.defaultVisitor.apply(this,arguments)}},r))}function parsePropPath(e){return utils$1.matchAll(/\w+|\[(\w*)]/g,e).map(r=>r[0]==="[]"?"":r[1]||r[0])}function arrayToObject(e){const r={},t=Object.keys(e);let n;const a=t.length;let s;for(n=0;n<a;n++)s=t[n],r[s]=e[s];return r}function formDataToJSON(e){function r(t,n,a,s){let o=t[s++];const c=Number.isFinite(+o),d=s>=t.length;return o=!o&&utils$1.isArray(a)?a.length:o,d?(utils$1.hasOwnProp(a,o)?a[o]=[a[o],n]:a[o]=n,!c):((!a[o]||!utils$1.isObject(a[o]))&&(a[o]=[]),r(t,n,a[o],s)&&utils$1.isArray(a[o])&&(a[o]=arrayToObject(a[o])),!c)}if(utils$1.isFormData(e)&&utils$1.isFunction(e.entries)){const t={};return utils$1.forEachEntry(e,(n,a)=>{r(parsePropPath(n),a,t,0)}),t}return null}function stringifySafely(e,r,t){if(utils$1.isString(e))try{return(r||JSON.parse)(e),utils$1.trim(e)}catch(n){if(n.name!=="SyntaxError")throw n}return(t||JSON.stringify)(e)}const defaults={transitional:transitionalDefaults,adapter:["xhr","http"],transformRequest:[function(r,t){const n=t.getContentType()||"",a=n.indexOf("application/json")>-1,s=utils$1.isObject(r);if(s&&utils$1.isHTMLForm(r)&&(r=new FormData(r)),utils$1.isFormData(r))return a&&a?JSON.stringify(formDataToJSON(r)):r;if(utils$1.isArrayBuffer(r)||utils$1.isBuffer(r)||utils$1.isStream(r)||utils$1.isFile(r)||utils$1.isBlob(r))return r;if(utils$1.isArrayBufferView(r))return r.buffer;if(utils$1.isURLSearchParams(r))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),r.toString();let c;if(s){if(n.indexOf("application/x-www-form-urlencoded")>-1)return toURLEncodedForm(r,this.formSerializer).toString();if((c=utils$1.isFileList(r))||n.indexOf("multipart/form-data")>-1){const d=this.env&&this.env.FormData;return toFormData(c?{"files[]":r}:r,d&&new d,this.formSerializer)}}return s||a?(t.setContentType("application/json",!1),stringifySafely(r)):r}],transformResponse:[function(r){const t=this.transitional||defaults.transitional,n=t&&t.forcedJSONParsing,a=this.responseType==="json";if(r&&utils$1.isString(r)&&(n&&!this.responseType||a)){const o=!(t&&t.silentJSONParsing)&&a;try{return JSON.parse(r)}catch(c){if(o)throw c.name==="SyntaxError"?AxiosError.from(c,AxiosError.ERR_BAD_RESPONSE,this,null,this.response):c}}return r}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:platform.classes.FormData,Blob:platform.classes.Blob},validateStatus:function(r){return r>=200&&r<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};utils$1.forEach(["delete","get","head","post","put","patch"],e=>{defaults.headers[e]={}});var defaults$1=defaults;const ignoreDuplicateOf=utils$1.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]);var parseHeaders=e=>{const r={};let t,n,a;return e&&e.split(`
`).forEach(function(o){a=o.indexOf(":"),t=o.substring(0,a).trim().toLowerCase(),n=o.substring(a+1).trim(),!(!t||r[t]&&ignoreDuplicateOf[t])&&(t==="set-cookie"?r[t]?r[t].push(n):r[t]=[n]:r[t]=r[t]?r[t]+", "+n:n)}),r};const $internals=Symbol("internals");function normalizeHeader(e){return e&&String(e).trim().toLowerCase()}function normalizeValue(e){return e===!1||e==null?e:utils$1.isArray(e)?e.map(normalizeValue):String(e)}function parseTokens(e){const r=Object.create(null),t=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let n;for(;n=t.exec(e);)r[n[1]]=n[2];return r}const isValidHeaderName=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function matchHeaderValue(e,r,t,n,a){if(utils$1.isFunction(n))return n.call(this,r,t);if(a&&(r=t),!!utils$1.isString(r)){if(utils$1.isString(n))return r.indexOf(n)!==-1;if(utils$1.isRegExp(n))return n.test(r)}}function formatHeader(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(r,t,n)=>t.toUpperCase()+n)}function buildAccessors(e,r){const t=utils$1.toCamelCase(" "+r);["get","set","has"].forEach(n=>{Object.defineProperty(e,n+t,{value:function(a,s,o){return this[n].call(this,r,a,s,o)},configurable:!0})})}class AxiosHeaders{constructor(r){r&&this.set(r)}set(r,t,n){const a=this;function s(c,d,u){const l=normalizeHeader(d);if(!l)throw new Error("header name must be a non-empty string");const i=utils$1.findKey(a,l);(!i||a[i]===void 0||u===!0||u===void 0&&a[i]!==!1)&&(a[i||d]=normalizeValue(c))}const o=(c,d)=>utils$1.forEach(c,(u,l)=>s(u,l,d));return utils$1.isPlainObject(r)||r instanceof this.constructor?o(r,t):utils$1.isString(r)&&(r=r.trim())&&!isValidHeaderName(r)?o(parseHeaders(r),t):r!=null&&s(t,r,n),this}get(r,t){if(r=normalizeHeader(r),r){const n=utils$1.findKey(this,r);if(n){const a=this[n];if(!t)return a;if(t===!0)return parseTokens(a);if(utils$1.isFunction(t))return t.call(this,a,n);if(utils$1.isRegExp(t))return t.exec(a);throw new TypeError("parser must be boolean|regexp|function")}}}has(r,t){if(r=normalizeHeader(r),r){const n=utils$1.findKey(this,r);return!!(n&&this[n]!==void 0&&(!t||matchHeaderValue(this,this[n],n,t)))}return!1}delete(r,t){const n=this;let a=!1;function s(o){if(o=normalizeHeader(o),o){const c=utils$1.findKey(n,o);c&&(!t||matchHeaderValue(n,n[c],c,t))&&(delete n[c],a=!0)}}return utils$1.isArray(r)?r.forEach(s):s(r),a}clear(r){const t=Object.keys(this);let n=t.length,a=!1;for(;n--;){const s=t[n];(!r||matchHeaderValue(this,this[s],s,r,!0))&&(delete this[s],a=!0)}return a}normalize(r){const t=this,n={};return utils$1.forEach(this,(a,s)=>{const o=utils$1.findKey(n,s);if(o){t[o]=normalizeValue(a),delete t[s];return}const c=r?formatHeader(s):String(s).trim();c!==s&&delete t[s],t[c]=normalizeValue(a),n[c]=!0}),this}concat(...r){return this.constructor.concat(this,...r)}toJSON(r){const t=Object.create(null);return utils$1.forEach(this,(n,a)=>{n!=null&&n!==!1&&(t[a]=r&&utils$1.isArray(n)?n.join(", "):n)}),t}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([r,t])=>r+": "+t).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(r){return r instanceof this?r:new this(r)}static concat(r,...t){const n=new this(r);return t.forEach(a=>n.set(a)),n}static accessor(r){const n=(this[$internals]=this[$internals]={accessors:{}}).accessors,a=this.prototype;function s(o){const c=normalizeHeader(o);n[c]||(buildAccessors(a,o),n[c]=!0)}return utils$1.isArray(r)?r.forEach(s):s(r),this}}AxiosHeaders.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);utils$1.reduceDescriptors(AxiosHeaders.prototype,({value:e},r)=>{let t=r[0].toUpperCase()+r.slice(1);return{get:()=>e,set(n){this[t]=n}}});utils$1.freezeMethods(AxiosHeaders);var AxiosHeaders$1=AxiosHeaders;function transformData(e,r){const t=this||defaults$1,n=r||t,a=AxiosHeaders$1.from(n.headers);let s=n.data;return utils$1.forEach(e,function(c){s=c.call(t,s,a.normalize(),r?r.status:void 0)}),a.normalize(),s}function isCancel(e){return!!(e&&e.__CANCEL__)}function CanceledError(e,r,t){AxiosError.call(this,e??"canceled",AxiosError.ERR_CANCELED,r,t),this.name="CanceledError"}utils$1.inherits(CanceledError,AxiosError,{__CANCEL__:!0});function settle(e,r,t){const n=t.config.validateStatus;!t.status||!n||n(t.status)?e(t):r(new AxiosError("Request failed with status code "+t.status,[AxiosError.ERR_BAD_REQUEST,AxiosError.ERR_BAD_RESPONSE][Math.floor(t.status/100)-4],t.config,t.request,t))}var cookies=platform.hasStandardBrowserEnv?{write(e,r,t,n,a,s){const o=[e+"="+encodeURIComponent(r)];utils$1.isNumber(t)&&o.push("expires="+new Date(t).toGMTString()),utils$1.isString(n)&&o.push("path="+n),utils$1.isString(a)&&o.push("domain="+a),s===!0&&o.push("secure"),document.cookie=o.join("; ")},read(e){const r=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return r?decodeURIComponent(r[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function isAbsoluteURL(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function combineURLs(e,r){return r?e.replace(/\/?\/$/,"")+"/"+r.replace(/^\/+/,""):e}function buildFullPath(e,r){return e&&!isAbsoluteURL(r)?combineURLs(e,r):r}var isURLSameOrigin=platform.hasStandardBrowserEnv?function(){const r=/(msie|trident)/i.test(navigator.userAgent),t=document.createElement("a");let n;function a(s){let o=s;return r&&(t.setAttribute("href",o),o=t.href),t.setAttribute("href",o),{href:t.href,protocol:t.protocol?t.protocol.replace(/:$/,""):"",host:t.host,search:t.search?t.search.replace(/^\?/,""):"",hash:t.hash?t.hash.replace(/^#/,""):"",hostname:t.hostname,port:t.port,pathname:t.pathname.charAt(0)==="/"?t.pathname:"/"+t.pathname}}return n=a(window.location.href),function(o){const c=utils$1.isString(o)?a(o):o;return c.protocol===n.protocol&&c.host===n.host}}():function(){return function(){return!0}}();function parseProtocol(e){const r=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return r&&r[1]||""}function speedometer(e,r){e=e||10;const t=new Array(e),n=new Array(e);let a=0,s=0,o;return r=r!==void 0?r:1e3,function(d){const u=Date.now(),l=n[s];o||(o=u),t[a]=d,n[a]=u;let i=s,f=0;for(;i!==a;)f+=t[i++],i=i%e;if(a=(a+1)%e,a===s&&(s=(s+1)%e),u-o<r)return;const m=l&&u-l;return m?Math.round(f*1e3/m):void 0}}function progressEventReducer(e,r){let t=0;const n=speedometer(50,250);return a=>{const s=a.loaded,o=a.lengthComputable?a.total:void 0,c=s-t,d=n(c),u=s<=o;t=s;const l={loaded:s,total:o,progress:o?s/o:void 0,bytes:c,rate:d||void 0,estimated:d&&o&&u?(o-s)/d:void 0,event:a};l[r?"download":"upload"]=!0,e(l)}}const isXHRAdapterSupported=typeof XMLHttpRequest<"u";var xhrAdapter=isXHRAdapterSupported&&function(e){return new Promise(function(t,n){let a=e.data;const s=AxiosHeaders$1.from(e.headers).normalize();let{responseType:o,withXSRFToken:c}=e,d;function u(){e.cancelToken&&e.cancelToken.unsubscribe(d),e.signal&&e.signal.removeEventListener("abort",d)}let l;if(utils$1.isFormData(a)){if(platform.hasStandardBrowserEnv||platform.hasStandardBrowserWebWorkerEnv)s.setContentType(!1);else if((l=s.getContentType())!==!1){const[h,...g]=l?l.split(";").map(y=>y.trim()).filter(Boolean):[];s.setContentType([h||"multipart/form-data",...g].join("; "))}}let i=new XMLHttpRequest;if(e.auth){const h=e.auth.username||"",g=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";s.set("Authorization","Basic "+btoa(h+":"+g))}const f=buildFullPath(e.baseURL,e.url);i.open(e.method.toUpperCase(),buildURL(f,e.params,e.paramsSerializer),!0),i.timeout=e.timeout;function m(){if(!i)return;const h=AxiosHeaders$1.from("getAllResponseHeaders"in i&&i.getAllResponseHeaders()),y={data:!o||o==="text"||o==="json"?i.responseText:i.response,status:i.status,statusText:i.statusText,headers:h,config:e,request:i};settle(function(_){t(_),u()},function(_){n(_),u()},y),i=null}if("onloadend"in i?i.onloadend=m:i.onreadystatechange=function(){!i||i.readyState!==4||i.status===0&&!(i.responseURL&&i.responseURL.indexOf("file:")===0)||setTimeout(m)},i.onabort=function(){i&&(n(new AxiosError("Request aborted",AxiosError.ECONNABORTED,e,i)),i=null)},i.onerror=function(){n(new AxiosError("Network Error",AxiosError.ERR_NETWORK,e,i)),i=null},i.ontimeout=function(){let g=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const y=e.transitional||transitionalDefaults;e.timeoutErrorMessage&&(g=e.timeoutErrorMessage),n(new AxiosError(g,y.clarifyTimeoutError?AxiosError.ETIMEDOUT:AxiosError.ECONNABORTED,e,i)),i=null},platform.hasStandardBrowserEnv&&(c&&utils$1.isFunction(c)&&(c=c(e)),c||c!==!1&&isURLSameOrigin(f))){const h=e.xsrfHeaderName&&e.xsrfCookieName&&cookies.read(e.xsrfCookieName);h&&s.set(e.xsrfHeaderName,h)}a===void 0&&s.setContentType(null),"setRequestHeader"in i&&utils$1.forEach(s.toJSON(),function(g,y){i.setRequestHeader(y,g)}),utils$1.isUndefined(e.withCredentials)||(i.withCredentials=!!e.withCredentials),o&&o!=="json"&&(i.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&i.addEventListener("progress",progressEventReducer(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&i.upload&&i.upload.addEventListener("progress",progressEventReducer(e.onUploadProgress)),(e.cancelToken||e.signal)&&(d=h=>{i&&(n(!h||h.type?new CanceledError(null,e,i):h),i.abort(),i=null)},e.cancelToken&&e.cancelToken.subscribe(d),e.signal&&(e.signal.aborted?d():e.signal.addEventListener("abort",d)));const p=parseProtocol(f);if(p&&platform.protocols.indexOf(p)===-1){n(new AxiosError("Unsupported protocol "+p+":",AxiosError.ERR_BAD_REQUEST,e));return}i.send(a||null)})};const knownAdapters={http:httpAdapter,xhr:xhrAdapter};utils$1.forEach(knownAdapters,(e,r)=>{if(e){try{Object.defineProperty(e,"name",{value:r})}catch{}Object.defineProperty(e,"adapterName",{value:r})}});const renderReason=e=>`- ${e}`,isResolvedHandle=e=>utils$1.isFunction(e)||e===null||e===!1;var adapters={getAdapter:e=>{e=utils$1.isArray(e)?e:[e];const{length:r}=e;let t,n;const a={};for(let s=0;s<r;s++){t=e[s];let o;if(n=t,!isResolvedHandle(t)&&(n=knownAdapters[(o=String(t)).toLowerCase()],n===void 0))throw new AxiosError(`Unknown adapter '${o}'`);if(n)break;a[o||"#"+s]=n}if(!n){const s=Object.entries(a).map(([c,d])=>`adapter ${c} `+(d===!1?"is not supported by the environment":"is not available in the build"));let o=r?s.length>1?`since :
`+s.map(renderReason).join(`
`):" "+renderReason(s[0]):"as no adapter specified";throw new AxiosError("There is no suitable adapter to dispatch the request "+o,"ERR_NOT_SUPPORT")}return n},adapters:knownAdapters};function throwIfCancellationRequested(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new CanceledError(null,e)}function dispatchRequest(e){return throwIfCancellationRequested(e),e.headers=AxiosHeaders$1.from(e.headers),e.data=transformData.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),adapters.getAdapter(e.adapter||defaults$1.adapter)(e).then(function(n){return throwIfCancellationRequested(e),n.data=transformData.call(e,e.transformResponse,n),n.headers=AxiosHeaders$1.from(n.headers),n},function(n){return isCancel(n)||(throwIfCancellationRequested(e),n&&n.response&&(n.response.data=transformData.call(e,e.transformResponse,n.response),n.response.headers=AxiosHeaders$1.from(n.response.headers))),Promise.reject(n)})}const headersToObject=e=>e instanceof AxiosHeaders$1?e.toJSON():e;function mergeConfig(e,r){r=r||{};const t={};function n(u,l,i){return utils$1.isPlainObject(u)&&utils$1.isPlainObject(l)?utils$1.merge.call({caseless:i},u,l):utils$1.isPlainObject(l)?utils$1.merge({},l):utils$1.isArray(l)?l.slice():l}function a(u,l,i){if(utils$1.isUndefined(l)){if(!utils$1.isUndefined(u))return n(void 0,u,i)}else return n(u,l,i)}function s(u,l){if(!utils$1.isUndefined(l))return n(void 0,l)}function o(u,l){if(utils$1.isUndefined(l)){if(!utils$1.isUndefined(u))return n(void 0,u)}else return n(void 0,l)}function c(u,l,i){if(i in r)return n(u,l);if(i in e)return n(void 0,u)}const d={url:s,method:s,data:s,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,withXSRFToken:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:c,headers:(u,l)=>a(headersToObject(u),headersToObject(l),!0)};return utils$1.forEach(Object.keys(Object.assign({},e,r)),function(l){const i=d[l]||a,f=i(e[l],r[l],l);utils$1.isUndefined(f)&&i!==c||(t[l]=f)}),t}const VERSION="1.6.3",validators$1={};["object","boolean","number","function","string","symbol"].forEach((e,r)=>{validators$1[e]=function(n){return typeof n===e||"a"+(r<1?"n ":" ")+e}});const deprecatedWarnings={};validators$1.transitional=function(r,t,n){function a(s,o){return"[Axios v"+VERSION+"] Transitional option '"+s+"'"+o+(n?". "+n:"")}return(s,o,c)=>{if(r===!1)throw new AxiosError(a(o," has been removed"+(t?" in "+t:"")),AxiosError.ERR_DEPRECATED);return t&&!deprecatedWarnings[o]&&(deprecatedWarnings[o]=!0,console.warn(a(o," has been deprecated since v"+t+" and will be removed in the near future"))),r?r(s,o,c):!0}};function assertOptions(e,r,t){if(typeof e!="object")throw new AxiosError("options must be an object",AxiosError.ERR_BAD_OPTION_VALUE);const n=Object.keys(e);let a=n.length;for(;a-- >0;){const s=n[a],o=r[s];if(o){const c=e[s],d=c===void 0||o(c,s,e);if(d!==!0)throw new AxiosError("option "+s+" must be "+d,AxiosError.ERR_BAD_OPTION_VALUE);continue}if(t!==!0)throw new AxiosError("Unknown option "+s,AxiosError.ERR_BAD_OPTION)}}var validator={assertOptions,validators:validators$1};const validators=validator.validators;class Axios{constructor(r){this.defaults=r,this.interceptors={request:new InterceptorManager$1,response:new InterceptorManager$1}}request(r,t){typeof r=="string"?(t=t||{},t.url=r):t=r||{},t=mergeConfig(this.defaults,t);const{transitional:n,paramsSerializer:a,headers:s}=t;n!==void 0&&validator.assertOptions(n,{silentJSONParsing:validators.transitional(validators.boolean),forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},!1),a!=null&&(utils$1.isFunction(a)?t.paramsSerializer={serialize:a}:validator.assertOptions(a,{encode:validators.function,serialize:validators.function},!0)),t.method=(t.method||this.defaults.method||"get").toLowerCase();let o=s&&utils$1.merge(s.common,s[t.method]);s&&utils$1.forEach(["delete","get","head","post","put","patch","common"],p=>{delete s[p]}),t.headers=AxiosHeaders$1.concat(o,s);const c=[];let d=!0;this.interceptors.request.forEach(function(h){typeof h.runWhen=="function"&&h.runWhen(t)===!1||(d=d&&h.synchronous,c.unshift(h.fulfilled,h.rejected))});const u=[];this.interceptors.response.forEach(function(h){u.push(h.fulfilled,h.rejected)});let l,i=0,f;if(!d){const p=[dispatchRequest.bind(this),void 0];for(p.unshift.apply(p,c),p.push.apply(p,u),f=p.length,l=Promise.resolve(t);i<f;)l=l.then(p[i++],p[i++]);return l}f=c.length;let m=t;for(i=0;i<f;){const p=c[i++],h=c[i++];try{m=p(m)}catch(g){h.call(this,g);break}}try{l=dispatchRequest.call(this,m)}catch(p){return Promise.reject(p)}for(i=0,f=u.length;i<f;)l=l.then(u[i++],u[i++]);return l}getUri(r){r=mergeConfig(this.defaults,r);const t=buildFullPath(r.baseURL,r.url);return buildURL(t,r.params,r.paramsSerializer)}}utils$1.forEach(["delete","get","head","options"],function(r){Axios.prototype[r]=function(t,n){return this.request(mergeConfig(n||{},{method:r,url:t,data:(n||{}).data}))}});utils$1.forEach(["post","put","patch"],function(r){function t(n){return function(s,o,c){return this.request(mergeConfig(c||{},{method:r,headers:n?{"Content-Type":"multipart/form-data"}:{},url:s,data:o}))}}Axios.prototype[r]=t(),Axios.prototype[r+"Form"]=t(!0)});var Axios$1=Axios;class CancelToken{constructor(r){if(typeof r!="function")throw new TypeError("executor must be a function.");let t;this.promise=new Promise(function(s){t=s});const n=this;this.promise.then(a=>{if(!n._listeners)return;let s=n._listeners.length;for(;s-- >0;)n._listeners[s](a);n._listeners=null}),this.promise.then=a=>{let s;const o=new Promise(c=>{n.subscribe(c),s=c}).then(a);return o.cancel=function(){n.unsubscribe(s)},o},r(function(s,o,c){n.reason||(n.reason=new CanceledError(s,o,c),t(n.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(r){if(this.reason){r(this.reason);return}this._listeners?this._listeners.push(r):this._listeners=[r]}unsubscribe(r){if(!this._listeners)return;const t=this._listeners.indexOf(r);t!==-1&&this._listeners.splice(t,1)}static source(){let r;return{token:new CancelToken(function(a){r=a}),cancel:r}}}var CancelToken$1=CancelToken;function spread(e){return function(t){return e.apply(null,t)}}function isAxiosError(e){return utils$1.isObject(e)&&e.isAxiosError===!0}const HttpStatusCode={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(HttpStatusCode).forEach(([e,r])=>{HttpStatusCode[r]=e});var HttpStatusCode$1=HttpStatusCode;function createInstance(e){const r=new Axios$1(e),t=bind(Axios$1.prototype.request,r);return utils$1.extend(t,Axios$1.prototype,r,{allOwnKeys:!0}),utils$1.extend(t,r,null,{allOwnKeys:!0}),t.create=function(a){return createInstance(mergeConfig(e,a))},t}const axios=createInstance(defaults$1);axios.Axios=Axios$1;axios.CanceledError=CanceledError;axios.CancelToken=CancelToken$1;axios.isCancel=isCancel;axios.VERSION=VERSION;axios.toFormData=toFormData;axios.AxiosError=AxiosError;axios.Cancel=axios.CanceledError;axios.all=function(r){return Promise.all(r)};axios.spread=spread;axios.isAxiosError=isAxiosError;axios.mergeConfig=mergeConfig;axios.AxiosHeaders=AxiosHeaders$1;axios.formToJSON=e=>formDataToJSON(utils$1.isHTMLForm(e)?new FormData(e):e);axios.getAdapter=adapters.getAdapter;axios.HttpStatusCode=HttpStatusCode$1;axios.default=axios;var axios_1$1=axios,errors={};Object.defineProperty(errors,"__esModule",{value:!0});errors.citationError=errors.pdfError=errors.fcError=errors.eventsError=errors.mediaError=errors.relatedError=errors.introError=errors.preloadError=errors.infoboxError=errors.coordinatesError=errors.geoSearchError=errors.linksError=errors.categoriesError=errors.contentError=errors.htmlError=errors.imageError=errors.summaryError=errors.pageError=errors.autocompletionsError=errors.searchError=errors.wikiError=void 0;class wikiError extends Error{constructor(r,t){super(r),this.name="wikiError",this.code=t}}errors.wikiError=wikiError;class searchError extends wikiError{constructor(r){super(r),this.name="searchError"}}errors.searchError=searchError;class autocompletionsError extends wikiError{constructor(r){super(r),this.name="autocompletionsError"}}errors.autocompletionsError=autocompletionsError;class pageError extends wikiError{constructor(r){super(r),this.name="pageError"}}errors.pageError=pageError;class summaryError extends wikiError{constructor(r){super(r),this.name="summaryError"}}errors.summaryError=summaryError;class imageError extends wikiError{constructor(r){super(r),this.name="imageError"}}errors.imageError=imageError;class htmlError extends wikiError{constructor(r){super(r),this.name="htmlError"}}errors.htmlError=htmlError;class contentError extends wikiError{constructor(r){super(r),this.name="contentError"}}errors.contentError=contentError;class categoriesError extends wikiError{constructor(r){super(r),this.name="categoriesError"}}errors.categoriesError=categoriesError;class linksError extends wikiError{constructor(r){super(r),this.name="linksError"}}errors.linksError=linksError;class geoSearchError extends wikiError{constructor(r){super(r),this.name="geoSearchError"}}errors.geoSearchError=geoSearchError;class coordinatesError extends wikiError{constructor(r){super(r),this.name="coordinatesError"}}errors.coordinatesError=coordinatesError;class infoboxError extends wikiError{constructor(r){super(r),this.name="infoboxError"}}errors.infoboxError=infoboxError;class preloadError extends wikiError{constructor(r){super(r),this.name="preloadError"}}errors.preloadError=preloadError;class introError extends wikiError{constructor(r){super(r),this.name="introError"}}errors.introError=introError;class relatedError extends wikiError{constructor(r){super(r),this.name="relatedError"}}errors.relatedError=relatedError;class mediaError extends wikiError{constructor(r){super(r),this.name="mediaError"}}errors.mediaError=mediaError;class eventsError extends wikiError{constructor(r){super(r),this.name="eventsError"}}errors.eventsError=eventsError;class fcError extends wikiError{constructor(r){super(r),this.name="featuredContentError"}}errors.fcError=fcError;class pdfError extends wikiError{constructor(r){super(r),this.name="pdfError"}}errors.pdfError=pdfError;class citationError extends wikiError{constructor(r){super(r),this.name="citationError"}}errors.citationError=citationError;Object.defineProperty(request,"__esModule",{value:!0});request.setUserAgent=request.setAPIUrl=request.returnRestUrl=request.makeRestRequest=void 0;const axios_1=axios_1$1,errors_1=errors;let API_URL="https://en.wikipedia.org/w/api.php?",REST_API_URL="https://en.wikipedia.org/api/rest_v1/",USER_AGENT="wikipedia (https://github.com/dopecodez/Wikipedia/)";async function callAPI(e){const r={headers:{"Api-User-Agent":USER_AGENT}};try{const{data:t}=await axios_1.default.get(e,r);return t}catch(t){throw new errors_1.wikiError(t)}}async function makeRequest(e,r=!0){const t={...e};t.format="json",r&&(t.redirects=""),e.action||(t.action="query"),t.origin="*";let n="";return Object.keys(t).forEach(a=>{n+=`${a}=${t[a]}&`}),await callAPI(encodeURI(API_URL+n))}async function makeRestRequest(e,r=!0){return r||(e+="?redirect=false"),await callAPI(encodeURI(REST_API_URL+e))}request.makeRestRequest=makeRestRequest;function returnRestUrl(e){return encodeURI(REST_API_URL+e)}request.returnRestUrl=returnRestUrl;function setAPIUrl(e){return API_URL="https://"+e.toLowerCase()+".wikipedia.org/w/api.php?",REST_API_URL="https://"+e.toLowerCase()+".wikipedia.org/api/rest_v1/",API_URL}request.setAPIUrl=setAPIUrl;function setUserAgent(e){USER_AGENT=e}request.setUserAgent=setUserAgent;request.default=makeRequest;var page$1={},utils={},messages={};Object.defineProperty(messages,"__esModule",{value:!0});messages.MSGS=void 0;messages.MSGS={PAGE_NOT_SUGGEST:"No page with given title suggested : ",PAGE_NOT_EXIST:"No page with given title exists : ",INFOBOX_NOT_EXIST:"Info cannot be parsed for given page"};var hasRequiredUtils;function requireUtils(){if(hasRequiredUtils)return utils;hasRequiredUtils=1,Object.defineProperty(utils,"__esModule",{value:!0}),utils.getCurrentDay=utils.getCurrentMonth=utils.getCurrentYear=utils.setPageId=utils.setPageIdOrTitleParam=utils.setTitleForPage=utils.isString=void 0;const e=requireDist(),r=errors,t=messages;function n(l){return isNaN(l)}utils.isString=n;async function a(l){{const i=await e.default.search(l,{limit:1,suggestion:!0});if(!i.suggestion&&i.results.length==0)throw new r.pageError(`${t.MSGS.PAGE_NOT_SUGGEST}${l}`);return l=i.suggestion||l,l}}utils.setTitleForPage=a;function s(l,i){return n(i)?l.titles=i:l.pageids=i,l}utils.setPageIdOrTitleParam=s;function o(l,i){let f;return l.pageIds?f=l.pageIds:f=Object.keys(i.query.pages)[0],f}utils.setPageId=o;function c(){return new Date().getFullYear()}utils.getCurrentYear=c;function d(){return new Date().getMonth()+1}utils.getCurrentMonth=d;function u(){return new Date().getDate()}return utils.getCurrentDay=u,utils}function preserveCamelCase(e){let r=!1,t=!1,n=!1;for(let a=0;a<e.length;a++){const s=e[a];r&&/[a-zA-Z]/.test(s)&&s.toUpperCase()===s?(e=e.substr(0,a)+"-"+e.substr(a),r=!1,n=t,t=!0,a++):t&&n&&/[a-zA-Z]/.test(s)&&s.toLowerCase()===s?(e=e.substr(0,a-1)+"-"+e.substr(a-1),n=t,t=!1,r=!0):(r=s.toLowerCase()===s,n=t,t=s.toUpperCase()===s)}return e}var camelcase=function(e){return arguments.length>1?e=Array.from(arguments).map(t=>t.trim()).filter(t=>t.length).join("-"):e=e.trim(),e.length===0?"":e.length===1?e.toLowerCase():/^[a-z0-9]+$/.test(e)?e:(e!==e.toLowerCase()&&(e=preserveCamelCase(e)),e.replace(/^[_.\- ]+/,"").toLowerCase().replace(/[_.\- ]+(\w|$)/g,(t,n)=>n.toUpperCase()))};function _interopDefault(e){return e&&typeof e=="object"&&"default"in e?e.default:e}function trimWrappers(e){return e.replace(/\[\[/g,"").replace(/\]\]/g,"").replace(/\{\{/g,"").replace(/\}\}/g,"").trim()}function trimOr(e){var r=e.indexOf("|");return r!==-1?e.substring(0,r):e}function getValue(e,r){if(!e)return null;var t=e.trim().replace(/File:/,"").replace(/\{\{\d+\}\}/g,"").replace(extraPropertyPattern,"").replace(endingPattern,"");if(t==="y"||t==="yes")return!0;if(r=="birthPlace")return e.trim();var n=t.match(linksPattern);return n?n[0].split(linkSeparatorPattern).filter(function(a){return a}):trimOr(trimWrappers(t))}function dataType(e){var r=e.globalPattern,t=e.parsePattern,n=e.parse,a=e.variable,s=e.name;return function(o){var c=o.match(r);if(!c){var d;return d={},defineProperty(d,s,[]),defineProperty(d,"sourceAfter",o),d}var u=c.map(function(i){return n(i.match(t))}),l=c.reduce(function(i,f,m){return u[m]===DO_NOT_REPLACE?i:i.replace(f,"$"+a+"_"+m)},o);return{data:defineProperty({},s,u),sourceAfter:l}}}function byDataHandler(e,r){var t=e.source,n=e.context,a=r(t),s=a.data,o=a.sourceAfter;return{context:Object.assign({},n,s),source:o}}function extractData(e){return dataTypes$1.map(function(r){return r.handler}).reduce(byDataHandler,{context:{},source:e})}function findPropertyList(e){var r=e.match(keyValueGlobalPattern);return r?r.map(function(t){var n=keyValuePattern.exec(t);if(!n)return null;var a=slicedToArray(n,3),s=a[1],o=a[2],c=camelCase(s.trim());return{key:c,value:getValue(o,c)}}).filter(function(t){return t}):[]}function fillVariable(e,r){var t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},n=t.simplifyDataValues;if(typeof e!="string")return console.log("Warning: Something went wrong. Could not fill variables in: ("+(e===void 0?"undefined":_typeof(e))+") "+JSON.stringify(e)),{};var a=dataTypes$1.find(function(l){return e.match(l.pattern)});if(a){var s=a.pattern.exec(e),o=slicedToArray(s,2),c=o[0],d=o[1],u=r[a.name][parseInt(d,10)];return n||typeof u!="string"?u:e.replace(c,u)}return e}function fillVariables(e,r,t){if(e===void 0||e instanceof Date||typeof e=="number")return e;if(Array.isArray(e))return e.map(function(a){return fillVariables(a,r,t)});if((e===void 0?"undefined":_typeof(e))==="object")return Object.keys(e).reduce(function(a,s){return Object.assign(a,defineProperty({},s,fillVariables(e[s],r,t)))},{});var n=fillVariable(e,r,t);return n===e?e:fillVariables(n,r,t)}function handleSmallData(e,r,t){var n=t.simplifyDataValues;if(typeof e=="string"&&e.match(smallDataType.pattern)){var a=e.replace(smallDataType.pattern,"").replace(/,/,"").trim(),s=smallDataType.pattern.exec(e),o=slicedToArray(s,2),c=o[1],d=r[smallDataType.name][parseInt(c,10)],u={primary:getVariableValue(a,r,{simplifyDataValues:n}),secondary:getVariableValue(d,r,{simplifyDataValues:n})};return n?u.primary:u}return null}function getVariableValue(e,r){var t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:{},n=t.simplifyDataValues,a=handleSmallData(e,r,{simplifyDataValues:n});return a||fillVariables(e,r,{simplifyDataValues:n})}function reduceVariable(e,r,t,n){if(r===null)return null;if(typeof r=="boolean")return r;if(Array.isArray(r))return r.map(function(c){return getVariableValue(c,t,n)});if(e.match(/areaTotal/)||e.match(/population/)){var a=numberParse(r);if(a===!1&&(a=parseFloat(r,10)),!isNaN(a))return a}if(e.match(/date/i)){var s=+new Date(r);if(!isNaN(s))return new Date(r)}var o=getVariableValue(r,t,n);return Array.isArray(o)?o.map(function(c){return getVariableValue(c,t,n)}):o}function byVariableReduction(e,r){return function(t,n){var a=n.key,s=n.value,o=reduceVariable(a,s,e,r);return o===""||o===null?t:Object.assign({},t,defineProperty({},a,o))}}function extractProperties(e){var r=e.source,t=e.context,n=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},a=n.simplifyDataValues,s=a===void 0||a;return findPropertyList(r).reduce(byVariableReduction(t,{simplifyDataValues:s}),{})}function transformProperties(e){return Object.keys(e).reduce(function(r,t){var n=e[t],a=t.match(blankNamePattern);if(a){var s=a[1]||"",o=e["blank"+s+"NameSec2"],c=e["blank"+s+"InfoSec2"];return typeof o!="string"?r:Object.assign(r,defineProperty({},camelCase(o),c))}return t.match(blankInfoPattern)?r:Object.assign(r,defineProperty({},t,n))},{})}function findOuterIndex(e){for(var r=[],t=0;t<e.length-1;t++){var n=e.substr(t,2);if(n!=="{{"){if(n==="}}"){if(r.pop(),r.length===0)return t+2;t++}}else r.push(t),t++}}function parse(e){var r=e.match(infoBoxStartPattern);if(!r)return{data:e,sourceLeft:null};var t=r.index,n=e.substring(t),a=findOuterIndex(n);if(!a)return{data:e,sourceLeft:null};var s=n.substring(0,a),o=e.substring(a);return{data:s,sourceLeft:o.match(infoBoxStartPattern)?o:null}}function extractInfoboxes(e){for(var r=parse(e),t=[r.data];r.sourceLeft;)r=parse(r.sourceLeft),t.push(r.data);return t}function cleanSource(e){var r=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{},t=r.removeSmall,n=t!==void 0&&t,a=r.removeReferences;return(a===void 0||a)&&(e=e.replace(/<ref(\s\w+=[^>]+)?>.*<\/ref>/g,"").replace(/<ref(\s\w+=[^>]+)?\s?\/>/g,"")),n&&(e=e.replace(/<small>.*<\/small>/g,"")),e.replace(/'''?/g,"").replace(/\|display=inline/g,"").replace(/<br\s?\/?>/g,",").replace(/&minus;/g,"-").replace(/<sup>/g,"^").replace(/\{\{sfn\|([^\}\}]+)\}\}/g,"").replace(/\{\{efn\|([^\}\}]+)\}\}/g,"").replace(/−/g,"-").replace(/<\/sup>/g,"").replace(/\{\{\s*nowrap\s*\|([^\n\}]+)\}\}/gi,"$1").replace(/<!--([\s\S]*?)-->/g,"").replace(/&nbsp;/g," ").replace("|''See list''","")}function transformRowSpan(e){return e.map(transformCells).reduce(function(r,t,n){for(var a=n===0?0:1,s=0;s<t.length;s++)r[s+a]||(r[s+a]={}),t[s]&&(r[s+a][t[s]]=1);return r},[]).map(function(r){return Object.keys(r).join(",")}).join(" || ")}function clean(e){return e.substring(2,e.length-2).replace(linkPattern$1,function(r,t){return t.split("|")[0]}).replace(/'''?/g,"")}function parseRow(e){var r=e[0].match(/BS(\d)/),t=e[0].substring(2),n=1,a=[],s=1;for(r&&(n=r[1],t=e[0].substring(3));s<=n;s++)a.push(e[s]);return{type:t,margin:e[s++],text1:e[s++],text2:e[s++],comment:e[s++],icons:a}}function getMatches(e,r){for(var t=void 0,n=[];(t=r.exec(e))!==null;)n.push({value:t[1]&&t[1].trim(),start:t.index,end:t.index+t[0].length});return n}function parseTableData(e){var r=e.match(rowPattern$1);return r?r.map(function(t){var n=t.match(rowPatternSingle);return slicedToArray(n,2)[1].trim().split("|").slice(1)}):[]}function getTables(e){var r=getMatches(e,tableStartPattern$1),t=getMatches(e,tableEndPattern$1);return r.map(function(n,a){var s=t[a];if(!s)throw new Error("[Table Parsing] Failed to pair table");return{rows:parseTableData(e.substring(n.end,s.start).trim().replace(/'''/g,"")),start:n.start,end:s.end}})}function last(e){return e.length?e[e.length-1]:void 0}function parseInfobox(e,r){var t=extractInfoboxes(e).map(function(a){return transformProperties(extractProperties(extractData(cleanSource(a,r)),r))});if(!t.length)return{};var n={general:t.shift()};return t.forEach(function(a){var s=a.type;s?n[camelCase(s)]=a:Object.assign(n,{general:Object.assign({},n.general,a)})}),n.tables=parseTables(e),n.bsTables=parseBsTables(e),n.lists=parseLists(e),n}var camelCase=_interopDefault(camelcase),_typeof=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(e){return typeof e}:function(e){return e&&typeof Symbol=="function"&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},defineProperty=function(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e},slicedToArray=function(){function e(r,t){var n=[],a=!0,s=!1,o=void 0;try{for(var c,d=r[Symbol.iterator]();!(a=(c=d.next()).done)&&(n.push(c.value),!t||n.length!==t);a=!0);}catch(u){s=!0,o=u}finally{try{!a&&d.return&&d.return()}finally{if(s)throw o}}return n}return function(r,t){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return e(r,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),toConsumableArray=function(e){if(Array.isArray(e)){for(var r=0,t=Array(e.length);r<e.length;r++)t[r]=e[r];return t}return Array.from(e)},smallGlobalPattern=/\{\{small\|([^\}\}]+)\}\}/g,smallPattern=/small\|([^\}\}]+)\}\}/,small={globalPattern:smallGlobalPattern,parsePattern:smallPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"SMALL",name:"smalls"},flagGlobalPattern=/\{\{flag\|([^\}\}]+)\}\}/g,flagPattern=/flag\|([^\}\}]+)\}\}/,flag={globalPattern:flagGlobalPattern,parsePattern:flagPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"FLAG",name:"flags"},coordsGlobalPattern=/\{\{coord\|([^\}\}]+)\}\}/g,coordsPattern=/coord\|([^\}\}]+)\}\}/,coords={globalPattern:coordsGlobalPattern,parsePattern:coordsPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"COORD",name:"coords"},globalPattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/g,pattern=/\[\[([^\]\|]+)\|?([^\]]+)?\]\]/,instances={globalPattern,parsePattern:pattern,parse:function(e){var r=slicedToArray(e,3),t=r[1],n=r[2];return t||n},variable:"INSTANCE",name:"instances"},extraPropertyPattern=/\n?\s?\|\s?\w+$/,endingPattern=/\n\}\}$/,linksPattern=/((\$\w+_\d+)\s*,?\s*){2,}/g,linkSeparatorPattern=/[,\s?]/g,listItemPrefixPattern=/^\|\s?/,unbulletedListGlobalPattern=/\{\{(?:unbulleted list|ubl|ubt|ublist|unbullet)\s?\|([^\}\}]+)\}\}/gi,unbulletedListItemPattern=/\|\s*([^|}]+)/g,unbulletedLists={globalPattern:unbulletedListGlobalPattern,parsePattern:unbulletedListItemPattern,parse:function(e){return e?e.map(function(r){return r.replace(listItemPrefixPattern,"").trim()}).filter(function(r){return r&&r.length}):[]},variable:"UNBULLETED_LIST",name:"unbulletedLists"},listItemPrefixPattern$1=/^\*\s*/,plainListGlobalPattern=/\n(\*\s*[^*|]+)+/g,plainListItemPattern=/\*\s*([^*|]+)/g,unmarkedLists={globalPattern:plainListGlobalPattern,parsePattern:plainListItemPattern,parse:function(e){return e?e.map(function(r){return r.replace(listItemPrefixPattern$1,"").trim()}).filter(function(r){return r&&r.length}):[]},variable:"UNMARKED_LIST",name:"unmarkedLists"},listItemPrefixPattern$2=/^\*\s?/,plainListGlobalPattern$1=/\{\{f?p?P?l?a?i?n?t?\s?list\s?\|([^\}\}]+)\}\}/g,plainListItemPattern$1=/\*\s*([^*}]+)/g,plainLists={globalPattern:plainListGlobalPattern$1,parsePattern:plainListItemPattern$1,parse:function(e){return e?e.map(function(r){return r.replace(listItemPrefixPattern$2,"").trim()}).filter(function(r){return r&&r.length}):[]},variable:"PLAIN_LIST",name:"plainLists"},marriageGlobalPattern=/\{\{Marriage\|([^\}\}]+)\}\}/gi,marriagePattern=/Marriage\|([^|]+)\|(.*)\}\}/i,marriages={globalPattern:marriageGlobalPattern,parsePattern:marriagePattern,parse:function(e){var r=slicedToArray(e,3);return{who:r[1],married:r[2]}},variable:"MARRIAGE",name:"marriages"},nbayGlobalPattern=/\{\{nbay\|([^\}\}]+)\}\}/gi,nbayPattern=/nbay\|([^|]+)\|(.*)\}\}/i,nbay={globalPattern:nbayGlobalPattern,parsePattern:nbayPattern,parse:function(e){var r=slicedToArray(e,3),t=r[1];return r[2],t},variable:"nbay",name:"nbay"},otherGlobalPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/g,otherPattern=/\{\{([^|\n]+)\|([^|\n]+)\|?([^\}\n]+)?\}\}/,other={globalPattern:otherGlobalPattern,parsePattern:otherPattern,parse:function(e){var r=slicedToArray(e,4),t=r[1];return r[2],r[3],t},variable:"OTHER",name:"others"},hlistGlobalPattern=/\{\{hlist\|([^\}\}]+)\}\}/gi,hlistPattern=/hlist\|(.*)\n?\}\}/i,hlist={globalPattern:hlistGlobalPattern,parsePattern:hlistPattern,parse:function(e){return slicedToArray(e,2)[1].split("|")},variable:"HLIST",name:"hlists"},birthDateGlobalPattern=/\{\{birth\sdate([^\}\}]+)\}\}/gi,birthDatePattern=/(\d+)\|(\d+)\|(\d+)/,millisInYear=31536e6,birthDates={globalPattern:birthDateGlobalPattern,parsePattern:birthDatePattern,parse:function(e){var r=slicedToArray(e,4),t=r[1],n=r[2],a=r[3],s=new Date(t,n-1,a);return{date:s,age:Math.floor((Date.now()-+s)/millisInYear)}},variable:"BIRTH_DATE",name:"birthDates"},DO_NOT_REPLACE=Symbol("DO NOT REPLACE"),labeledDateGlobalPattern=/\{\{([^\n\}\}]+)\}\}/g,labeledDatePattern=/(.*)/,labeledDates={globalPattern:labeledDateGlobalPattern,parsePattern:labeledDatePattern,parse:function(e){var r=e[0].indexOf("|");if(r>-1){var t=e[0].substring(r+1).slice(0,-2),n=new Date(t+" GMT");if(!isNaN(n.getTime()))return{date:n};if(n=new Date(t.split("|").join("-")+" GMT"),!isNaN(n.getTime()))return{date:n}}return DO_NOT_REPLACE},variable:"LABELED_DATE",name:"labeledDates"},deathDateGlobalPattern=/\{\{death\sdate\sand\sage([^\}\}]+)\}\}/gi,deathDatePattern=/(\d+)\|(\d+)\|(\d+)\|(\d+)\|?(\d+)?\|?(\d+)?/,millisInYear$1=31536e6,deathDates={globalPattern:deathDateGlobalPattern,parsePattern:deathDatePattern,parse:function(e){var r=slicedToArray(e,7),t=r[1],n=r[2],a=r[3],s=r[4],o=r[5],c=o===void 0?0:o,d=r[6],u=d===void 0?0:d,l=new Date(t,n-1,a),i=new Date(s,c-1,u);return{date:l,age:Math.floor((Number(l)-Number(i))/millisInYear$1)}},variable:"DEATH_DATE",name:"deathDates"},URLGlobalPattern=/\{\{URL\|([^\}\}]+)\}\}/g,URLPattern=/URL\|([^\}\}]+)\}\}/,url={globalPattern:URLGlobalPattern,parsePattern:URLPattern,parse:function(e){return slicedToArray(e,2)[1]},variable:"URL",name:"urls"},websiteGlobalPattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/g,websitePattern=/\[(https?):\/\/((?:www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)\s+([\w\s]+)\]/,website={globalPattern:websiteGlobalPattern,parsePattern:websitePattern,parse:function(e){var r=slicedToArray(e,5),t=r[1],n=r[2],a=r[3];return{protocol:t,hostname:n,path:a,title:r[4],url:t+"://"+n+a}},variable:"WEBSITE",name:"websites"},globalPattern$1=/\{\{Extra[^}}]+\}\}/gi,parsePattern=/\|\s?(\w+)\s+=\s+(.+)/g,propPattern=/\|\s?(\w+)\s+=\s+(.+)/,extra={globalPattern:globalPattern$1,parsePattern,parse:function(e){return e.reduce(function(r,t){var n=t.match(propPattern),a=slicedToArray(n,3),s=a[1],o=a[2];return r[s]=o,r},{})},variable:"EXTRA",name:"extra"},convertGlobalPattern=/\{\{convert\|([\d\.]+)\|(\w+)/g,convertPattern=/\{\{convert\|([\d\.]+)\|(\w+)/,convert={globalPattern:convertGlobalPattern,parsePattern:convertPattern,parse:function(e){var r=slicedToArray(e,3);return r[1]+" "+r[2]},variable:"CONVERT",name:"converts"},filmDatesPattern=/\{\{film\sdate([^\}\}]+)\}\}/gi,filmDatePatternGlobal=/(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/g,filmDatePattern=/(\d+)\|?(\d+)\|?(\d+)\|?([^\|\}]*)\|?(ref\d+=([^\|\}]*))?/,filmDates={globalPattern:filmDatesPattern,parsePattern:filmDatePatternGlobal,parse:function(e){return e.map(function(r){var t=r.match(filmDatePattern),n=slicedToArray(t,7),a=(n[0],n[1]),s=n[2],o=n[3],c=n[4],d=(n[5],n[6]);return{date:new Date(a,s&&s-1,o),location:c,ref:d}})},variable:"FILM_DATES",name:"filmDates"},otherGlobalPattern$1=/<ref(\s\w+=[^>]+)?>(.*)<\/ref>/g,otherPattern$1=/<ref(\s\w+=[^>]+)?>(.*)<\/ref>/,attributeGlobalPattern=/(\w+)=(["\w]+)/g,attributePattern=/(\w+)=(["\w]+)/,ref1={globalPattern:otherGlobalPattern$1,parsePattern:otherPattern$1,parse:function(e){var r=slicedToArray(e,3),t=(r[0],r[1]),n=r[2];return{attributes:((t||"").match(attributeGlobalPattern)||[]).reduce(function(a,s){if(s){var o=s.match(attributePattern),c=slicedToArray(o,3),d=(c[0],c[1]),u=c[2];a[d]=u.replace(/"/g,"")}return a},{}),contents:n}},variable:"REF",name:"refs"},otherGlobalPattern$2=/<ref(\s\w+=[^>]+)?\/>/g,otherPattern$2=/<ref(\s\w+=[^>]+)?\/>/,attributeGlobalPattern$1=/(\w+)=(["\w]+)/g,attributePattern$1=/(\w+)=(["\w]+)/,ref2={globalPattern:otherGlobalPattern$2,parsePattern:otherPattern$2,parse:function(e){return{attributes:e[1].match(attributeGlobalPattern$1).reduce(function(r,t){var n=t.match(attributePattern$1),a=slicedToArray(n,3),s=(a[0],a[1]),o=a[2];return r[s]=o.replace(/"/g,""),r},{})}},variable:"REF",name:"refs"},globalPattern$2=/\{\{formatnum:\d+\}\}/gi,parsePattern$1=/\{\{formatnum:(\d+)\}\}/,formatNum={globalPattern:globalPattern$2,parsePattern:parsePattern$1,parse:function(e){var r=slicedToArray(e,2),t=r[1];return parseFloat(t)},variable:"FORMAT_NUM",name:"formatNum"},dataTypes=[instances,ref1,ref2,small,formatNum,flag,coords,marriages,birthDates,labeledDates,deathDates,unbulletedLists,website,hlist,url,convert,nbay,filmDates,other,extra,plainLists,unmarkedLists],dataTypes$1=dataTypes.map(function(e){return{handler:dataType(e),name:e.name,pattern:new RegExp("\\$"+e.variable+"_(\\d+)")}}),keyValueGlobalPattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/g,keyValuePattern=/\|\s*([-'\u0400-\u04FF\w\s]+)\s*=\s*([^|]+)?/,numberParse=function(e){return typeof e=="string"&&(e=e.trim().replace(/ /g,""),e.match(/,/)&&e.match(/\./)?e.indexOf(",")<e.indexOf(".")?parseEnglish(e):parseSpanish(e):e.match(/,/)&&!e.match(/\./)?e.match(/,/g).length>1||e.match(/,[0-9]{3}($|^[0-9])/)?parseEnglish(e):parseSpanish(e):!e.match(/,/)&&e.match(/\./)?e.match(/\./g).length>1||e.match(/\.[0-9]{3}($|^[0-9])/)?parseSpanish(e):parseEnglish(e):(+e).toString()===e&&+e)},parseEnglish=function(e){return+e.replace(/,/g,"")},parseSpanish=function(e){return+e.replace(/\./g,"").replace(/,/g,".")},smallDataType=dataTypes$1.find(function(e){return e.name==="smalls"}),blankNamePattern=/blank(\d+)?NameSec2/,blankInfoPattern=/blank(\d+)?InfoSec2/,infoBoxStartPattern=/{{\w*box/,tableStartPattern=/{\|(.*)\n?/,tableEndPattern=/\n\|}/,headersPattern=/!\s?(.*)/g,rowPattern=/\|-/,cellSeparatorPattern=/(?:\n\|)|(?:\|\|)/,linkPattern=/\[\[([^\]]+)\]\]/g,linkNamePattern=/^.*\|/,inlineHeaderPattern="!!",actionPattern=/{{anchor\|(.*)}}/g,rowSpanCountPattern=/rowspan="(\d+)"/,stripLinks=function(e){return e.replace(linkPattern,function(r,t){return t.replace(linkNamePattern,"").trim()||t})},removeActions=function(e){return e.replace(actionPattern,"")},transformCell=function(e){return stripLinks(removeActions(e||"")).replace(rowSpanCountPattern,"").replace(linkNamePattern,"").trim()},transformCells=function(e){return e.split(cellSeparatorPattern).map(transformCell)},findIndex=function(e,r){var t=e.match(r);return t?t.index:-1},findTableStart=function(e){var r=e.match(tableStartPattern);return r?r.index+r[0].length:-1},findTableEnd=function(e){return findIndex(e,tableEndPattern)},getHeaders=function(e){for(var r=[],t=void 0;t=headersPattern.exec(e);)r.push.apply(r,toConsumableArray(t[1].split(inlineHeaderPattern).map(transformCell)));return r},getRows=function(e){var r=e.split(rowPattern).map(function(m){return m.replace(/^.*\n+?\|/,"").trim()}).filter(function(m){return m}),t=[],n=0,a=0,s=[],o=!0,c=!1,d=void 0;try{for(var u,l=r[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var i=u.value,f=i.match(rowSpanCountPattern);f&&(n=0,a=parseInt(f[1]),s=[]),n<a?(s.push(i),++n===a&&t.push(transformRowSpan(s))):t.push(i)}}catch(m){c=!0,d=m}finally{try{!o&&l.return&&l.return()}finally{if(c)throw d}}return t},getNextTable=function(e,r,t){var n=e,a=findTableStart(n);if(a===-1)return null;n=n.substring(a);var s=findTableEnd(n);if(s===-1)return null;n=n.substring(0,s);var o=getRows(n);if(!o.length)return null;var c=getHeaders(o[0]);return c.length?{data:o.slice(1).map(transformCells).map(function(d){return c.reduce(function(u,l,i){return u[camelCase(fillVariable(l,r,t))]=fillVariables(d[i],r,t),u},{})}),end:a+s}:null},parseTables=function(e,r){for(var t=cleanSource(e,r),n=extractData(t),a=[],s=n.source,o=null;o=getNextTable(s,n.context,r);){if(!o)return a;a.push(o.data),s=s.substring(o.end)}return a},linkPattern$1=/\[\[([^\]]+)\]\]/g,kmPattern=/{{BSkm\|([\dx]+,[\dx]+)\|([\dx]+,[\dx]+)}}/g,parseBsTables=function(e){var r=e.replace(kmPattern,"$1/$2").match(/{{BS([^}}]+)}}/g);return r?r.map(function(t){return clean(t).split("|")}).map(parseRow).filter(function(t){return t.type[0]!=="-"}):null},headingPattern=/[^=]==\s?([\w\s]+)\s?==/g,subheadingPattern=/===([\w\s]+)===/g,tableStartPattern$1=/{{list.+start.*}}/gi,tableEndPattern$1=/{{list.+end.*}}/gi,rowPattern$1=/{{(.*)}}/g,rowPatternSingle=/{{(.*)}}/,parseLists=function(e){var r=getMatches(e,headingPattern),t=getMatches(e,subheadingPattern),n=getTables(e);return n.forEach(function(a){var s=r.filter(function(c){return c.end<a.start}).map(function(c){return c.value});a.heading=last(s);var o=t.filter(function(c){return c.end<a.start}).map(function(c){return c.value});a.subheading=last(o),delete a.start,delete a.end}),n},bundle_min=parseInfobox,hasRequiredPage;function requirePage(){return hasRequiredPage||(hasRequiredPage=1,function(exports){Object.defineProperty(exports,"__esModule",{value:!0}),exports.citation=exports.pdf=exports.mobileHtml=exports.media=exports.related=exports.summary=exports.rawInfo=exports.tables=exports.infobox=exports.langLinks=exports.coordinates=exports.references=exports.links=exports.categories=exports.content=exports.html=exports.intro=exports.images=exports.Page=void 0;const errors_1=errors,request_1=request,utils_1=requireUtils(),messages_1=messages,infoboxParser=bundle_min;class Page{constructor(e){this.intro=async r=>{try{if(!this._intro){const t=await(0,exports.intro)(this.pageid.toString(),r==null?void 0:r.redirect);this._intro=t}return this._intro}catch(t){throw new errors_1.introError(t)}},this.images=async r=>{try{if(!this._images){const t=await(0,exports.images)(this.pageid.toString(),r);this._images=t}return this._images}catch(t){throw new errors_1.imageError(t)}},this.summary=async r=>{try{if(!this._summary){const t=await(0,exports.summary)(this.title,r==null?void 0:r.redirect);this._summary=t}return this._summary}catch(t){throw new errors_1.summaryError(t)}},this.html=async r=>{try{if(!this._html){const t=await(0,exports.html)(this.pageid.toString(),r==null?void 0:r.redirect);this._html=t}return this._html}catch(t){throw new errors_1.htmlError(t)}},this.content=async r=>{try{if(!this._content){const t=await(0,exports.content)(this.pageid.toString(),r==null?void 0:r.redirect);this.parentid=t.ids.parentId,this.revid=t.ids.revId,this._content=t.result}return this._content}catch(t){throw new errors_1.contentError(t)}},this.categories=async r=>{try{if(!this._categories){const t=await(0,exports.categories)(this.pageid.toString(),r);this._categories=t}return this._categories}catch(t){throw new errors_1.categoriesError(t)}},this.links=async r=>{try{if(!this._links){const t=await(0,exports.links)(this.pageid.toString(),r);this._links=t}return this._links}catch(t){throw new errors_1.linksError(t)}},this.references=async r=>{try{if(!this._references){const t=await(0,exports.references)(this.pageid.toString(),r);this._references=t}return this._references}catch(t){throw new errors_1.linksError(t)}},this.coordinates=async r=>{try{if(!this._coordinates){const t=await(0,exports.coordinates)(this.pageid.toString(),r==null?void 0:r.redirect);this._coordinates=t}return this._coordinates}catch(t){throw new errors_1.coordinatesError(t)}},this.langLinks=async r=>{try{if(!this._langLinks){const t=await(0,exports.langLinks)(this.pageid.toString(),r);this._langLinks=t}return this._langLinks}catch(t){throw new errors_1.linksError(t)}},this.infobox=async r=>{try{if(!this._infobox){const t=await(0,exports.infobox)(this.pageid.toString(),r==null?void 0:r.redirect);this._infobox=t}return this._infobox}catch(t){throw new errors_1.infoboxError(t)}},this.tables=async r=>{try{if(!this._tables){const t=await(0,exports.tables)(this.pageid.toString(),r==null?void 0:r.redirect);this._tables=t}return this._tables}catch(t){throw new errors_1.infoboxError(t)}},this.related=async r=>{try{if(!this._related){const t=await(0,exports.related)(this.title,r==null?void 0:r.redirect);this._related=t}return this._related}catch(t){throw new errors_1.relatedError(t)}},this.media=async r=>{try{if(!this._media){const t=await(0,exports.media)(this.title,r==null?void 0:r.redirect);this._media=t}return this._media}catch(t){throw new errors_1.mediaError(t)}},this.mobileHtml=async r=>{try{if(!this._mobileHtml){const t=await(0,exports.mobileHtml)(this.title,r==null?void 0:r.redirect);this._mobileHtml=t}return this._mobileHtml}catch(t){throw new errors_1.htmlError(t)}},this.pdf=async r=>{try{return await(0,exports.pdf)(this.title,r)}catch(t){throw new errors_1.pdfError(t)}},this.pageid=e.pageid,this.ns=e.ns,this.title=e.title,this.contentmodel=e.contentmodel,this.pagelanguage=e.pagelanguage,this.pagelanguagedir=e.pagelanguagedir,this.touched=e.touched,this.lastrevid=e.lastrevid,this.length=e.length,this.fullurl=e.fullurl,this.editurl=e.editurl,this.canonicalurl=e.canonicalurl}async runMethod(functionName){try{const result=await eval(`this.${functionName}()`);return result}catch(e){throw new errors_1.preloadError(e)}}}exports.Page=Page;const images=async(e,r)=>{try{let t={generator:"images",gimlimit:(r==null?void 0:r.limit)||5,prop:"imageinfo",iiprop:"url"};t=(0,utils_1.setPageIdOrTitleParam)(t,e);const n=await(0,request_1.default)(t,r==null?void 0:r.redirect),a=[],s=Object.keys(n.query.pages);for(const o of s){const c=n.query.pages[o];c.url=c.imageinfo[0].url,a.push(c)}return a}catch(t){throw new errors_1.imageError(t)}};exports.images=images;const intro=async(e,r=!0)=>{var t;try{let n={prop:"extracts",explaintext:"",exintro:""};n=(0,utils_1.setPageIdOrTitleParam)(n,e);const a=await(0,request_1.default)(n,r),s=(0,utils_1.setPageId)(n,a);return(t=a==null?void 0:a.query)===null||t===void 0?void 0:t.pages[s].extract}catch(n){throw new errors_1.introError(n)}};exports.intro=intro;const html=async(e,r=!0)=>{try{let t={prop:"revisions",rvprop:"content",rvlimit:1,rvparse:""};t=(0,utils_1.setPageIdOrTitleParam)(t,e);const n=await(0,request_1.default)(t,r),a=(0,utils_1.setPageId)(t,n);return n.query.pages[a].revisions[0]["*"]}catch(t){throw new errors_1.htmlError(t)}};exports.html=html;const content=async(e,r=!0)=>{try{let t={prop:"extracts|revisions",explaintext:"",rvprop:"ids"};t=(0,utils_1.setPageIdOrTitleParam)(t,e);const n=await(0,request_1.default)(t,r),a=(0,utils_1.setPageId)(t,n),s=n.query.pages[a].extract,o={revisionId:n.query.pages[a].revisions[0].revid,parentId:n.query.pages[a].revisions[0].parentid};return{result:s,ids:o}}catch(t){throw new errors_1.contentError(t)}};exports.content=content;const categories=async(e,r)=>{try{let t={prop:"categories",pllimit:r==null?void 0:r.limit};t=(0,utils_1.setPageIdOrTitleParam)(t,e);const n=await(0,request_1.default)(t,r==null?void 0:r.redirect),a=(0,utils_1.setPageId)(t,n);return n.query.pages[a].categories.map(s=>s.title)}catch(t){throw new errors_1.categoriesError(t)}};exports.categories=categories;const links=async(e,r)=>{try{let t={prop:"links",plnamespace:0,pllimit:(r==null?void 0:r.limit)||"max"};t=(0,utils_1.setPageIdOrTitleParam)(t,e);const n=await(0,request_1.default)(t,r==null?void 0:r.redirect),a=(0,utils_1.setPageId)(t,n);return n.query.pages[a].links.map(o=>o.title)}catch(t){throw new errors_1.linksError(t)}};exports.links=links;const references=async(e,r)=>{try{let t={prop:"extlinks",ellimit:(r==null?void 0:r.limit)||"max"};t=(0,utils_1.setPageIdOrTitleParam)(t,e);const n=await(0,request_1.default)(t,r==null?void 0:r.redirect),a=(0,utils_1.setPageId)(t,n);return n.query.pages[a].extlinks.map(o=>o["*"])}catch(t){throw new errors_1.linksError(t)}};exports.references=references;const coordinates=async(e,r=!0)=>{try{let t={prop:"coordinates"};t=(0,utils_1.setPageIdOrTitleParam)(t,e);const n=await(0,request_1.default)(t,r),a=(0,utils_1.setPageId)(t,n),s=n.query.pages[a].coordinates;return s?s[0]:null}catch(t){throw new errors_1.coordinatesError(t)}};exports.coordinates=coordinates;const langLinks=async(e,r)=>{try{let t={prop:"langlinks",lllimit:(r==null?void 0:r.limit)||"max",llprop:"url"};t=(0,utils_1.setPageIdOrTitleParam)(t,e);const n=await(0,request_1.default)(t,r==null?void 0:r.redirect),a=(0,utils_1.setPageId)(t,n);return n.query.pages[a].langlinks.map(o=>({lang:o.lang,title:o["*"],url:o.url}))}catch(t){throw new errors_1.linksError(t)}};exports.langLinks=langLinks;const infobox=async(e,r=!0)=>{try{const t={prop:"revisions",rvprop:"content",rvsection:0},n=await(0,exports.rawInfo)(e,t,r);return infoboxParser(n).general}catch(t){throw new errors_1.infoboxError(t)}};exports.infobox=infobox;const tables=async(e,r=!0)=>{try{const t={prop:"revisions",rvprop:"content"},n=await(0,exports.rawInfo)(e,t,r);return infoboxParser(n).tables}catch(t){throw new errors_1.infoboxError(t)}};exports.tables=tables;const rawInfo=async(e,r,t=!0)=>{var n;try{r=(0,utils_1.setPageIdOrTitleParam)(r,e);const a=await(0,request_1.default)(r,t);if(!(!((n=a.query)===null||n===void 0)&&n.pages))throw new errors_1.wikiError(messages_1.MSGS.INFOBOX_NOT_EXIST);const s=(0,utils_1.setPageId)(r,a),o=a.query.pages[s].revisions[0];return o?o["*"]:""}catch(a){throw new errors_1.infoboxError(a)}};exports.rawInfo=rawInfo;const summary=async(e,r=!0)=>{try{const t="page/summary/"+e.replace(" ","_");return await(0,request_1.makeRestRequest)(t,r)}catch(t){throw new errors_1.summaryError(t)}};exports.summary=summary;const related=async(e,r=!0)=>{try{const t="page/related/"+e.replace(" ","_");return await(0,request_1.makeRestRequest)(t,r)}catch(t){throw new errors_1.relatedError(t)}};exports.related=related;const media=async(e,r=!0)=>{try{const t="page/media-list/"+e.replace(" ","_");return await(0,request_1.makeRestRequest)(t,r)}catch(t){throw new errors_1.mediaError(t)}};exports.media=media;const mobileHtml=async(e,r=!0)=>{try{const t=`page/mobile-html/${e}`;return await(0,request_1.makeRestRequest)(t,r)}catch(t){throw new errors_1.htmlError(t)}};exports.mobileHtml=mobileHtml;const pdf=async(e,r)=>{try{let t=`page/pdf/${e}`;return r!=null&&r.format&&(t+=`/${r.format}`),r!=null&&r.type&&(t+=`/${r.type}`),(0,request_1.returnRestUrl)(t)}catch(t){throw new errors_1.pdfError(t)}};exports.pdf=pdf;const citation=async(e,r,t)=>{try{let n="data/citation";return n+=r?`/${r}`:"/mediawiki",n+=`/${e}`,t&&(n+=`/${t}`),await(0,request_1.makeRestRequest)(n)}catch(n){throw new errors_1.citationError(n)}};exports.citation=citation,exports.default=Page}(page$1)),page$1}var resultTypes={};Object.defineProperty(resultTypes,"__esModule",{value:!0});var optionTypes={};Object.defineProperty(optionTypes,"__esModule",{value:!0});var hasRequiredDist;function requireDist(){return hasRequiredDist||(hasRequiredDist=1,function(e,r){var t=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(l,i,f,m){m===void 0&&(m=f);var p=Object.getOwnPropertyDescriptor(i,f);(!p||("get"in p?!i.__esModule:p.writable||p.configurable))&&(p={enumerable:!0,get:function(){return i[f]}}),Object.defineProperty(l,m,p)}:function(l,i,f,m){m===void 0&&(m=f),l[m]=i[f]}),n=commonjsGlobal&&commonjsGlobal.__exportStar||function(l,i){for(var f in l)f!=="default"&&!Object.prototype.hasOwnProperty.call(i,f)&&t(i,l,f)};Object.defineProperty(r,"__esModule",{value:!0});const a=request,s=requirePage(),o=errors,c=messages,d=requireUtils(),u=async(l,i)=>u.page(l,i);u.search=async(l,i)=>{try{const f={list:"search",srprop:"",srlimit:(i==null?void 0:i.limit)||10,srsearch:l};i!=null&&i.suggestion&&(f.srinfo="suggestion");const m=await(0,a.default)(f);return{results:m.query.search,suggestion:m.query.searchinfo?m.query.searchinfo.suggestion:null}}catch(f){throw new o.searchError(f)}},u.page=async(l,i)=>{try{i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l));let f={prop:"info|pageprops",inprop:"url",ppprop:"disambiguation"};f=(0,d.setPageIdOrTitleParam)(f,l);const m=await(0,a.default)(f);let p=m.query.pages;const h=(0,d.setPageId)(f,m);if(p=p[h],p.missing=="")throw new o.pageError(`${c.MSGS.PAGE_NOT_EXIST}${l}`);const g=new s.default(p);if(i!=null&&i.preload){i!=null&&i.fields||(i.fields=["summary","images"]);for(const y of i.fields)await g.runMethod(y)}return g}catch(f){throw new o.pageError(f)}},u.intro=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.intro)(l,i==null?void 0:i.redirect)}catch(f){throw new o.introError(f)}},u.images=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.images)(l,i)}catch(f){throw new o.imageError(f)}},u.summary=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.summary)(l,i==null?void 0:i.redirect)}catch(f){throw new o.summaryError(f)}},u.html=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.html)(l,i==null?void 0:i.redirect)}catch(f){throw new o.htmlError(f)}},u.content=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),(await(0,s.content)(l,i==null?void 0:i.redirect)).result}catch(f){throw new o.contentError(f)}},u.categories=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.categories)(l,i)}catch(f){throw new o.categoriesError(f)}},u.related=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.related)(l,i==null?void 0:i.redirect)}catch(f){throw new o.relatedError(f)}},u.media=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.media)(l,i==null?void 0:i.redirect)}catch(f){throw new o.mediaError(f)}},u.links=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.links)(l,i)}catch(f){throw new o.linksError(f)}},u.references=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.references)(l,i)}catch(f){throw new o.linksError(f)}},u.coordinates=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.coordinates)(l,i==null?void 0:i.redirect)}catch(f){throw new o.coordinatesError(f)}},u.langLinks=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.langLinks)(l,i)}catch(f){throw new o.linksError(f)}},u.infobox=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.infobox)(l,i==null?void 0:i.redirect)}catch(f){throw new o.infoboxError(f)}},u.tables=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.tables)(l,i==null?void 0:i.redirect)}catch(f){throw new o.infoboxError(f)}},u.languages=async()=>{try{const l={meta:"siteinfo",siprop:"languages"},i=await(0,a.default)(l),f=[];for(const m of i.query.languages)f.push({[m.code]:m["*"]});return f}catch(l){throw new o.wikiError(l)}},u.setLang=l=>(0,a.setAPIUrl)(l),u.geoSearch=async(l,i,f)=>{try{const m={list:"geosearch",gsradius:(f==null?void 0:f.radius)||1e3,gscoord:`${l}|${i}`,gslimit:(f==null?void 0:f.limit)||10,gsprop:"type"};return(await(0,a.default)(m)).query.geosearch}catch(m){throw new o.geoSearchError(m)}},u.suggest=async l=>{var i,f,m,p;try{const h={list:"search",srinfo:"suggestion",srprop:"",srsearch:l},g=await(0,a.default)(h);return!((f=(i=g.query)===null||i===void 0?void 0:i.searchinfo)===null||f===void 0)&&f.suggestion?(p=(m=g.query)===null||m===void 0?void 0:m.searchinfo)===null||p===void 0?void 0:p.suggestion:null}catch(h){throw new o.searchError(h)}},u.onThisDay=async(l={})=>{try{const i=l.type||"all",f=(l.month||(0,d.getCurrentMonth)()).toString().padStart(2,"0"),m=(l.day||(0,d.getCurrentDay)()).toString().padStart(2,"0"),p=`feed/onthisday/${i}/${f}/${m}`;return await(0,a.makeRestRequest)(p,!0)}catch(i){throw new o.eventsError(i)}},u.featuredContent=async(l={})=>{try{const i=(l.year||(0,d.getCurrentYear)()).toString(),f=(l.month||(0,d.getCurrentMonth)()).toString().padStart(2,"0"),m=(l.day||(0,d.getCurrentDay)()).toString().padStart(2,"0"),p=`feed/featured/${i}/${f}/${m}`;return await(0,a.makeRestRequest)(p,!0)}catch(i){throw new o.fcError(i)}},u.random=async l=>{try{l||(l="summary");const i=`page/random/${l}`;return await(0,a.makeRestRequest)(i)}catch(i){throw new o.wikiError(i)}},u.mobileHtml=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.mobileHtml)(l,i==null?void 0:i.redirect)}catch(f){throw new o.htmlError(f)}},u.pdf=async(l,i)=>{try{return i!=null&&i.autoSuggest&&(l=await(0,d.setTitleForPage)(l)),await(0,s.pdf)(l,i)}catch(f){throw new o.pdfError(f)}},u.citation=async(l,i,f)=>{try{return await(0,s.citation)(l,i,f)}catch(m){throw new o.citationError(m)}},u.autocompletions=async(l,i)=>{try{const f={list:"search",limit:(i==null?void 0:i.limit)||10,search:l,action:"opensearch",redirect:"return"},[,m]=await(0,a.default)(f,!1);return m}catch(f){throw new o.autocompletionsError(f)}},u.setUserAgent=l=>{(0,a.setUserAgent)(l)},r.default=u,e.exports=u,e.exports.default=u,n(errors,r),n(resultTypes,r),n(optionTypes,r),n(requirePage(),r)}(dist,dist.exports)),dist.exports}var distExports=requireDist();const page=getDefaultExportFromCjs(distExports);function get_each_context(e,r,t){const n=e.slice();return n[9]=r[t],n[11]=t,n}function create_else_block(e){let r,t;return{c(){r=element("div"),t=text("Enter a Wikipedia article name above"),this.h()},l(n){r=claim_element(n,"DIV",{class:!0});var a=children(r);t=claim_text(a,"Enter a Wikipedia article name above"),a.forEach(detach),this.h()},h(){attr(r,"class","text-center text-2xl mt-2")},m(n,a){insert_hydration(n,r,a),append_hydration(r,t)},p:noop$1,i:noop$1,o:noop$1,d(n){n&&detach(r)}}}function create_if_block_1(e){let r,t,n,a,s;return{c(){r=element("div"),t=element("button"),n=text("Start Presentation"),this.h()},l(o){r=claim_element(o,"DIV",{class:!0});var c=children(r);t=claim_element(c,"BUTTON",{class:!0});var d=children(t);n=claim_text(d,"Start Presentation"),d.forEach(detach),c.forEach(detach),this.h()},h(){attr(t,"class","btn btn-primary btn-lg self-center"),attr(r,"class","flex items-center place-content-center mt-2")},m(o,c){insert_hydration(o,r,c),append_hydration(r,t),append_hydration(t,n),a||(s=listen(t,"click",e[6]),a=!0)},p:noop$1,i:noop$1,o:noop$1,d(o){o&&detach(r),a=!1,s()}}}function create_if_block(e){let r,t;return r=new Splide_1({props:{options:{pagination:!1,perPage:1,type:"loop"},"aria-label":"My Favorite Images",$$slots:{default:[create_default_slot]},$$scope:{ctx:e}}}),{c(){create_component(r.$$.fragment)},l(n){claim_component(r.$$.fragment,n)},m(n,a){mount_component(r,n,a),t=!0},p(n,a){const s={};a&4105&&(s.$$scope={dirty:a,ctx:n}),r.$set(s)},i(n){t||(transition_in(r.$$.fragment,n),t=!0)},o(n){transition_out(r.$$.fragment,n),t=!1},d(n){destroy_component(r,n)}}}function create_default_slot_2(e){let r,t,n=e[9].title+"",a,s,o,c=e[9].text+"",d;return{c(){r=element("div"),t=element("div"),a=text(n),s=space(),o=element("div"),d=text(c),this.h()},l(u){r=claim_element(u,"DIV",{class:!0});var l=children(r);t=claim_element(l,"DIV",{class:!0});var i=children(t);a=claim_text(i,n),i.forEach(detach),s=claim_space(l),o=claim_element(l,"DIV",{class:!0});var f=children(o);d=claim_text(f,c),f.forEach(detach),l.forEach(detach),this.h()},h(){attr(t,"class","text-4xl text-center align-top"),attr(o,"class","text-center align-top text-md pt-2 pl-6 pr-6 mt-2 mr-6 ml-6"),attr(r,"class","flex flex-col")},m(u,l){insert_hydration(u,r,l),append_hydration(r,t),append_hydration(t,a),append_hydration(r,s),append_hydration(r,o),append_hydration(o,d)},p(u,l){l&8&&n!==(n=u[9].title+"")&&set_data(a,n),l&8&&c!==(c=u[9].text+"")&&set_data(d,c)},d(u){u&&detach(r)}}}function create_each_block(e,r){let t,n,a;return n=new SplideSlide({props:{class:"flex justify-center items-center justify-items-center",$$slots:{default:[create_default_slot_2]},$$scope:{ctx:r}}}),{key:e,first:null,c(){t=empty(),create_component(n.$$.fragment),this.h()},l(s){t=empty(),claim_component(n.$$.fragment,s),this.h()},h(){this.first=t},m(s,o){insert_hydration(s,t,o),mount_component(n,s,o),a=!0},p(s,o){r=s;const c={};o&4104&&(c.$$scope={dirty:o,ctx:r}),n.$set(c)},i(s){a||(transition_in(n.$$.fragment,s),a=!0)},o(s){transition_out(n.$$.fragment,s),a=!1},d(s){s&&detach(t),destroy_component(n,s)}}}function create_default_slot_1(e){let r,t,n,a,s,o,c,d;return{c(){r=element("div"),t=element("div"),n=text("The End"),a=space(),s=element("div"),o=text("This was a presentation of "),c=text(e[0]),d=text("!"),this.h()},l(u){r=claim_element(u,"DIV",{class:!0});var l=children(r);t=claim_element(l,"DIV",{class:!0});var i=children(t);n=claim_text(i,"The End"),i.forEach(detach),a=claim_space(l),s=claim_element(l,"DIV",{class:!0});var f=children(s);o=claim_text(f,"This was a presentation of "),c=claim_text(f,e[0]),d=claim_text(f,"!"),f.forEach(detach),l.forEach(detach),this.h()},h(){attr(t,"class","text-5xl text-center align-top"),attr(s,"class","text-center text-2xl align-top pt-2 pl-6 pr-6 mt-2 mr-6 ml-6"),attr(r,"class","flex flex-col")},m(u,l){insert_hydration(u,r,l),append_hydration(r,t),append_hydration(t,n),append_hydration(r,a),append_hydration(r,s),append_hydration(s,o),append_hydration(s,c),append_hydration(s,d)},p(u,l){l&1&&set_data(c,u[0])},d(u){u&&detach(r)}}}function create_default_slot(e){let r=[],t=new Map,n,a,s,o=e[3];const c=d=>d[9].index;for(let d=0;d<o.length;d+=1){let u=get_each_context(e,o,d),l=c(u);t.set(l,r[d]=create_each_block(l,u))}return a=new SplideSlide({props:{class:"flex justify-center items-center justify-items-center",$$slots:{default:[create_default_slot_1]},$$scope:{ctx:e}}}),{c(){for(let d=0;d<r.length;d+=1)r[d].c();n=space(),create_component(a.$$.fragment)},l(d){for(let u=0;u<r.length;u+=1)r[u].l(d);n=claim_space(d),claim_component(a.$$.fragment,d)},m(d,u){for(let l=0;l<r.length;l+=1)r[l]&&r[l].m(d,u);insert_hydration(d,n,u),mount_component(a,d,u),s=!0},p(d,u){u&8&&(o=d[3],group_outros(),r=update_keyed_each(r,u,c,1,d,o,t,n.parentNode,outro_and_destroy_block,create_each_block,n,get_each_context),check_outros());const l={};u&4097&&(l.$$scope={dirty:u,ctx:d}),a.$set(l)},i(d){if(!s){for(let u=0;u<o.length;u+=1)transition_in(r[u]);transition_in(a.$$.fragment,d),s=!0}},o(d){for(let u=0;u<r.length;u+=1)transition_out(r[u]);transition_out(a.$$.fragment,d),s=!1},d(d){for(let u=0;u<r.length;u+=1)r[u].d(d);d&&detach(n),destroy_component(a,d)}}}function create_fragment(e){let r,t,n,a,s,o,c,d,u,l,i,f,m,p,h,g,y,w;const _=[create_if_block,create_if_block_1,create_else_block],E=[];function S(b,P){return b[1]?0:b[2]?1:2}return p=S(e),h=E[p]=_[p](e),{c(){r=element("meta"),t=space(),n=element("div"),a=element("h1"),s=text("Wiki Presenter!"),o=space(),c=element("div"),d=element("input"),u=space(),l=element("button"),i=text("Search"),f=space(),m=element("div"),h.c(),this.h()},l(b){const P=head_selector("svelte-5pgj8t",document.head);r=claim_element(P,"META",{name:!0,content:!0}),P.forEach(detach),t=claim_space(b),n=claim_element(b,"DIV",{class:!0,style:!0});var v=children(n);a=claim_element(v,"H1",{class:!0});var A=children(a);s=claim_text(A,"Wiki Presenter!"),A.forEach(detach),o=claim_space(v),c=claim_element(v,"DIV",{class:!0});var x=children(c);d=claim_element(x,"INPUT",{type:!0,class:!0}),u=claim_space(x),l=claim_element(x,"BUTTON",{class:!0});var $=children(l);i=claim_text($,"Search"),$.forEach(detach),x.forEach(detach),f=claim_space(v),m=claim_element(v,"DIV",{});var T=children(m);h.l(T),T.forEach(detach),v.forEach(detach),this.h()},h(){document.title="Wiki Present",attr(r,"name","description"),attr(r,"content","Have Wikipedia presented to you"),attr(a,"class","text-4xl pt-8 font-semibold text-center"),attr(d,"type","text"),attr(d,"class","input input-primary input-bordered"),attr(l,"class","btn"),attr(c,"class","text-lg pt-1 text-center mt-1 mr-2 ml-2"),attr(n,"class","bg-base-100 h-full"),set_style(n,"min-height","92.25vh")},m(b,P){append_hydration(document.head,r),insert_hydration(b,t,P),insert_hydration(b,n,P),append_hydration(n,a),append_hydration(a,s),append_hydration(n,o),append_hydration(n,c),append_hydration(c,d),set_input_value(d,e[0]),append_hydration(c,u),append_hydration(c,l),append_hydration(l,i),append_hydration(n,f),append_hydration(n,m),E[p].m(m,null),g=!0,y||(w=[listen(d,"input",e[5]),listen(l,"click",e[4])],y=!0)},p(b,[P]){P&1&&d.value!==b[0]&&set_input_value(d,b[0]);let v=p;p=S(b),p===v?E[p].p(b,P):(group_outros(),transition_out(E[v],1,1,()=>{E[v]=null}),check_outros(),h=E[p],h?h.p(b,P):(h=E[p]=_[p](b),h.c()),transition_in(h,1),h.m(m,null))},i(b){g||(transition_in(h),g=!0)},o(b){transition_out(h),g=!1},d(b){detach(r),b&&detach(t),b&&detach(n),E[p].d(),y=!1,run_all(w)}}}function instance(e,r,t){let n="Batman",a=!1,s=!1,o,c=[];function d(){t(1,a=!1),(async()=>{try{o=await page(n);let p=await o.content({redirect:!1});console.log(p);let h=p.split("====").join("").split("===");console.log(h);let g=[];for(var i=0,f=n,m=0;m<h.length;m++){if(m%2==1){f=h[m];continue}let y=h[m];if(y.length==0)continue;let w=y.match(/.{1,500}/g);console.log(w),w==null||w.forEach((_,E)=>{g.push({title:f,text:_,index:i++})})}t(3,c=g),console.log(c),t(2,s=!0)}catch(p){console.log(p)}})()}function u(){n=this.value,t(0,n)}return[n,a,s,c,d,u,()=>{t(1,a=!0),t(2,s=!1)}]}class Page_1 extends SvelteComponent{constructor(r){super(),init(this,r,instance,create_fragment,safe_not_equal,{})}}export{Page_1 as component,_page as universal};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
